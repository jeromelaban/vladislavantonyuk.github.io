<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title><![CDATA[Vladislav Antonyuk]]></title>
    <link>https://vladislavantonyuk.github.io</link>
    <atom:link href="https://vladislavantonyuk.github.io/rss" rel="self" type="application/rss+xml" />
    <description><![CDATA[Vladislav Antonyuk - Articles]]></description>
    <lastBuildDate>Mon, 01 Apr 2024 17:25:30 GMT</lastBuildDate>
    <item>
      <title><![CDATA[Choose the right framework for your next application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Choose-the-right-framework-for-your-next-application</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Choose-the-right-framework-for-your-next-application</guid>
      <description><![CDATA[A Deep Dive into .NET MAUI, Uno, and Avalonia]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>The world of .NET development offers a plethora of UI frameworks, each vying to be the champion of your next cross-platform application. But with so many options, choosing the right one can feel like navigating a labyrinth. This article delves into the depths of three popular contenders: .NET MAUI, Uno, and Avalonia, equipping you to make a well-informed decision.</p>
<p>We'll dissect each framework's strengths and weaknesses, explore potential issues you might encounter, and conclude with a helpful code sample to get you started.</p>
<h2 id="net-maui-the-official-contender">.NET MAUI: The Official Contender</h2>
<p>.NET MAUI, the official Microsoft successor to Xamarin.Forms, boasts a strong lineage. Packed with features like hot reload for instant UI updates and hardware acceleration for smooth performance, .NET MAUI excels in mobile development, offering native-looking apps for iOS and Android, Windows, macOS and Tizen. Additionally, developers with Xamarin.Forms experience will find the transition smooth due to the similar codebase.</p>
<p>However, .NET MAUI, being a young framework, has a smaller ecosystem of third-party libraries compared to its competitors. The third-party library ecosystem for .NET MAUI is still growing, so you might encounter compatibility issues with libraries designed specifically for Xamarin.Forms. While it supports desktop platforms, .NET MAUI might lack the granular control over native desktop features compared to dedicated desktop frameworks.</p>
<h2 id="uno-the-winui-powerhouse">Uno: The WinUI Powerhouse</h2>
<p>Uno leverages the powerful WinUI 3, ensuring your apps deliver a performant and feature-rich user experience across platforms.  Developers familiar with the Windows development ecosystem will find comfort in Uno's mature UI foundation built upon WinUI components.  Uno shines with its unique ability to target WebAssembly, allowing you to create web-based versions of your applications.</p>
<p>While offering a free core version, some advanced features require a commercial license. Building mobile apps with Uno is still in its early stages, and targeting WebAssembly might require additional learning for those unfamiliar with the technology.</p>
<h2 id="avalonia-the-open-source-champion">Avalonia: The Open-Source Champion</h2>
<p>Avalonia inherits the rich customization capabilities of WPF, empowering you to craft highly tailored desktop experiences. Its open-source nature fosters a vibrant community that actively contributes to its development and empowers custom control creation. Similar to Uno, Avalonia allows you to target WebAssembly, expanding your application's reach. The latest version adds support for tvOS.</p>
<p>However, Avalonia's smaller community might translate to fewer readily available resources. Mobile development with Avalonia is still experimental, and as a relatively young framework, it might experience stability concerns compared to more mature options.</p>
<p>A Code Sample for Comparison</p>
<p>Here's a simple XAML code snippet showcasing each framework's syntax (all displaying a button with &ldquo;Click Me&rdquo; text):</p>
<pre><code class="language-xml">// .NET MAUI
&lt;Button Text=&quot;Click Me&quot; Clicked=&quot;OnButtonClicked&quot; /&gt;

// Uno
&lt;Button Text=&quot;Click Me&quot; Clicked=&quot;OnButtonClicked&quot; /&gt;

// Avalonia
&lt;Button Content=&quot;Click Me&quot; Click=&quot;OnButtonClicked&quot; /&gt;
</code></pre>
<p>Use code with caution.
As you can see, all three frameworks utilize a similar XAML structure, making the transition between them less daunting.</p>
<h2 id="choosing-your-champion">Choosing Your Champion</h2>
<p>The best framework hinges on your project's specific needs. Here's a quick guideline:</p>
<ul>
<li>For mobile-first projects with native UI: Choose .NET MAUI.</li>
<li>For WinUI-based cross-platform apps with potential web deployment: Consider Uno.</li>
<li>For highly customizable desktop applications with WebAssembly aspirations: Opt for Avalonia.</li>
</ul>
<p>Remember, this is just a starting point. Explore each framework, leverage their online communities, and experiment with the code samples provided. By understanding the strengths, weaknesses, and potential issues of each contender, you'll be well-equipped to choose the right framework and build your next cross-platform application with confidence!</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/53/avalonia.png" alt="Avalonia" /></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Targeting Specific Runtimes for Platform Tests]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Targeting-Specific-Runtimes-for-Platform-Tests</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Targeting-Specific-Runtimes-for-Platform-Tests</guid>
      <description><![CDATA[This article tackles targeted platform testing, enabling you to isolate tests for specific runtime environments, boosting development efficiency and application robustness.]]></description>
      <content:encoded><![CDATA[<p>Hello! 👋</p>
<p>In the <a href="https://vladislavantonyuk.github.io/articles/Testing-.NET-MAUI-Application-using-Appium-and-xUnit/">previous article</a>, we discussed how to set up and run tests for your .NET MAUI application. The tests are shared for all platforms, but what if you need to test your application against a specific runtime version or environment? Here's how to achieve targeted testing for your platform interactions.</p>
<h2 id="step-1.define-runtime-and-platform">Step 1. Define Runtime and platform</h2>
<p>Create a class <code>RuntimePlatform</code>:</p>
<pre><code class="language-csharp">public class RuntimePlatform
{
    public const string WindowsAndroid = &quot;WINDOWS,Android&quot;;
    public const string OsxAndroid = &quot;OSX,Android&quot;;
    public const string OsxIOs = &quot;OSX,iOS&quot;;
    public const string OsxMacCatalyst = &quot;OSX,MacCatalyst&quot;;
    public const string WindowsWindows = &quot;WINDOWS,Windows&quot;;
    public const string OsxTizen = &quot;OSX,Tizen&quot;;

    public static RuntimePlatform Parse(string runtimePlatform)
    {
        var data = runtimePlatform.Split(',');
        return new RuntimePlatform
        {
            Runtime = OSPlatform.Create(data[0]),
            Platform = data[1]
        };
    }

    public string? Platform { get; private init; }

    public OSPlatform Runtime { get; private init; }
}
</code></pre>
<p>Here we define constants for all pairs of Runtime and Platform we need for tests. For example, we want to run Android app tests on Windows and OSX, but Tizen only on OSX.</p>
<h2 id="step-2.create-an-attribute">Step 2. Create an attribute</h2>
<p>For tests, I use <code>xUnit</code>. To define the test we need to set the <code>Fact</code> attribute for the test method. But as we want to skip the test on some platforms, we need to extend the <code>Fact</code> attribute.</p>
<p>Create a new class <code>AllowOnPlatformFactAttribute</code>:</p>
<pre><code class="language-csharp">public sealed class AllowOnPlatformFactAttribute : FactAttribute
{
    public AllowOnPlatformFactAttribute(params string[] runtimePlatforms)
    {
        foreach (var runtimePlatformString in runtimePlatforms)
        {
            var runtimePlatform = RuntimePlatform.Parse(runtimePlatformString);
            if (RuntimeInformation.IsOSPlatform(runtimePlatform.Runtime) &amp;&amp; AppiumSetup.Platform == runtimePlatform.Platform)
            {
                Skip = null;
                return;
            }

            Skip = $&quot;Test cannot be executed only on the {runtimePlatformString} platform&quot;;
        }
    }
}
</code></pre>
<p>This attribute checks if the current runtime and platform match the defined attribute parameter. If the condition is false, the test is skipped.</p>
<h2 id="step-3.apply-the-attribute">Step 3. Apply the attribute</h2>
<p>The final step is to replace <code>Fact</code> attribute with <code>AllowOnPlatformFact</code> attribute, so our launch test looks like this:</p>
<pre><code class="language-csharp">[AllowOnPlatformFact(
    RuntimePlatform.WindowsAndroid,
    RuntimePlatform.OsxAndroid,
    RuntimePlatform.OsxIOs,
    RuntimePlatform.OsxMacCatalyst,
    RuntimePlatform.WindowsWindows,
    RuntimePlatform.OsxTizen
)]
public async Task AppLaunches()
{
    await Task.Delay(2000);
    VerifyScreenshot($&quot;{nameof(AppLaunches)}&quot;);
}
</code></pre>
<h1 id="conclusion">Conclusion</h1>
<p>By implementing targeted platform tests, you gain several advantages:</p>
<ul>
<li>Increased Confidence: You can ensure your application functions correctly across various runtime environments, boosting overall confidence in its robustness.</li>
<li>Improved Efficiency: By focusing tests on specific runtimes, you can reduce overall test execution time, leading to faster development cycles.</li>
<li>Simplified Maintenance: Documented runtime configurations make it easier to maintain and update your test suite as your application and supported platforms evolve.</li>
</ul>
<p>Happy testing!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Testing .NET MAUI Application using Appium and xUnit]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Testing-.NET-MAUI-Application-using-Appium-and-xUnit</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Testing-.NET-MAUI-Application-using-Appium-and-xUnit</guid>
      <description><![CDATA[Elevate your .NET MAUI application testing with precision using Appium and xUnit.]]></description>
      <content:encoded><![CDATA[<p>Hello! 👋</p>
<p>As we delve into the realm of unit testing and integration testing for .NET MAUI applications on this unique February 29th, 2024, it's essential to acknowledge the significance of ensuring the robustness and reliability of our code.</p>
<p>In this article, we'll explore the fundamentals of unit testing and integration testing for .NET MAUI applications, providing practical insights and examples to guide you in setting up and writing tests effectively. Whether you're familiar with test-driven development or looking to enhance your testing practices, let's embark on this journey of ensuring the quality and resilience of your .NET MAUI projects.</p>
<p>Now, let's continue with the main content, incorporating examples of setting up and writing tests for .NET MAUI applications.</p>
<h1 id="unit-testing-in.net-maui">Unit Testing in .NET MAUI</h1>
<p>In .NET MAUI development, unit testing plays a crucial role in ensuring the reliability and functionality of individual units of code. As a .NET software engineer using C#, you are likely familiar with xUnit, a popular unit testing framework. Here are awesome videos demonstrating step-by-step guides to set and write unit tests for your application:</p>
<p><a href="https://learn.microsoft.com/en-us/shows/dotnetconf-focus-on-maui/unit-testing-for-your-maui-applications"><img src="https://learn.microsoft.com/video/media/6c225cf7-1199-4329-accb-c1b31b54ed67/PR10_dotNETconf-AllanRitchie-1920x1080_w1120.png" alt="YouTube Video Link" /></a></p>
<p><a href="https://www.youtube.com/watch?v=C9vIDLQwc7M"><img src="https://img.youtube.com/vi/C9vIDLQwc7M/0.jpg" alt="YouTube Video Link" /></a></p>
<h1 id="ui-testing-in.net-maui">UI Testing in .NET MAUI</h1>
<p>UI testing is crucial for ensuring that various parts of your .NET MAUI application work seamlessly together. As we step into the realm of mobile application testing, one tool that stands out for its versatility and effectiveness is Appium.</p>
<p>Appium is an open-source and cross-platform mobile application automation tool that supports all .NET MAUI platforms. What sets Appium apart is its commitment to providing a single automation API that works across different mobile platforms, making it a preferred choice for those seeking a unified approach to mobile testing.</p>
<p>Install Appium and drivers for each platform:</p>
<pre><code class="language-bash">npm i --location=global appium@2.1.1
appium driver install uiautomator2@2.29.4
appium driver install --source=npm appium-windows-driver@2.10.1
appium driver install xcuitest@4.34.0
appium driver install mac2@1.7.2
</code></pre>
<p>For UI integration tests using Appium, create a new xUnit project for each platform.</p>
<p>For Android, your csproj may look like this:</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;
        &lt;IsPackable&gt;false&lt;/IsPackable&gt;

        &lt;RootNamespace&gt;Client.UITests&lt;/RootNamespace&gt;
    &lt;/PropertyGroup&gt;

    &lt;ItemGroup&gt;
        &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.9.0&quot; /&gt;
        &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.7.0&quot; /&gt;
        &lt;PackageReference Include=&quot;xunit.analyzers&quot; Version=&quot;1.11.0&quot;&gt;
            &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
            &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
        &lt;/PackageReference&gt;
        &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot; Version=&quot;2.5.7&quot;&gt;
            &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
            &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
        &lt;/PackageReference&gt;
        &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;6.0.0&quot;&gt;
            &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
            &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
        &lt;/PackageReference&gt;
    &lt;/ItemGroup&gt;

    &lt;ItemGroup&gt;
        &lt;PackageReference Include=&quot;Appium.WebDriver&quot; Version=&quot;5.0.0-rc.5&quot; /&gt;
        &lt;PackageReference Include=&quot;VisualTestUtils.MagickNet&quot; Version=&quot;0.9.46-beta&quot; /&gt;
        &lt;PackageReference Include=&quot;AndroidSdk&quot; Version=&quot;0.9.0&quot; /&gt; &lt;!-- only for Android csproj--&gt;
    &lt;/ItemGroup&gt;

    &lt;ItemGroup&gt;
        &lt;Compile Include=&quot;..\Client.Shared.UITests\**\*.cs&quot; LinkBase=&quot;Shared&quot; Visible=&quot;true&quot; /&gt;
    &lt;/ItemGroup&gt;

    &lt;ItemGroup&gt;
      &lt;None Update=&quot;snapshots\Android\*.png&quot;&gt; &lt;!-- replace Android with your platform--&gt;
        &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;
      &lt;/None&gt;
    &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre>
<p>The next step is preparing the AppiumSetup for each platform.</p>
<p>I try to make the test as much independent from user interaction, so it can be executed on CI.</p>
<p>Android AppiumSetup class creates an Android Emulator and installs the APK file on it.</p>
<pre><code class="language-csharp">namespace Client.UITests;

using AndroidSdk;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Android;

public sealed class AppiumSetup : IDisposable
{
    private readonly ITestOutputHelper testOutputHelper;
    public const string Platform = &quot;Android&quot;;
    private const string AvdName = &quot;CI_Emulator&quot;;
    private const string PackageName = &quot;com.vladislavantonyuk.drawgo&quot;;

    private readonly AppiumServiceHelper appiumService;
    private readonly Emulator.AndroidEmulatorProcess emulatorProcess;

    public AppiumDriver App { get; }

    public AppiumSetup(ITestOutputHelper testOutputHelper)
    {
        this.testOutputHelper = testOutputHelper;
        var sdk = InstallSoftware();
        emulatorProcess = sdk.Emulator.Start(AvdName, new Emulator.EmulatorStartOptions { NoSnapshot = true });
        emulatorProcess.WaitForBootComplete();

        appiumService = new AppiumServiceHelper();
        appiumService.StartAppiumLocalServer();

        var options = new AppiumOptions
        {
            AutomationName = &quot;UIAutomator2&quot;,
            PlatformName = Platform,
            PlatformVersion = &quot;13&quot;,
            App = GetApp()
        };

        App = new AndroidDriver(options);
    }

    public void Dispose()
    {
        App.Quit();
        emulatorProcess.Shutdown();
        appiumService.Dispose();
    }

    private static AndroidSdkManager InstallSoftware()
    {
        const string avdSdkId = &quot;system-images;android-33;google_apis_playstore;x86_64&quot;;

        var sdkPackages = new[]
        {
            &quot;platforms;android-33&quot;
        };

        var sdk = new AndroidSdkManager();
        sdk.Acquire();
        sdk.SdkManager.Install(sdkPackages);
        sdk.SdkManager.Install(avdSdkId);
        if (sdk.AvdManager.ListAvds().All(x =&gt; x.Name != AvdName))
        {
            sdk.AvdManager.Create(AvdName, avdSdkId, &quot;pixel&quot;, force: true);
        }
        
        return sdk;
    }

    private string GetApp()
    {
        var path = &quot;YOUR-FULL-PATH-TO-SIGNED-APK&quot;;
        testOutputHelper.WriteLine(path);
        return path;
    }
}
</code></pre>
<p>For all other platforms the <code>AppiumSetup</code> classes can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiTests" target="_blank">GitHub</a>.</p>
<p>Pay attention to Windows setup. You need to start the application manually or use <code>process = Process.Start(&quot;explorer.exe&quot;, &quot;YOUR-APP-IDENTIFIER:&quot;);</code>, Appium doesn't start WinUI application automatically.</p>
<p>That's it with setting platform-specific code. The next part is Shared for all platforms.</p>
<p>Create a folder &ldquo;Client.Shared.UITests&rdquo;. This is where we will store our tests and helper classes.</p>
<p>Create an <code>AppiumServiceHelper</code> class. It creates and executes <code>AppiumLocalService</code>.</p>
<pre><code class="language-csharp">namespace Client.UITests;

using OpenQA.Selenium.Appium.Service;

public sealed class AppiumServiceHelper : IDisposable
{
    private const string DefaultHostAddress = &quot;127.0.0.1&quot;;
    private const int DefaultHostPort = 4723;

    private readonly AppiumLocalService appiumLocalService;

    public AppiumServiceHelper(string host = DefaultHostAddress, int port = DefaultHostPort)
    {
        var builder = new AppiumServiceBuilder()
                      .WithIPAddress(host)
                      .UsingPort(port);

        appiumLocalService = builder.Build();
    }

    public void StartAppiumLocalServer()
    {
        if (appiumLocalService.IsRunning)
        {
            return;
        }
        
        appiumLocalService.Start();
    }

    public void Dispose()
    {
        appiumLocalService.Dispose();
    }
}
</code></pre>
<p>Create a base class for all tests:</p>
<pre><code class="language-csharp">namespace Client.UITests;

using System.Globalization;
using System.Runtime.InteropServices;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Windows;
using VisualTestUtils;
using VisualTestUtils.MagickNet;

public abstract class BaseTest(ITestOutputHelper testOutputHelper) : IAsyncLifetime
{
    private const double DifferenceThreshold = 1 / 100d; // 1% difference
    private readonly VisualRegressionTester visualRegressionTester = new(testRootDirectory: Environment.CurrentDirectory,
                                                                          visualComparer: new MagickNetVisualComparer(differenceThreshold: DifferenceThreshold),
                                                                          visualDiffGenerator: new MagickNetVisualDiffGenerator(),
                                                                          ciArtifactsDirectory: Environment.GetEnvironmentVariable(&quot;Build.ArtifactStagingDirectory&quot;));
    private readonly MagickNetImageEditorFactory imageEditorFactory = new();

    protected AppiumDriver App { get; } = new AppiumSetup(testOutputHelper).App;

    protected AppiumElement FindUiElement(string id)
    {
        return App.FindElement(App is WindowsDriver ? MobileBy.AccessibilityId(id) : MobileBy.Id(id));
    }

    public Task InitializeAsync()
    {
        return Task.CompletedTask;
    }

    public Task DisposeAsync()
    {
        App.Dispose();
        return Task.CompletedTask;
    }

    protected void VerifyScreenshot(string name)
    {
        if (App.PlatformName == &quot;Windows&quot;)
        {
            var handle = App.CurrentWindowHandle;
            MoveWindow(IntPtr.Parse(handle[2..], NumberStyles.HexNumber), 0, 0, 800, 600, true);
        }
        
        var screenshotPngBytes = App.GetScreenshot().AsByteArray;

        var actualImage = new ImageSnapshot(screenshotPngBytes, ImageSnapshotFormat.PNG);

        // For Android and iOS, crop off the OS status bar at the top since it's not part of the
        // app itself and contains the time, which always changes. For WinUI, crop off the title
        // bar at the top as it varies slightly based on OS theme and is also not part of the app.
        int cropFromTop = App.PlatformName switch
        {
            &quot;Android&quot; =&gt; 60,
            &quot;iOS&quot; =&gt; 90,
            &quot;Windows&quot; =&gt; 32,
            _ =&gt; 0,
        };

        // For Android also crop the 3 button nav from the bottom, since it's not part of the
        // app itself and the button color can vary (the buttons change clear briefly when tapped)
        int cropFromBottom = App.PlatformName switch
        {
            &quot;Android&quot; =&gt; 125,
            _ =&gt; 0,
        };

        if (cropFromTop &gt; 0 || cropFromBottom &gt; 0)
        {
            IImageEditor imageEditor = imageEditorFactory.CreateImageEditor(actualImage);
            (int width, int height) = imageEditor.GetSize();

            imageEditor.Crop(0, cropFromTop, width, height - cropFromTop - cropFromBottom);

            actualImage = imageEditor.GetUpdatedImage();
        }

        visualRegressionTester.VerifyMatchesSnapshot(name, actualImage, environmentName: App.PlatformName);
    }
}
</code></pre>
<p>With UI testing, we compare the expected snapshot with the actual image we received during test execution. The <code>BaseTest</code> class has methods, that allow comparison of the snapshots.</p>
<p>So many preparations. When I will finally write the test?</p>
<p>Here are the tests:</p>
<pre><code class="language-csharp">namespace Client.UITests;

public class LoginPageTests(ITestOutputHelper testOutputHelper) : BaseTest(testOutputHelper)
{
    [Fact]
    public async Task AppLaunches()
    {
        await Task.Delay(2000);
        VerifyScreenshot($&quot;{nameof(AppLaunches)}&quot;);
    }

    [Fact]
    public async Task LoginBtnTest()
    {
        // Arrange
        var element = FindUiElement(&quot;LoginBtn&quot;);

        // Act
        element.Click();
        await Task.Delay(500);

        VerifyScreenshot($&quot;{nameof(Login)}&quot;);
    }
}
</code></pre>
<p>Here we have 2 simple tests. The first one just waits 2 seconds and then takes the screenshot and compares it with the predefined &ldquo;AppLaunches.png&rdquo;. The second test finds and clicks on the Login button and again compares the screenshots.</p>
<p>But what if I want to run some platform tests only on a specific runtime? Let's leave it for the next article.</p>
<h1 id="conclusion">Conclusion</h1>
<p>As a .NET software engineer, incorporating both unit testing and UI testing into your development workflow will contribute to the overall quality and reliability of your .NET MAUI applications.</p>
<p>Happy coding, and may your .NET MAUI projects thrive with the power of comprehensive testing.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Effortless Android Library Binding]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Effortless-Android-Library-Binding</link>
      <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Effortless-Android-Library-Binding</guid>
      <description><![CDATA[Bind Java libraries directly from Maven repositories.]]></description>
      <content:encoded><![CDATA[<p>Hello! 👋</p>
<p>The last article I wrote was about creating CalendarView with .NET MAUI Handler. For Android, I used <code>Android.Widget.CalendarView</code>. Unfortunately it doesn't have a material design and luck of some features. There is another library <code>com.applandeo:material-calendar-view</code>, but it is a Java library. We need to create a bindings library. Today I want to show you how to easily create an Android library binding.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Create a new .NET Android Bindings library either through the VS &ldquo;New Project&rdquo; dialog or the command line:</p>
<pre><code class="language-xml">dotnet new androidlib
</code></pre>
<p>Add the <code>XamPrototype.Android.MavenBinding.Tasks</code> NuGet package to the library through VS or the command line:</p>
<pre><code class="language-xml">dotnet add package XamPrototype.Android.MavenBinding.Tasks
</code></pre>
<p>This package allows Java libraries to be bound directly from Maven repositories. It also provides a task to verify that all required Java dependencies are being fulfilled.</p>
<p>This feature focuses on tackling two pain points of binding from Maven:</p>
<ul>
<li>Acquiring the <code>.jar</code>/<code>.aar</code> and the related <code>.pom</code> from Maven</li>
<li>Using the <code>.pom</code> to verify that required Java dependencies are being fulfilled</li>
</ul>
<p>Let's take an example: <code>com.applandeo:material-calendar-view</code> version <code>1.9.0</code> available in <a href="https://mvnrepository.com/artifact/com.applandeo/material-calendar-view">Maven</a>.</p>
<p>Add a new <code>&lt;AndroidMavenLibrary&gt;</code> which specifies the Java artifact we want to bind:</p>
<pre><code class="language-xml">&lt;!-- Include format is {GroupId}:{ArtifactId} --&gt;
&lt;ItemGroup&gt;
  &lt;AndroidMavenLibrary Include=&quot;com.applandeo:material-calendar-view&quot; Version=&quot;1.9.0&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<blockquote>
<p>Note: By default, this pulls the library from Maven Central. There is also support for Google's Maven, custom Maven repositories, and local Java artifact files.  See <a href="https://github.com/jpobst/Prototype.Android.MavenBindings/wiki/MavenDownloadTask-Advanced-Scenarios">Advanced MavenDownloadTask Usage</a> for more details.</p>
</blockquote>
<p>If you compile the binding now, the library will be automatically downloaded from Maven as well as the associated <code>.pom</code> file. The <code>.pom</code> file details the dependencies needed by this library, and the build errors will be generated:</p>
<pre><code>error XA0000: Maven dependency 'org.jetbrains.kotlin:kotlin-stdlib' version '1.9.21' is not satisfied. Microsoft maintains the NuGet package 'Xamarin.Kotlin.StdLib' that could fulfill this dependency.
</code></pre>
<p>To fix such an error we can add suggested NuGet packages:</p>
<pre><code>dotnet add package Xamarin.Kotlin.StdLib
</code></pre>
<p>If some bindings are not available in NuGet, we can add them manually from Maven without binding:</p>
<pre><code class="language-xml">&lt;AndroidMavenLibrary Include=&quot;org.jetbrains.kotlin:kotlin-android-extensions-runtime&quot; Version=&quot;1.6.10&quot; Bind=&quot;false&quot; /&gt;
&lt;AndroidMavenLibrary Include=&quot;com.annimon:stream&quot; Version=&quot;1.2.2&quot; Bind=&quot;false&quot; /&gt;
</code></pre>
<blockquote>
<p>Note: Not all dependencies will have official NuGet bindings. For other examples of ways to fulfill dependencies, see <a href="https://github.com/jpobst/Prototype.Android.MavenBindings/wiki/MavenDependencyVerifierTask-Advanced-Scenarios">Advanced MavenDependencyVerifierTask Scenarios</a>.</p>
</blockquote>
<p>Now if you try to compile the library the dependencies will be detected as fulfilled, and the build continues. If you get C# compile errors (like with this package) you are now back to the normal binding process. (ie: fixing with Metadata).</p>
<h2 id="conclusion">Conclusion</h2>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/50/50.png" alt=".NET MAUI CalendarView Android Material" /></p>
<p>That's it! You can now easily create Android library bindings.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/AndroidBindableLibraries/MaterialCalendarView" target="_blank">GitHub</a>.</p>
<p>Happy Bindings!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating CalendarView with .NET MAUI Handler architecture]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-CalendarView-with-.NET-MAUI-Handler-architecture</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-CalendarView-with-.NET-MAUI-Handler-architecture</guid>
      <description><![CDATA[Explore the creation of a CalendarView control in .NET MAUI using Handler architecture.]]></description>
      <content:encoded><![CDATA[<p>Merry Christmas!</p>
<p>May your holidays be filled with cheer, and your coding sessions be bug-free! In the spirit of giving and new beginnings, let’s unwrap the potential of the CalendarView in .NET MAUI's Handler architecture, a feature that reinforces just how versatile and user-friendly cross-platform development can be.</p>
<p>Before we get started, enjoy the .NET Conf 2023 - Ukraine.</p>
<p><a href="https://www.youtube.com/watch?v=sHVlg8Y6qlU"><img src="https://img.youtube.com/vi/sHVlg8Y6qlU/0.jpg" alt="YouTube Video Link" /></a></p>
<p>Curious about why .NET is the world's hottest software development platform?</p>
<p>This video from .NET Conf 2023 - Ukraine takes you on a journey through the power and potential of .NET Discover:</p>
<ul>
<li>The advantages of using .NET for your next project</li>
<li>How .NET MAUI helps build innovative applications</li>
<li>A glimpse into the exciting future of web development using Blazor</li>
<li>Microsoft Entra ID, AI, AR, and more</li>
</ul>
<p>As a result of the conference, we built a World Explorer - AI Tour Guide. Explore the globe like never before with World Explorer. Our AI-powered app gives you in-depth insights about any place worldwide, provides a comprehensive description, and recommends local attractions with your personalized travel guide. Try it at <a href="https://world-explorer.azurewebsites.net">https://world-explorer.azurewebsites.net</a></p>
<p>The materials for the conference can be found at <a href="https://github.com/VladislavAntonyuk/WorldExplorer">https://github.com/VladislavAntonyuk/WorldExplorer</a></p>
<p>Back to the CalendarView.</p>
<h2 id="introduction">Introduction</h2>
<p>Mostly all existing .NET MAUI CarouselView Nugets are based on a shared code, utilizing a variety of UI components such as Labels, Buttons, and more, all laid out using container views like Grid, StackLayout, or FlexLayout.</p>
<p>CalendarView is a classic example of a control where developers expect a rich feature set, seamless user interactions, and high performance across all platforms. In traditional Xamarin.Forms, developers often had to rely on custom renderers to bridge the gap between shared code and platform-specific customization for complex controls like calendars. However, with the advent of .NET MAUI and its Handler architecture, this process is much more streamlined and efficient.</p>
<h2 id="calendarview">CalendarView</h2>
<p>In .NET MAUI Handler architecture is a bridge between the interface and the platform control. This allows us to not depend on a specific implementation of .NET MAUI control and Platform control.
So, we need to create a new interface.</p>
<blockquote>
<p>To make the article shorter and easier reading I will include only a few properties. The full sample can be found on GitHub.</p>
</blockquote>
<pre><code class="language-csharp">public interface ICalendarView : IView
{
	DayOfWeek FirstDayOfWeek { get; }
	DateTimeOffset MinDate { get; }
	DateTimeOffset MaxDate { get; }
	DateTimeOffset? SelectedDate { get; set; }
	void OnSelectedDateChanged(DateTimeOffset? selectedDate);
}
</code></pre>
<p>And now implement the interface:</p>
<pre><code class="language-csharp">public class CalendarView : View, ICalendarView
{
	public static readonly BindableProperty FirstDayOfWeekProperty = BindableProperty.Create(nameof(FirstDayOfWeek), typeof(DayOfWeek), typeof(CalendarView), default(DayOfWeek));

	public DayOfWeek FirstDayOfWeek
	{
		get =&gt; (DayOfWeek)GetValue(FirstDayOfWeekProperty);
		set =&gt; SetValue(FirstDayOfWeekProperty, value);
	}

	...
}
</code></pre>
<p>Our control is ready, now we need to create a handler for each platform.</p>
<p>As there is a part of duplicated code in each handler let's extract it to a separate class. Create a <code>CalendarHandler</code> class:</p>
<pre><code class="language-csharp">public partial class CalendarHandler
{
	public static IPropertyMapper&lt;ICalendarView, CalendarHandler&gt; PropertyMapper = new PropertyMapper&lt;ICalendarView, CalendarHandler&gt;(ViewMapper)
	{
		[nameof(ICalendarView.FirstDayOfWeek)] = MapFirstDayOfWeek,
		[nameof(ICalendarView.MinDate)] = MapMinDate,
		[nameof(ICalendarView.MaxDate)] = MapMaxDate,
		[nameof(ICalendarView.SelectedDate)] = MapSelectedDate
	};

	public static CommandMapper&lt;ICalendarView, CalendarHandler&gt; CommandMapper = new(ViewCommandMapper);

	public CalendarHandler(IPropertyMapper mapper, CommandMapper? commandMapper = null) : base(mapper, commandMapper)
	{
	}

	public CalendarHandler() : this(PropertyMapper, CommandMapper)
	{
	}
}
</code></pre>
<p>Now we are ready for creating a platform-specific code. For each platfrom we need to create a PlatfromView and implement <code>Map*</code> methods.</p>
<h2 id="iosmaccatalyst-handler">iOS/MacCatalyst handler</h2>
<p>Create a <code>CalendarHandler</code> class in <code>Platforms\iOS</code> and <code>Platforms\MacCatalyst</code> with the next content:</p>
<pre><code class="language-csharp">public partial class CalendarHandler : ViewHandler&lt;ICalendarView, UICalendarView&gt;
{
	protected override UICalendarView CreatePlatformView()
	{
		return new UICalendarView();
	}

	private static void MapFirstDayOfWeek(CalendarHandler handler, ICalendarView virtualView)
	{
		handler.PlatformView.Calendar.FirstWeekDay = (nuint)virtualView.FirstDayOfWeek;
	}

	...
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/49/maccatalyst.png" alt=".NET MAUI CalendarView MacCatalyst" /></p>
<h2 id="windows-handler">Windows handler</h2>
<p>Create a <code>CalendarHandler</code> class in <code>Platforms\Windows</code> with the next content:</p>
<pre><code class="language-csharp">using Calendar = Microsoft.UI.Xaml.Controls.CalendarView;

public partial class CalendarHandler : ViewHandler&lt;ICalendarView, Calendar&gt;
{
	protected override Calendar CreatePlatformView()
	{
		return new Calendar();
	}

	private static void MapFirstDayOfWeek(CalendarHandler handler, ICalendarView virtualView)
	{
		handler.PlatformView.FirstDayOfWeek = (DayOfWeek)virtualView.FirstDayOfWeek;
	}

	...
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/49/windows.png" alt=".NET MAUI CalendarView Windows" /></p>
<h2 id="android-handler">Android handler</h2>
<p>Android implementation uses old good <code>Android.Widget.CalendarView</code>. It is not a material design control. It also lacks features like selecting a range of dates. In the next article, I will show you how to easily use the Java library in .NET MAUI Android. But for now, create a <code>CalendarHandler</code> class in <code>Platforms\Android</code> with the next content:</p>
<pre><code class="language-csharp">using Calendar = Android.Widget.CalendarView;

public partial class CalendarHandler : ViewHandler&lt;ICalendarView, Calendar&gt;
{
	protected override Calendar CreatePlatformView()
	{
		return new Calendar(Context);
	}

	private static void MapFirstDayOfWeek(CalendarHandler handler, ICalendarView virtualView)
	{
		handler.PlatformView.FirstDayOfWeek = (int)virtualView.FirstDayOfWeek;
	}

	...
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/49/android.png" alt=".NET MAUI CalendarView Android" /></p>
<h2 id="final-step">Final step</h2>
<p>The final step is registering our handlers using <code>ConfigureMauiHandlers</code> method:</p>
<pre><code class="language-csharp">public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder.UseMauiApp&lt;App&gt;();
		builder.ConfigureMauiHandlers(handlers =&gt;
		{
			handlers.AddHandler&lt;CalendarView, CalendarViewHandler&gt;();
		});

		return builder.Build();
	}
}
</code></pre>
<p>That's all we need to create a .NET MAUI CalendarView.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiBells" target="_blank">GitHub</a>.</p>
<p>Happy holidays!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Mastering Composite Controls in .NET MAUI. Building a TabView from Scratch]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Mastering-Composite-Controls-in-.NET-MAUI.-Building-a-TabView-from-Scratch</link>
      <pubDate>Thu, 30 Nov 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Mastering-Composite-Controls-in-.NET-MAUI.-Building-a-TabView-from-Scratch</guid>
      <description><![CDATA[Explore the creation of a custom TabView control in .NET MAUI using multiple methods like composing IndicatorView and CarouselView or ContentView with RadioButtons.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>.NET 8 has been released! This new great release brings a ton of improvements and features to the .NET MAUI!</p>
<p>Today we'll talk about A Thousand and One <del>Nights</del> ways of creating complex controls using simple out-of-the-box .NET MAUI controls.</p>
<h2 id="introduction">Introduction</h2>
<p>Composite controls are an essential aspect of user interface development, allowing developers to create complex and reusable components by combining simpler existing ones. In .NET MAUI, developers can tailor UI components to their specific needs by harnessing the flexibility of the framework's control set. Although .NET MAUI doesn't provide a pre-built TabView control, it's entirely possible to construct one using various approaches. In this article, we will take a look at TabView control creation using .NET MAUI control composition.</p>
<p>To represent the tab, let's create a small class:</p>
<pre><code class="language-csharp">public partial class Tab : View
{
	[AutoBindable]
	private ImageSource? icon;

	[AutoBindable]
	private string title = string.Empty;

	[AutoBindable(DefaultValue = &quot;new ContentView()&quot;)]
	private IView content = new ContentView();
}
</code></pre>
<p>Each tab has an icon, title, and content.</p>
<p>Let's create a collection of tabs in our ViewModel:</p>
<pre><code class="language-csharp">public partial class MainViewModel : ObservableObject
{
	[ObservableProperty]
	private Tab selectedTab;

	public ObservableCollection&lt;Tab&gt; Tabs { get; set; } = new();

	public MainViewModel()
	{
		Tabs.Add(new Tab()
		{
			Title = &quot;Tab1&quot;,
			Content = new Label() { Text = &quot;Cat&quot; },
			Icon = &quot;cat.png&quot;
		});
		Tabs.Add(new Tab()
		{
			Title = &quot;Tab2&quot;,
			Content = new Label() { Text = &quot;Dog&quot; },
			Icon = &quot;dog.png&quot;
		});
    }
}
</code></pre>
<h2 id="approach-1-indicatorview-and-carouselview">Approach 1: IndicatorView and CarouselView</h2>
<p>The combination of an <code>IndicatorView</code> and <code>CarouselView</code> is the closest to a native tabbed interface in .NET MAUI. The <code>CarouselView</code> enables users to swipe through content, while the <code>IndicatorView</code> visually represents the current page position.</p>
<p>To create the <code>TabView</code>, you place the <code>IndicatorView</code> above or below the <code>CarouselView</code>. Bind the <code>ItemsSource</code> of <code>CarouselView</code> to the Tabs collection and <code>IndicatorView</code> to the <code>IndicatorView</code>. This method provides a sleek, swipeable tab interface, ideal for image galleries or onboarding screens. Thanks to <code>IndicatorView</code> reference, <code>Position</code> automatically synchronizes between two controls.</p>
<p>The default <code>IndicatorView</code> template is just a circle, but we can easily change it using <code>IndicatorTemplate</code>.</p>
<pre><code class="language-xml">&lt;ContentPage.Resources&gt;
    &lt;DataTemplate x:Key=&quot;IndicatorDataTemplate&quot;&gt;
        &lt;VerticalStackLayout&gt;
            &lt;Image Source=&quot;{Binding Icon}&quot;
                    WidthRequest=&quot;30&quot;
                    HeightRequest=&quot;30&quot;
                    HorizontalOptions=&quot;Center&quot;/&gt;
            &lt;Label Text=&quot;{Binding Title}&quot;  FontSize=&quot;12&quot;
                    HorizontalOptions=&quot;Center&quot;/&gt;
        &lt;/VerticalStackLayout&gt;
    &lt;/DataTemplate&gt;
&lt;/ContentPage.Resources&gt;

&lt;IndicatorView x:Name=&quot;Indicator&quot;
        HorizontalOptions=&quot;Center&quot;
        SelectedIndicatorColor=&quot;LightBlue&quot;
        IndicatorTemplate=&quot;{StaticResource IndicatorDataTemplate}&quot;/&gt;

&lt;CarouselView ItemsSource=&quot;{Binding Tabs}&quot;
                IndicatorView=&quot;{x:Reference Indicator}&quot;
                HorizontalScrollBarVisibility=&quot;Never&quot;
                Loop=&quot;False&quot;
                Position=&quot;0&quot;&gt;
    &lt;CarouselView.ItemTemplate&gt;
        &lt;DataTemplate x:DataType=&quot;mauiTabView:Tab&quot;&gt;
            &lt;ContentView Content=&quot;{Binding Content}&quot;/&gt;
        &lt;/DataTemplate&gt;
    &lt;/CarouselView.ItemTemplate&gt;
&lt;/CarouselView&gt;
</code></pre>
<h2 id="approach-2-contentview-and-radiobutton">Approach 2: ContentView and RadioButton</h2>
<p>Another way to create a <code>TabView</code> is by using a <code>ContentView</code> to host the tab content and a series of <code>RadioButton</code> controls to serve as the tab headers.</p>
<p>This approach also uses Binding to the <code>RadioButtonGroup.SelectedValue</code>. When a <code>RadioButton</code> is checked, the content of the <code>ContentView</code> switches to the corresponding view.</p>
<p>With this approach, we cannot swipe between tabs but still have a great user experience on all platforms.</p>
<pre><code class="language-xml">&lt;ContentPage.Resources&gt;
    &lt;ControlTemplate x:Key=&quot;TabControlTemplate&quot;&gt;
        &lt;VerticalStackLayout BindingContext=&quot;{Binding Source={RelativeSource TemplatedParent}}&quot;&gt;
            &lt;Image Source=&quot;{Binding Value.Icon}&quot;
                    WidthRequest=&quot;30&quot;
                    HeightRequest=&quot;30&quot;
                    HorizontalOptions=&quot;Center&quot;/&gt;
            &lt;Label Text=&quot;{Binding Value.Title}&quot;  FontSize=&quot;12&quot;
                    HorizontalOptions=&quot;Center&quot;/&gt;
        &lt;/VerticalStackLayout&gt;
    &lt;/ControlTemplate&gt;
&lt;/ContentPage.Resources&gt;


&lt;ScrollView Orientation=&quot;Horizontal&quot;
            HorizontalOptions=&quot;Center&quot;&gt;
    &lt;HorizontalStackLayout RadioButtonGroup.GroupName=&quot;tabs&quot;
                            BindableLayout.ItemsSource=&quot;{Binding Tabs2}&quot;
                            RadioButtonGroup.SelectedValue=&quot;{Binding SelectedTab}&quot;&gt;
        &lt;BindableLayout.ItemTemplate&gt;
            &lt;DataTemplate x:DataType=&quot;Tab&quot;&gt;
                &lt;RadioButton Value=&quot;{Binding }&quot;
                                ControlTemplate=&quot;{StaticResource TabControlTemplate}&quot;&gt;
                &lt;/RadioButton&gt;
            &lt;/DataTemplate&gt;
        &lt;/BindableLayout.ItemTemplate&gt;
    &lt;/HorizontalStackLayout&gt;
&lt;/ScrollView&gt;

&lt;ContentView Content=&quot;{Binding SelectedTab.Content}&quot;/&gt;
</code></pre>
<h2 id="approach-3-verticalstacklayout-and-horizontalstacklayout">Approach 3: VerticalStackLayout and HorizontalStackLayout</h2>
<p>For a fully customizable yet potentially more labor-intensive implementation, consider using a <code>VerticalStackLayout</code> for the container and <code>HorizontalStackLayout</code> for tab headers.</p>
<p>This method is more complex because it requires calculating and animating the scroll position when tabs are clicked, but it gives you maximum control over the UI and behavior of your tabs.</p>
<pre><code class="language-csharp">public partial class TabView : VerticalStackLayout
{
	[AutoBindable(DefaultValue = &quot;new System.Collections.ObjectModel.ObservableCollection&lt;Tab&gt;()&quot;, OnChanged = &quot;OnTabsChanged&quot;)]
	private ObservableCollection&lt;Tab&gt; tabs = new();

	[AutoBindable(DefaultValue = &quot;-1&quot;, OnChanged = &quot;OnActiveTabIndexChanged&quot;)]
	private int activeTabIndex;

	void OnTabsChanged()
	{
		Children.Clear();
		Children.Add(BuildTabs());
		OnActiveTabIndexChanged();
		ActiveTabIndex = Tabs.Count &gt; 0 ? 0 : -1;
	}

	public TabView()
	{
		Loaded += TabView_Loaded;
	}

	private void TabView_Loaded(object? sender, EventArgs e)
	{
		OnTabsChanged();
	}

	void OnActiveTabIndexChanged()
	{
		var activeTab = GetActiveTab();
		if (activeTab is null)
		{
			return;
		}

		if (Children.Count == 1)
		{
			Children.Add(activeTab);
		}
		else
		{
			Children[1] = activeTab;
		}
	}

	IView BuildTabs()
	{
		var view = new HorizontalStackLayout()
		{
			HorizontalOptions = LayoutOptions.Center,
			Spacing = 10
		};
		for (var index = 0; index &lt; Tabs.Count; index++)
		{
			var tab = Tabs[index];
			var index1 = index;
			var tabHeader = new VerticalStackLayout()
			{
				GestureRecognizers =
				{
					new TapGestureRecognizer()
					{
						Command = new Command((() =&gt; ActiveTabIndex = index1))
					}
				}
			};
			tabHeader.Children.Add(new Image() { Source = tab.Icon, HorizontalOptions = LayoutOptions.Center, WidthRequest = 30, HeightRequest = 30 });
			tabHeader.Children.Add(new Label() { Text = tab.Title, HorizontalOptions = LayoutOptions.Center });
			view.Children.Add(tabHeader);
		}

		return view;
	}

	IView? GetActiveTab()
	{
		if (Tabs.Count &lt; ActiveTabIndex || ActiveTabIndex &lt; 0)
		{
			return null;
		}

		var activeTab = Tabs[ActiveTabIndex];
		return activeTab.Content;
	}
}
</code></pre>
<p>This is how you can build <code>TabView</code> in <code>XAML</code>:</p>
<pre><code class="language-xml">&lt;mauiTabView:TabView&gt;
    &lt;mauiTabView:TabView.Tabs&gt;
        &lt;mauiTabView:Tab Title=&quot;Tab1&quot; Icon=&quot;cat.png&quot;&gt;
            &lt;mauiTabView:Tab.Content&gt;
                &lt;Label Text=&quot;Cat&quot;/&gt;
            &lt;/mauiTabView:Tab.Content&gt;
        &lt;/mauiTabView:Tab&gt;
        &lt;mauiTabView:Tab Title=&quot;Tab2&quot; Icon=&quot;dog.png&quot;&gt;
            &lt;mauiTabView:Tab.Content&gt;
                &lt;Label Text=&quot;Dog&quot;/&gt;
            &lt;/mauiTabView:Tab.Content&gt;
        &lt;/mauiTabView:Tab&gt;
    &lt;/mauiTabView:TabView.Tabs&gt;
&lt;/mauiTabView:TabView&gt;
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>While .NET MAUI doesn't include a <code>TabView</code> control out of the box, the framework's modular architecture empowers developers to construct it using existing controls like <code>IndicatorView</code> and <code>CarouselView</code>, <code>ContentView</code> and <code>RadioButton</code>, or even just <code>StackLayouts</code>. Each approach offers different trade-offs in terms of complexity, control, and appearance, allowing developers to pick the one that best fits their project's requirements. By mastering these techniques, developers can deliver compelling and customized user experiences on any platform supported by .NET MAUI.</p>
<p>This is how <code>TabView</code> looks on <code>Android</code>:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/48/48.png" alt=".NET MAUI TabView" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiTabView" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Microsoft Identity Platform Authentication in Blazor Web Application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Microsoft-Identity-Platform-Authentication-in-Blazor-Web-Application</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Microsoft-Identity-Platform-Authentication-in-Blazor-Web-Application</guid>
      <description><![CDATA[Adding Microsoft Entra ID B2C in .NET 8 Blazor WebApp.]]></description>
      <content:encoded><![CDATA[<p>Hello! 👋</p>
<p>It's less then a month left before the .NET 8 release. It's a great time to start exploring new features and improvements. One of them is a new Blazor Web App.</p>
<p>Blazor Web Apps provide a component-based architecture with server-side rendering and full client-side interactivity in a single solution, where you can switch between server-side and client-side rendering modes and even mix them in the same page.</p>
<p>The latest .NET 8 RC2 release brings Individual account authentication, but it's not enough for a real-world application. In this article, we will explore how to integrate Microsoft Identity Platform Authentication into a Blazor Web App.</p>
<p>The use of Microsoft's Identity greatly enhances user authentication and authorization in web apps. This article outlines the steps required to integrate Microsoft Entra ID (formerly Azure Active Directory) into a Blazor web application.</p>
<h2 id="precondition">Precondition</h2>
<p>If you don't have an Azure Active Directory, watch this video on how to set it up:</p>
<p><a href="https://www.youtube.com/watch?v=3RGX5mVRXSs"><img src="https://img.youtube.com/vi/3RGX5mVRXSs/0.jpg" alt="Azure Active Directory authentication in .NET MAUI" /></a></p>
<p>And Azure Active Directory (B2C):</p>
<p><a href="https://www.youtube.com/watch?v=sTPWF2O456U"><img src="https://img.youtube.com/vi/sTPWF2O456U/0.jpg" alt="Azure Active Directory B2C authentication in .NET MAUI" /></a></p>
<h2 id="step-1-install-the-required-package">Step 1: Install the Required Package</h2>
<p>Start by installing the necessary NuGet package, &lsquo;Microsoft.Identity.Web.UI&rsquo;. You can do this by adding the following line to your project file:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.Identity.Web.UI&quot; Version=&quot;2.15.1&quot; /&gt;
</code></pre>
<h2 id="step-2-update-the-configuration-file">Step 2: Update the Configuration File</h2>
<p>Next, add the following block of configuration to your <code>appsettings.json</code> file, replacing placeholders (enclosed in &quot;&quot;) with info from your Azure AD B2C tenant:</p>
<pre><code class="language-json">&quot;AzureAdB2C&quot;: {
    &quot;Instance&quot;: &quot;https://{YOUR_APP_NAME}.b2clogin.com&quot;,
    &quot;TenantId&quot;: &quot;{YOUR_TENANT_ID}&quot;,
    &quot;ClientId&quot;: &quot;{YOUR_CLIENT_ID}&quot;,
    &quot;CallbackPath&quot;: &quot;/signin-oidc&quot;,
    &quot;Domain&quot;: &quot;{YOUR_APP_NAME}.onmicrosoft.com&quot;,
    &quot;SignedOutCallbackPath&quot;: &quot;/signout&quot;,
    &quot;SignUpSignInPolicyId&quot;: &quot;B2C_1_SIGNUP_SIGNIN&quot;,
    &quot;ClientSecret&quot;: &quot;{YOUR_AAD_B2C_CLIENT_SECRET}&quot;,
    &quot;AllowWebApiToBeAuthorizedByACL&quot;: true
}
</code></pre>
<h2 id="step-3-add-authentication-services">Step 3: Add Authentication Services</h2>
<p>In the <code>Program.cs</code> file, utilize the built-in configuration binding to bind AzureAdB2C configuration to the Microsoft Identity options and register the necessary services related to Microsoft Identity, as shown below:</p>
<pre><code class="language-csharp">builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)
				.AddMicrosoftIdentityWebApp(options =&gt;
				{
					builder.Configuration.Bind(&quot;AzureAdB2C&quot;, options);
					// TODO - remove this line when token validation issue is fixed.
					options.TokenValidationParameters.ValidateIssuer = false;
				});
builder.Services.AddControllersWithViews().AddMicrosoftIdentityUI();
builder.Services.AddCascadingAuthenticationState();
</code></pre>
<p><strong>Currently, we need to disable issuer validation. Otherwise authentication fails.</strong></p>
<h2 id="step-4-configure-the-middleware">Step 4: Configure the Middleware</h2>
<p>Next, register <code>MapControllers</code> middleware, as shown:</p>
<pre><code class="language-csharp">app.MapControllers();
app.MapRazorComponents&lt;App&gt;().AddInteractiveServerRenderMode();
</code></pre>
<h2 id="step-5-create-an-authentication-page">Step 5: Create an Authentication Page</h2>
<p>Finally, set up an authentication page to handle signing in and signing out. Here's a sample page (<code>Auth.razor</code>):</p>
<pre><code class="language-razor">@page &quot;/auth&quot;
&lt;PageTitle&gt;Auth&lt;/PageTitle&gt;

&lt;AuthorizeView&gt;
	&lt;Authorized&gt;
		&lt;p&gt;User name: @user?.Identity?.Name&lt;/p&gt;
		&lt;button @onclick=&quot;SignOut&quot;&gt;Sign out&lt;/button&gt;
	&lt;/Authorized&gt;
	&lt;NotAuthorized&gt;
		&lt;button @onclick=&quot;SignIn&quot;&gt;Sign in&lt;/button&gt;
	&lt;/NotAuthorized&gt;
&lt;/AuthorizeView&gt;

@code {
    private ClaimsPrincipal? user;

    [CascadingParameter]
    public required Task&lt;AuthenticationState&gt; AuthenticationState { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    private void SignOut()
    {
        NavigationManager.NavigateTo(&quot;MicrosoftIdentity/Account/SignOut&quot;, true);
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo(&quot;MicrosoftIdentity/Account/SignIn&quot;, true);
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        user = authenticationState.User;
    }
}
</code></pre>
<p>This setup delivers a functional authentication page where users can effectively sign in or sign out.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There is an open issue on GitHub related to the missed Microsoft Identity Platform auth option in the Blazor Web App template. You can track it <a href="https://github.com/dotnet/aspnetcore/issues/51202" target="_blank">here</a>. It's planned to be solved in the .NET 9 release.</p>
<p>To simplify the steps, I created a template that you can use to create a new Blazor Web App with Microsoft Identity Platform Authentication. You can find it <a href="https://github.com/VladislavAntonyuk/.NET-Templates?tab=readme-ov-file#blazor-webapp-microsoft-identity-platform" target="_blank">here</a>.</p>
<p>Happy Hacktoberfest!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Adding Application Insights to .NET MAUI Application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Adding-Application-Insights-to-.NET-MAUI-Application</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Adding-Application-Insights-to-.NET-MAUI-Application</guid>
      <description><![CDATA[This article provides an in-depth exploration into how you can integrate Microsoft's Application Insights into your .NET MAUI application. A comparative study between Microsoft AppCenter and Application Insights is also highlighted, demystifying the inherent advantage of Application Insights in application management and analytics.]]></description>
      <content:encoded><![CDATA[<p>Hello and warm greetings to the ever-evolving fraternity of developers.</p>
<p>The purpose of this article is to showcase the benefits of Application Insights over AppCenter, and guide you on how to integrate Application Insights into your .NET MAUI applications. But before getting started, let's discuss why do we need analyze our application.</p>
<p>.NET MAUI streamlines the development workflow, but it also fundamentally requires robust analytics to aid developers in understanding users’ interactions, diagnosing issues quickly, and continuously improving the application. And Microsoft's Application Insights can help you with that.</p>
<h2 id="why-consider-application-insights-over-appcenter">Why Consider Application Insights over AppCenter?</h2>
<p>AppCenter, Microsoft's solution for managing and monitoring applications, has long been the default choice for developers using Xamarin and is expected to be the same for .NET MAUI. However, Application Insights holds an arguably superior edge with a wide range of features, including advanced application analytics, user interaction tracking, performance monitoring, and more.</p>
<h2 id="integrating-application-insights-with.net-maui">Integrating Application Insights with .NET MAUI</h2>
<p>Adding Application Insights to your .NET MAUI application doesn't require an extensive process. Follow the steps below:</p>
<h3 id="setting-up-on-azure-portal">1. Setting Up on Azure Portal</h3>
<p>Before implementing Application Insights in your application, create an Application Insights resource in the Azure portal.</p>
<ul>
<li>Navigate to the Azure portal and create a new resource.</li>
<li>From the &lsquo;New&rsquo; window, search for &ldquo;Application Insights&rdquo;, select it and press &ldquo;Create&rdquo;.</li>
<li>Enter your desired details and press &ldquo;Review + Create&rdquo;, then &ldquo;Create&rdquo; again.</li>
</ul>
<p>This new resource will generate a Connection string, which is essential when setting up Application Insights in your .NET MAUI app.</p>
<h3 id="install-the-applicationinsights-sdk">2. Install the ApplicationInsights SDK</h3>
<p>The next step would be installing the ApplicationInsights SDK in your .NET MAUI solution. Open the Nuget Package Manager and look for &lsquo;Microsoft.Extensions.Logging.ApplicationInsights&rsquo;. Install this package into your solution.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.Extensions.Logging.ApplicationInsights&quot; Version=&quot;2.22.0-beta3&quot; /&gt;
</code></pre>
<h3 id="initialize-application-insights">3. Initialize Application Insights</h3>
<p>Initialize this client in your app, using the Connection string obtained from the Azure portal.</p>
<p>Initial setup could look like this:</p>
<pre><code class="language-csharp">builder.Logging.AddApplicationInsights(configuration =&gt;
{
    configuration.TelemetryInitializers.Add(new ApplicationInitializer());
    configuration.ConnectionString = &quot;YOUR-CONNECTION-STRING;
}, options =&gt;
{
    options.IncludeScopes = true;
});
</code></pre>
<h3 id="include-additional-properties">4. Include additional properties</h3>
<p>To track session of specific user, you can include additional information in logs. To do that implement <code>ITelemetryInitializer</code>:</p>
<pre><code class="language-csharp">public class ApplicationInitializer : ITelemetryInitializer
{
	public string SessionId { get; } = Guid.NewGuid().ToString();
	public string? DeviceOperationSystem { get; } = DeviceInfo.Current.Platform.ToString();
	public string DeviceOemName { get; } = DeviceInfo.Current.Manufacturer;
	public string DeviceModel { get; } = DeviceInfo.Current.Model;
	public string ComponentVersion { get; } = AppInfo.Current.VersionString;

	public void Initialize(ITelemetry telemetry)
	{
		telemetry.Context.Session.Id = SessionId;
		telemetry.Context.Device.OperatingSystem = DeviceOperationSystem;
		telemetry.Context.Device.OemName = DeviceOemName;
		telemetry.Context.Device.Model = DeviceModel;
		telemetry.Context.Component.Version = ComponentVersion;
	}
}
</code></pre>
<h3 id="track-events-exceptions-and-dependencies">5. Track Events, Exceptions and Dependencies</h3>
<p>Now, with Application Insights initialized, one can easily track events, exceptions and dependencies.</p>
<p>An example of how to track an event:</p>
<pre><code class="language-csharp">private readonly ILogger&lt;MyService&gt; logger;

public MyService(ILogger&lt;MyService&gt; logger)
{
    this.logger = logger;
}

public void MyAction(string parameter)
{
    logger.LogInformation(&quot;My action executed with parameter: {Parameter}&quot;, parameter);
}
</code></pre>
<p>To track an exception:</p>
<pre><code class="language-csharp">try
{
    ...
}
catch (Exception ex)
{
    logger.LogError(ex, &quot;Something went wrong&quot;);
}
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>As we ponder over the ongoing debate between Application Insights and AppCenter, the focus is to find a tool, not only suitable for analytics and diagnosing issues, but also one that provides seamless integration with the development process. Application Insights' flexibility and adaptability could very well make it a preferred choice for developers with .NET MAUI applications.</p>
<p>It provides powerful insights and monitoring in near real-time, pushing it ahead in the race. Providing quick access to rich analytics, Application Insights is a tool acting as an &lsquo;AppCenter Killer&rsquo;. It's a brave, new world for .NET MAUI apps, where Application Insights is the analytics option worth considering!</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/46/appinsights.png" alt="Application insights" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiApplicationInsights" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[.NET MAUI Push Notifications using Azure Notification Hub. Part 2. Setup .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-2.-Setup-.NET-MAUI</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-2.-Setup-.NET-MAUI</guid>
      <description><![CDATA[The article demonstrates how to add push notifications to .NET MAUI application using Azure Notification Hub.]]></description>
      <content:encoded><![CDATA[<p>Hello again,</p>
<p>In the previous article, you learned about the importance of push notifications and how to set up the Azure Notification Hub together with Windows Notification Service (WNS) and Firebase Cloud Messaging (FCM). Are you ready to take the next step? Good! Because now we're going to dive into the fantastic world of .NET MAUI and see how you can use this cross-platform framework to configure your application for receiving these push notifications. By the end, you'll be able to create an application that can accept and action on these messages, providing your users with timely updates and proactive communication. Let's dive straight in!</p>
<blockquote>
<p>I don't have an Apple Developer account to describe how to set up Apple Push Notification Service (APNS) for iOS. But you can follow this guide, provided by <a href="https://github.com/erossini">Enrico Rossini</a>: <a href="https://puresourcecode.com/dotnet/maui/maui-push-notifications-using-azure-notification-hub-for-ios/">MAUI Push Notifications using Azure Notification Hub for iOS</a></p>
</blockquote>
<h2 id="setting-up-your.net-maui-project">Setting up your .NET MAUI Project</h2>
<h3 id="android">Android</h3>
<h4 id="step-1-add-google-services.json">Step 1: Add <code>google-services.json</code></h4>
<p>Open Firebase Console and select Add Firebase to your Android app.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/45/45-1.png" alt="Android Firebase registration" /></p>
<p>On the Add Firebase to your Android app page, enter an Android package name. It should match the package name of your .NET MAUI application.</p>
<p>Select Register app.</p>
<p>Select Download google-services.json. Then save the file into a <code>Platforms\Android</code> folder.</p>
<h4 id="step-2-add-required-packages">Step 2: Add Required Packages</h4>
<pre><code class="language-xml">&lt;ItemGroup Condition=&quot;'$(TargetFramework)' == '$(NetVersion)-android'&quot;&gt;
    &lt;GoogleServicesJson Include=&quot;Platforms\Android\google-services.json&quot; /&gt;
    &lt;PackageReference Include=&quot;Xamarin.Firebase.Messaging&quot; Version=&quot;122.0.0&quot; /&gt;
    &lt;PackageReference Include=&quot;Xamarin.Google.Dagger&quot; Version=&quot;2.39.1&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<h4 id="step-3-add-permissions">Step 3: Add permissions</h4>
<p>Update AndroidManifest.xml:</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;com.google.android.c2dm.permission.RECEIVE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.GET_ACCOUNTS&quot; /&gt;
</code></pre>
<h4 id="step-4-update-mainactivity.cs">Step 4: Update MainActivity.cs</h4>
<p>Remember the connection strings from the Azure Notification Hub setup? You'll need them now.</p>
<p>Search for <code>DefaultListenSharedAccessSignature</code> access policy and copy <code>SharedAccessKey</code>.</p>
<pre><code class="language-csharp">protected override async void OnCreate(Bundle? savedInstanceState)
{
    base.OnCreate(savedInstanceState);
    await DeviceInstallationService.RegisterDevice(&quot;YOUR HUB NAME&quot;, &quot;YOUR SharedAccessKey&quot;);
}
</code></pre>
<blockquote>
<p>Don't use <code>DefaultFullSharedAccessSignature</code> in client applications!</p>
</blockquote>
<h4 id="step-5-create-deviceinstallationservice.cs">Step 5: Create DeviceInstallationService.cs</h4>
<p>Azure Hotification Hub requires device registration, so it knows what device should receive a notification.</p>
<pre><code class="language-csharp">public static class DeviceInstallationService
{
	private static bool NotificationsSupported
		=&gt; GoogleApiAvailability.Instance.IsGooglePlayServicesAvailable(Application.Context) == ConnectionResult.Success;

	private static string? GetDeviceId()
		=&gt; Settings.Secure.GetString(Application.Context.ContentResolver, Settings.Secure.AndroidId);

	public static async Task RegisterDevice(string notificationHub, string key)
	{
		if (!NotificationsSupported)
		{
			return;
		}

		var firebaseToken = await FirebaseMessaging.Instance.GetToken();
		var deviceInstallation = new
		{
			InstallationId = GetDeviceId(),
			Platform = &quot;gcm&quot;,
			PushChannel = firebaseToken.ToString()
		};
		using var httpClient = new HttpClient();
		httpClient.DefaultRequestHeaders.Add(&quot;x-ms-version&quot;, &quot;2015-01&quot;);
		httpClient.DefaultRequestHeaders.TryAddWithoutValidation(&quot;Authorization&quot;,
														   CreateToken($&quot;https://{notificationHub}.servicebus.windows.net&quot;,
																	   &quot;DefaultListenSharedAccessSignature&quot;,
																	   key));
		await httpClient.PutAsJsonAsync($&quot;https://{notificationHub}.servicebus.windows.net/{notificationHub}/installations/{deviceInstallation.InstallationId}?api-version=2015-01&quot;, deviceInstallation);
	}

	private static string CreateToken(string resourceUri, string keyName, string key)
	{
		var sinceEpoch = DateTime.UtcNow - DateTime.UnixEpoch;
		var week = 60 * 60 * 24 * 7;
		var expiry = Convert.ToString((int)sinceEpoch.TotalSeconds + week);
		var stringToSign = HttpUtility.UrlEncode(resourceUri) + &quot;\n&quot; + expiry;
		using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key));
		var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));
		var sasToken = string.Format(CultureInfo.InvariantCulture,
									 &quot;SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}&quot;,
									 HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry,
									 keyName);
		return sasToken;
	}
}
</code></pre>
<p>Here we use <code>FirebaseInstanceId.Instance.Token</code> to get the token and then we send a PUT HTTP Request to register our device with <code>NotificationHub</code>. You can find more details here: <a href="https://learn.microsoft.com/en-us/previous-versions/azure/reference/mt621153(v=azure.100)">Notification Hubs REST API Methods</a>.</p>
<p>Now your device is registered.</p>
<h4 id="step-6-setting-up-the-receivers">Step 6: Setting up the Receivers</h4>
<p>The last step is to define our receiver.</p>
<p>You need to set up receivers to handle notifications pushed to your app.</p>
<p>For Android, use <code>FirebaseMessagingService</code>. Override <code>OnMessageReceived()</code> to define how the notifications should be handled:</p>
<pre><code class="language-csharp">[Service(Exported = false)]
[IntentFilter(new[] { &quot;com.google.firebase.MESSAGING_EVENT&quot; })]
public class PushNotificationFirebaseMessagingService : FirebaseMessagingService
{
	public override void OnMessageReceived(RemoteMessage p0)
	{
		base.OnMessageReceived(p0);

        var receivedNotification = p0.GetNotification();
        // implement your logic here...
	}
}
</code></pre>
<h3 id="windows">Windows</h3>
<p>Windows doesn't require any additional packages. We only need to register our device.</p>
<h4 id="step-1-registering-for-push-notifications">Step 1: Registering for Push Notifications</h4>
<p>In your <code>Platforms/Windows/App.xaml.cs</code> handle the startup logic to register for push notifications. For Windows, use <code>PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync()</code> to create a channel and register it with <code>NotificationHub</code>:</p>
<pre><code class="language-csharp">private async Task RegisterDevice(string notificationHub, string key)
	{
		var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();
		channel.PushNotificationReceived += Channel_PushNotificationReceived;
		var deviceInstallation = new
		{
			InstallationId = new EasClientDeviceInformation().Id,
			Platform = &quot;wns&quot;,
			PushChannel = channel.Uri
		};
		using var httpClient = new HttpClient();
		httpClient.DefaultRequestHeaders.Add(&quot;x-ms-version&quot;, &quot;2015-01&quot;);
		httpClient.DefaultRequestHeaders.TryAddWithoutValidation(&quot;Authorization&quot;,
																 CreateToken($&quot;https://{notificationHub}.servicebus.windows.net&quot;,
																			 &quot;DefaultListenSharedAccessSignature&quot;,
																			 key));
		await httpClient.PutAsJsonAsync($&quot;https://{notificationHub}.servicebus.windows.net/{notificationHub}/installations/{deviceInstallation.InstallationId}?api-version=2015-01&quot;, deviceInstallation);
	}

	private void Channel_PushNotificationReceived(PushNotificationChannel sender, PushNotificationReceivedEventArgs args)
	{
        var notification = args.RawNotification;
		// implement your logic here...
	}

	protected override async void OnLaunched(LaunchActivatedEventArgs args)
	{
		base.OnLaunched(args);
		await RegisterDevice(&quot;YOUR HUB NAME&quot;, &quot;YOUR SharedAccessKey&quot;);
	}

	private static string CreateToken(string resourceUri, string keyName, string key)
	{
		var sinceEpoch = DateTime.UtcNow - DateTime.UnixEpoch;
		var week = 60 * 60 * 24 * 7;
		var expiry = Convert.ToString((int)sinceEpoch.TotalSeconds + week);
		var stringToSign = HttpUtility.UrlEncode(resourceUri) + &quot;\n&quot; + expiry;
		using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key));
		var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));
		var sasToken = string.Format(CultureInfo.InvariantCulture,
									 &quot;SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}&quot;,
									 HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry,
									 keyName);
		return sasToken;
	}
</code></pre>
<h2 id="sending-push-notifications">Sending Push Notifications</h2>
<p>You can send push notifications directly from Azure portal:</p>
<ol>
<li>Go to your Notification Hub in Azure portal.</li>
<li>Choose &lsquo;Test Send&rsquo; under &lsquo;Support + troubleshooting&rsquo;.</li>
<li>Select your platform and write your notification.</li>
<li>Click on &lsquo;Send&rsquo;.</li>
</ol>
<p>You've now successfully implemented push notifications in your .NET MAUI application using Azure Notification Hubs, FCM, and WNS. Test it out and see how it greatly enhances the interactivity of your cross-platform app.</p>
<p>Don't miss <a href="./articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-1.-Setup-Azure-Notification-Hub">the first part of this article series</a> if you haven't got your Azure Notification Hubs, Windows Notification Service (WNS), and Firebase Cloud Messaging (FCM) setup yet.</p>
<p><a href="https://github.com/VladislavAntonyuk/WorldExplorer/commit/8ce130a77e1ad29c70c237074b23f5971324eae4">Click here for the GitHub repository</a> with the full code for this .NET MAUI push notifications implementation.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[.NET MAUI Push Notifications using Azure Notification Hub. Part 1. Setup Azure Notification Hub]]></title>
      <link>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-1.-Setup-Azure-Notification-Hub</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-1.-Setup-Azure-Notification-Hub</guid>
      <description><![CDATA[The article demonstrates how to add push notifications to .NET MAUI application using Azure Notification Hub.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>Do you recall the last alert you got on your mobile device while using your favorite apps? Yes, those little messages that pop-up on the screen are known as push notifications. Just like you, millions of users globally receive push notifications every day.</p>
<p>Push notifications are an essential tool for modern applications to engage and retain users. They enable immediate communication with the user, provide them with timely updates, nudge their interaction, and considerably elevate the responsiveness of an application, enriching the user experience and generating enhanced business value.</p>
<p>Azure Notification Hubs provide a highly scalable, cross-platform push notification infrastructure that enables you to either broadcast push notifications to millions of users at once or tailor notifications to individual users.</p>
<p>You can use Azure Notification Hubs to push notifications to mobile devices as well as to desktops. This is the first part of the article series on how to set up push notifications in .NET MAUI using Azure Notification Hubs. In this part, you will learn how to set up Azure Notification Hubs along with Windows Notification Service (WNS) and Firebase Cloud Messaging (FCM) for Android.</p>
<blockquote>
<p>I don't have an Apple Developer account to describe how to set up Apple Push Notification Service (APNS) for iOS. But you can follow this guide, provided by <a href="https://github.com/erossini">Enrico Rossini</a>: <a href="https://puresourcecode.com/dotnet/maui/maui-push-notifications-using-azure-notification-hub-for-ios/">MAUI Push Notifications using Azure Notification Hub for iOS</a></p>
</blockquote>
<h3 id="setting-up-azure-notification-hubs">Setting up Azure Notification Hubs</h3>
<h4 id="step-1-creation-of-the-notification-hub">Step 1: Creation of the Notification Hub</h4>
<p>Start by creating a new Azure Notification Hub in the Azure portal:</p>
<ol>
<li>Navigate to the <a href="https://portal.azure.com" target="_blank">Azure portal</a>.</li>
<li>Click on &lsquo;Create a resource&rsquo;.</li>
<li>In the search box, type &lsquo;Notification Hub&rsquo; and click on it.</li>
<li>Enter all the necessary details and click &lsquo;Create&rsquo;.</li>
</ol>
<h4 id="step-2-configuring-the-notification-hub">Step 2: Configuring the Notification Hub</h4>
<p>After creation, configure your newly created Notification Hub:</p>
<ol>
<li>Go to your Notification Hub and under the &lsquo;Settings&rsquo; section, select &lsquo;Access Policies&rsquo;.</li>
<li>Note down the two connection strings provided.</li>
<li>You'll need these strings when configuring your .NET MAUI project later.</li>
</ol>
<h3 id="setting-up-windows-notification-service-wns">Setting up Windows Notification Service (WNS)</h3>
<p>WNS delivers notifications from cloud servers to Windows apps running on Windows 10 and later.</p>
<h4 id="step-1-register-your-app">Step 1: Register Your App</h4>
<ol>
<li>Go to the <a href="https://partner.microsoft.com/en-us/dashboard/home" target="_blank">Windows Dev Center's Dashboard</a>, and sign in.</li>
<li>Choose your app from the list of apps.</li>
<li>Click on &lsquo;Product identity&rsquo;.</li>
<li>Find the &lsquo;Package SID&rsquo; value. We will need it later when configuring WNS with Azure.</li>
<li>Click on &lsquo;App management&rsquo; and &lsquo;WNS/MPNS&rsquo;.</li>
<li>Click on App Registration portal. You will be redirected to Azure portal.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/44/44-1.png" alt="App Registration portal link" /></li>
<li>Click on Certificates &amp; secrets</li>
<li>Click on New client secret and create a new secret. Note down the secret value. It is you Security Key. We will need it later when configuring WNS with Azure.</li>
</ol>
<h4 id="step-2-configure-wns-with-azure">Step 2: Configure WNS with Azure</h4>
<ol>
<li>Go to the Azure portal.</li>
<li>In your Notification Hub, under &lsquo;Settings&rsquo;, select 'Windows (WNS)'.</li>
<li>Fill in the &lsquo;Package SID&rsquo; and &lsquo;Security Key&rsquo; details:
<ul>
<li>Package SID: the value you obtained in the previous step. The format is <code>ms-app://&lt;Package SID&gt;</code>.</li>
<li>Security Key: the value you obtained in the previous step.</li>
</ul>
</li>
<li>Click &lsquo;Save&rsquo;.</li>
</ol>
<h3 id="setting-up-firebase-cloud-messaging-fcm">Setting up Firebase Cloud Messaging (FCM)</h3>
<p>FCM enables you to send push notifications to Android devices.</p>
<h4 id="step-1-create-a-firebase-project">Step 1: Create a Firebase Project</h4>
<ol>
<li>Go to the <a href="https://console.firebase.google.com/" target="_blank">Firebase console</a>.</li>
<li>Click on &lsquo;Add project&rsquo;.</li>
<li>Follow the instructions and set up your project.</li>
</ol>
<h4 id="step-2-obtain-server-key">Step 2: Obtain Server Key</h4>
<ol>
<li>Navigate to &lsquo;Project settings&rsquo;.</li>
<li>Click on the &lsquo;Cloud Messaging&rsquo; tab. You will see &lsquo;Cloud Messaging API (Legacy)Disabled&rsquo; message. Click on &lsquo;Manage API in Google Cloud Console&rsquo;. You will be redirected to Google Cloud Console. Click on &lsquo;Enable&rsquo;.</li>
<li>Back to Firebase and copy your &lsquo;Server key&rsquo;.</li>
</ol>
<h4 id="step-3-configure-fcm-with-azure">Step 3: Configure FCM with Azure</h4>
<ol>
<li>Go to the Azure portal.</li>
<li>In your Notification Hub, under &lsquo;Settings&rsquo;, select 'Google (GCM/FCM)'.</li>
<li>Enter your &lsquo;Server Key&rsquo;.</li>
<li>Click &lsquo;Save&rsquo;.</li>
</ol>
<p>That's it! You now have Azure Notification Hubs integrated with both FCM and WNS.</p>
<p>As a next step, don't forget to start setting up your .NET MAUI project. You can find out how to do that in the second part of this article series. Here is the <a href="./articles/.NET-MAUI-Push-Notifications-using-Azure-Notification-Hub.-Part-2.-Setup-.NET-MAUI/">link to the second part</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Adding custom action button to .NET MAUI Shell TabBar]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Adding-custom-action-button-to-.NET-MAUI-Shell-TabBar</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Adding-custom-action-button-to-.NET-MAUI-Shell-TabBar</guid>
      <description><![CDATA[The article demonstrates how to customize .NET MAUI Shell TabBar for Android and iOS/MacCatalyst platforms, offering step-by-step guidance, code examples, and a link to the GitHub repository containing full examples for practical usage.]]></description>
      <content:encoded><![CDATA[<p>Hello from sunny July! As a good tradition, it's time for <a href="https://goforgoldman.com/posts/maui-ui-july-23/">MAUI UI July</a>. Thanks to Matt Goldman for the organization.</p>
<p>In this article, we'll continue customizing .NET MAUI Shell. This time we'll customize the TabBar by adding a central action button. Let's get started!</p>
<h2 id="shared-code">Shared Code</h2>
<p>Define a Custom TabBar with the properties for our action button:</p>
<pre><code class="language-csharp">public partial class CustomTabBar : TabBar
{
    [AutoBindable]
    private ICommand? centerViewCommand;

    [AutoBindable]
    private ImageSource? centerViewImageSource;

    [AutoBindable]
    private string? centerViewText;

    [AutoBindable]
    private bool centerViewVisible;

    [AutoBindable]
    public Color? centerViewBackgroundColor;
}
</code></pre>
<blockquote>
<p>I am using <code>M.BindableProperty.Generator</code> NuGet package to simplify the Bindable property syntax.</p>
</blockquote>
<p>We can replace .NET MAUI TabBar with our CustomTabBar:</p>
<pre><code class="language-xml">&lt;local:CustomTabBar CenterViewText=&quot;+&quot;
                    CenterViewVisible=&quot;True&quot;
                    CenterViewBackgroundColor=&quot;Red&quot;
                    CenterViewCommand=&quot;{Binding CenterViewCommand}&quot;&gt;
    &lt;!-- &lt;local:CustomTabBar.CenterViewImageSource&gt; --&gt;
    &lt;!--    &lt;FileImageSource File=&quot;dotnet_bot.png&quot;&gt;&lt;/FileImageSource&gt; --&gt;
    &lt;!-- &lt;/local:CustomTabBar.CenterViewImageSource&gt; --&gt;
    &lt;Tab Title=&quot;Tab1&quot; Icon=&quot;dotnet_bot.png&quot;&gt;
        &lt;ShellContent
            Title=&quot;Page1&quot;
            ContentTemplate=&quot;{DataTemplate local:Page1}&quot;
            Route=&quot;Page1&quot; /&gt;
    &lt;/Tab&gt;
    &lt;Tab Title=&quot;Tab2&quot; Icon=&quot;dotnet_bot.png&quot;&gt;
        &lt;ShellContent
            Title=&quot;Page2&quot;
            ContentTemplate=&quot;{DataTemplate local:Page2}&quot;
            Route=&quot;Page2&quot; /&gt;
    &lt;/Tab&gt;
&lt;/local:CustomTabBar&gt;
</code></pre>
<h2 id="customizing-tabbar-for-android">Customizing TabBar for Android</h2>
<p>To customize your .NET MAUI Shell app for Android, you can change various components of the ShellRenderer class in the <code>Platforms/Android/</code> directory of your application. Here's an example:</p>
<ol>
<li>Create a custom ShellRenderer class:</li>
</ol>
<pre><code class="language-csharp">class CustomShellHandler : ShellRenderer
{
    
    protected override IShellItemRenderer CreateShellItemRenderer(ShellItem item)
    {
        return new CustomShellItemRenderer(this);
    }
}
</code></pre>
<ol start="2">
<li>To customize <code>TabBar</code> create a new class <code>CustomShellItemRenderer</code>. It adds a rounded button if the ShellItem is out CustomTabBar. <em>You can use any control instead of button</em>:</li>
</ol>
<pre><code class="language-csharp">internal class CustomShellItemRenderer : ShellItemRenderer
{
    public CustomShellItemRenderer(IShellContext context) : base(context)
    {
    }

    public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        var view = base.OnCreateView(inflater, container, savedInstanceState);
        if (Context is not null &amp;&amp; ShellItem is CustomTabBar { CenterViewVisible: true } tabbar)
        {
            var rootLayout = new FrameLayout(Context)
            {
                LayoutParameters = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MatchParent, ViewGroup.LayoutParams.MatchParent)
            };

            rootLayout.AddView(view);
            const int middleViewSize = 150;
            var middleViewLayoutParams = new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.WrapContent, ViewGroup.LayoutParams.WrapContent,
                GravityFlags.CenterHorizontal | GravityFlags.Bottom)
            {
                BottomMargin = 100,
                Width = middleViewSize,
                Height = middleViewSize
            };
            var middleView = new Button(Context)
            {
                LayoutParameters = middleViewLayoutParams
            };
            middleView.Click += delegate
            {
                tabbar.CenterViewCommand?.Execute(null);
            };
            middleView.SetText(tabbar.CenterViewText, TextView.BufferType.Normal);
            middleView.SetPadding(0, 0, 0, 0);
            if (tabbar.CenterViewBackgroundColor is not null)
            {
                var backgroundDrawable = new GradientDrawable();
                backgroundDrawable.SetShape(ShapeType.Rectangle);
                backgroundDrawable.SetCornerRadius(middleViewSize / 2f);
                backgroundDrawable.SetColor(tabbar.CenterViewBackgroundColor.ToPlatform(Colors.Transparent));
                middleView.SetBackground(backgroundDrawable);
            }

            tabbar.CenterViewImageSource?.LoadImage(Application.Current!.MainPage!.Handler!.MauiContext!, result =&gt;
            {
                middleView.SetBackground(result?.Value);
                middleView.SetMinimumHeight(0);
                middleView.SetMinimumWidth(0);
            });

            rootLayout.AddView(middleView);
            return rootLayout;
        }

        return view;
    }
}
</code></pre>
<h2 id="customizing.net-maui-shell-for-iosmaccatalyst">Customizing .NET MAUI Shell for iOS/MacCatalyst</h2>
<p>Similar to customizing Android, you can make customizations for iOS and MacCatalyst by modifying the ShellRenderer class in the <code>Platforms/iOS/</code> and <code>Platforms/MacCatalyst/</code> directories of your application.</p>
<ol>
<li>Create a custom ShellRenderer class:</li>
</ol>
<pre><code class="language-csharp">class CustomShellHandler : ShellRenderer
{
    protected override IShellItemRenderer CreateShellItemRenderer(ShellItem item)
    {
        return new CustomShellItemRenderer(this)
        {
            ShellItem = item
        };
    }
}
</code></pre>
<ol start="2">
<li>To customize <code>TabBar</code> create a new class <code>CustomShellItemRenderer</code>. It adds a rounded button if the ShellItem is out CustomTabBar. <em>You can use any control instead of button</em>:</li>
</ol>
<pre><code class="language-csharp">class CustomShellItemRenderer : ShellItemRenderer
{
    UIButton? middleView;

    public CustomShellItemRenderer(IShellContext context) : base(context)
    {
    }

    public override async void ViewWillLayoutSubviews()
    {
        base.ViewWillLayoutSubviews();
        if (View is not null &amp;&amp; ShellItem is CustomTabBar { CenterViewVisible: true } tabbar)
        {
            if (middleView is not null)
            {
                middleView.RemoveFromSuperview();
            }

            if (middleView is null)
            {
                var image = await tabbar.CenterViewImageSource.GetPlatformImageAsync(Application.Current!.MainPage!.Handler!.MauiContext!);

                middleView = new UIButton(UIButtonType.Custom);
                middleView.BackgroundColor = tabbar.CenterViewBackgroundColor?.ToPlatform();
                middleView.SetTitle(tabbar.CenterViewText, UIControlState.Normal);
                middleView.Frame = new CGRect(CGPoint.Empty, new CGSize(70, 70));
                if (image is not null)
                {
                    middleView.SetImage(image.Value, UIControlState.Normal);
                    middleView.Frame = new CGRect(CGPoint.Empty, image.Value.Size);
                }

                middleView.AutoresizingMask = UIViewAutoresizing.FlexibleRightMargin |
                                              UIViewAutoresizing.FlexibleLeftMargin |
                                              UIViewAutoresizing.FlexibleBottomMargin;
                middleView.Layer.CornerRadius = middleView.Frame.Width / 2;
                middleView.Layer.MasksToBounds = false;

                middleView.TouchUpInside += (sender, e) =&gt;
                {
                    tabbar.CenterViewCommand?.Execute(null);
                };
            }

            middleView.Center = new CGPoint(View.Bounds.GetMidX(), TabBar.Frame.Top - middleView.Frame.Height / 2);

            View.AddSubview(middleView);
        }
    }
}
</code></pre>
<h1 id="summary">Summary</h1>
<p>The final step is registering our handlers:</p>
<pre><code class="language-csharp">public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder.UseMauiApp&lt;App&gt;();
        builder.ConfigureMauiHandlers(handlers =&gt;
        {
            handlers.AddHandler&lt;Shell, CustomShellHandler&gt;();
        });

        return builder.Build();
    }
}
</code></pre>
<p>That's all we need to customize .NET MAUI Shell. Run the application and see the result:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/43/android.png" alt=".NET MAUI Shell Android" /></p>
<center>Shell on Android</center>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/43/ios.png" alt=".NET MAUI Shell iOS" /></p>
<center>Shell on iOS</center>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiShellCustomization" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Drag and Drop any content from a .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Drag-and-Drop-any-content-from-a-.NET-MAUI-application</link>
      <pubDate>Thu, 29 Jun 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Drag-and-Drop-any-content-from-a-.NET-MAUI-application</guid>
      <description><![CDATA[The article demonstrates how to add drag and drop functionality to easily move content from the .NET MAUI application to the operating system.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This article demonstrates how to add drag &amp; drop functionality to easily move content from the <code>.NET MAUI</code> application to the operating system.</p>
<h2 id="prepare-the-interface">Prepare the Interface</h2>
<p>To enable drag and drop functionality in your <code>.NET MAUI</code> application, you need to prepare the user interface. You will need to add a control that will contain a source content that is being dragged and dropped. The control that you add will depend on the type of application you are building. For example, if you are building a photo editing application, you might want to add a control that drags and drops drawing image to the file system. I am extending the <code>MauiPaint</code> application and will allow the drawing image to drop on dekstop.</p>
<pre><code class="language-csharp">myImage.RegisterDrag(Handler.MauiContext, ImageSource.Stream);
</code></pre>
<h2 id="windows-implementation">Windows implementation</h2>
<pre><code class="language-csharp">public static class DragDropHelper
{
	public static void RegisterDrag(UIElement element, Func&lt;CancellationToken, Task&lt;Stream&gt;&gt; content)
	{
		element.CanDrag = true;
		element.DragStarting += async (s, e) =&gt;
		{
			var stream = await content.Invoke(CancellationToken.None);
			var storageFile = await CreateStorageFile(stream);
			e.Data.SetStorageItems(new List&lt;IStorageItem&gt;()
			{
				storageFile
			});
		};
	}
	
	public static void UnRegisterDrag(UIElement element)
	{
		element.CanDrag = false;
	}

    private static IAsyncOperation&lt;StorageFile&gt; CreateStorageFile(Stream imageStream)
	{
		var filename = &quot;SampleImage.jpg&quot;;
		return StorageFile.CreateStreamedFileAsync(filename, async stream =&gt; await StreamDataRequestedAsync(stream, imageStream), null);
	}

	private static async Task StreamDataRequestedAsync(StreamedFileDataRequest request, Stream imageDataStream)
	{
		try
		{
			await using (var outputStream = request.AsStreamForWrite())
			{
				await imageDataStream.CopyToAsync(outputStream);
				await outputStream.FlushAsync();
			}
			request.Dispose();
		}
		catch (Exception ex)
		{
			Debug.WriteLine(ex.Message);
			request.FailAndClose(StreamedFileFailureMode.Incomplete);
		}
	}
}
</code></pre>
<p>In this example, the event handler creates a <code>StorageFile</code> from the image stream and adds it to the event data storage items collection. As soon as you drop the item, it will be copied to the new place.</p>
<h2 id="maccatalyst-implementation">MacCatalyst implementation</h2>
<pre><code class="language-csharp">public static class DragDropHelper
{
	public static void RegisterDrag(UIView view, Func&lt;CancellationToken, Task&lt;Stream&gt;&gt; content)
	{
		var dragInteraction = new UIDragInteraction(new DragInteractionDelegate()
		{
			Content = content
		});
		view.AddInteraction(dragInteraction);
	}

	public static void UnRegisterDrag(UIView view)
	{
		var dragInteractions = view.Interactions.OfType&lt;UIDragInteraction&gt;();
		foreach (var interaction in dragInteractions)
		{
			view.RemoveInteraction(interaction);
		}
	}
}

class DragInteractionDelegate : UIDragInteractionDelegate
{
	public Func&lt;CancellationToken, Task&lt;Stream&gt;&gt;? Content { get; init; }

	public override UIDragItem[] GetItemsForBeginningSession(UIDragInteraction interaction, IUIDragSession session)
	{
		if (Content is null)
		{
			return Array.Empty&lt;UIDragItem&gt;();
		}

		var streamContent = Content.Invoke(CancellationToken.None).GetAwaiter().GetResult();
		var itemProvider = new NSItemProvider(NSData.FromStream(streamContent), UniformTypeIdentifiers.UTTypes.Png.Identifier);
		var dragItem = new UIDragItem(itemProvider);
		return new[] { dragItem };
	}
}

</code></pre>
<p>Similar to the <code>Windows</code> implementation, add interaction to the <code>UIView</code> control. The <code>UIDragInteractionDelegate</code> is responsible for drag interactions for our control. <code>GetItemsForBeginningSession</code> returns the collection of drag items.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/42/drag-drop-mac.gif" alt="Drag &amp; Drop MacCatalyst" /></p>
<h2 id="extension-methods">Extension methods</h2>
<p>To simplify the syntax let's create extension methods:</p>
<pre><code class="language-csharp">using Microsoft.Maui.Platform;

public static class DragDropExtensions
{
	public static void RegisterDrag(this IElement element, IMauiContext? mauiContext, Func&lt;CancellationToken, Task&lt;Stream&gt;&gt; content)
	{
		ArgumentNullException.ThrowIfNull(mauiContext);
		var view = element.ToPlatform(mauiContext);
		DragDropHelper.RegisterDrag(view, content);
	}

	public static void UnRegisterDrag(this IElement element, IMauiContext? mauiContext)
	{
		ArgumentNullException.ThrowIfNull(mauiContext);
		var view = element.ToPlatform(mauiContext);
		DragDropHelper.UnRegisterDrag(view);
	}
}
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we have explored how to enable drag-and-drop functionality in <code>.NET MAUI</code> applications. By following these steps, you can create an intuitive and user-friendly interface for your application, allowing users to easily move files from your application to their device's file system.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiPaint" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Customizing .NET MAUI Shell]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Customizing-.NET-MAUI-Shell</link>
      <pubDate>Tue, 23 May 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Customizing-.NET-MAUI-Shell</guid>
      <description><![CDATA[The article demonstrates how to customize .NET MAUI Shell for Android and iOS/MacCatalyst platforms, offering step-by-step guidance, code examples, and a link to the GitHub repository containing full examples for practical usage.]]></description>
      <content:encoded><![CDATA[<p>Happy birthday .NET MAUI!</p>
<p>Today is one year since the first release of .NET MAUI. For this year we saw a lot of features and improvements and each day .NET MAUI becomes more and more stable. One of the main features of .NET MAUI is Shell.</p>
<p>.NET MAUI Shell is an application container provided by the .NET MAUI to facilitate the development of cross-platform applications. It offers a variety of features such as navigation, integrated search, and many customizable components that enhance the application's appearance and performance.</p>
<h2 id="customizing.net-maui-shell-for-android">Customizing .NET MAUI Shell for Android</h2>
<p>To customize your .NET MAUI Shell app for Android, you can change various components of the ShellRenderer class in the <code>Platforms/Android/</code> directory of your application. Here's an example:</p>
<ol>
<li>Create a custom ShellRenderer class:</li>
</ol>
<pre><code class="language-csharp">class CustomShellHandler : ShellRenderer
{
	protected override IShellBottomNavViewAppearanceTracker CreateBottomNavViewAppearanceTracker(ShellItem shellItem)
	{
		return new CustomBottomNavViewAppearanceTracker(this, shellItem.CurrentItem);
	}

	protected override IShellToolbarAppearanceTracker CreateToolbarAppearanceTracker()
	{
		return new CustomShellToolbarAppearanceTracker(this);
	}
}
</code></pre>
<ol start="2">
<li>To customize <code>BottomNavView</code> create a new class <code>CustomBottomNavViewAppearanceTracker</code>. It adds rounded corners and margins:</li>
</ol>
<pre><code class="language-csharp">class CustomShellBottomNavViewAppearanceTracker : ShellBottomNavViewAppearanceTracker
{
	private readonly IShellContext shellContext;

	public CustomShellBottomNavViewAppearanceTracker(IShellContext shellContext, ShellItem shellItem) : base(shellContext, shellItem)
	{
		this.shellContext = shellContext;
	}

	public override void SetAppearance(BottomNavigationView bottomView, IShellAppearanceElement appearance)
	{
		base.SetAppearance(bottomView, appearance);
		var backgroundDrawable = new GradientDrawable();
		backgroundDrawable.SetShape(ShapeType.Rectangle);
		backgroundDrawable.SetCornerRadius(30);
		backgroundDrawable.SetColor(appearance.EffectiveTabBarBackgroundColor.ToPlatform());
		bottomView.SetBackground(backgroundDrawable);

		var layoutParams = bottomView.LayoutParameters;
		if (layoutParams is ViewGroup.MarginLayoutParams marginLayoutParams)
		{
			var margin = 30;
			marginLayoutParams.BottomMargin = margin;
			marginLayoutParams.LeftMargin = margin;
			marginLayoutParams.RightMargin = margin;
			bottomView.LayoutParameters = layoutParams;
		}
	}

	protected override void SetBackgroundColor(BottomNavigationView bottomView, Color color)
	{
		base.SetBackgroundColor(bottomView, color);
		bottomView.RootView?.SetBackgroundColor(shellContext.Shell.CurrentPage.BackgroundColor.ToPlatform());
	}
}
</code></pre>
<ol start="3">
<li>Similar to the <code>BottomNavView</code>, to customize <code>Toolbar</code> create a new class <code>CustomShellToolbarAppearanceTracker</code>. It adds rounded corners and margins:</li>
</ol>
<pre><code class="language-csharp">
class CustomShellToolbarAppearanceTracker : ShellToolbarAppearanceTracker
{
	public CustomShellToolbarAppearanceTracker(IShellContext shellContext) : base(shellContext)
	{
	}

	public override void SetAppearance(Toolbar toolbar, IShellToolbarTracker toolbarTracker, ShellAppearance appearance)
	{
		base.SetAppearance(toolbar, toolbarTracker, appearance);
		var backgroundDrawable = new GradientDrawable();
		backgroundDrawable.SetShape(ShapeType.Rectangle);
		backgroundDrawable.SetCornerRadius(30);
		backgroundDrawable.SetColor(appearance.BackgroundColor.ToPlatform());
		toolbar.SetBackground(backgroundDrawable);

		var layoutParams = toolbar.LayoutParameters;
		if (layoutParams is ViewGroup.MarginLayoutParams marginLayoutParams)
		{
			var margin = 30;
			marginLayoutParams.TopMargin = margin;
			marginLayoutParams.BottomMargin = margin;
			marginLayoutParams.LeftMargin = margin;
			marginLayoutParams.RightMargin = margin;
			toolbar.LayoutParameters = layoutParams;
		}
	}
}
</code></pre>
<h2 id="customizing.net-maui-shell-for-iosmaccatalyst">Customizing .NET MAUI Shell for iOS/MacCatalyst</h2>
<p>Similar to customizing Android, you can make customizations for iOS and MacCatalyst by modifying the ShellRenderer class in the <code>Platforms/iOS/</code> and <code>Platforms/MacCatalyst/</code> directories of your application.</p>
<ol>
<li>Create a custom ShellRenderer class:</li>
</ol>
<pre><code class="language-csharp">class CustomShellHandler : ShellRenderer
{
	protected override IShellTabBarAppearanceTracker CreateTabBarAppearanceTracker()
	{
		return new CustomShellTabBarAppearanceTracker();
	}

	protected override IShellNavBarAppearanceTracker CreateNavBarAppearanceTracker()
	{
		return new CustomShellNavBarAppearanceTracker(this, base.CreateNavBarAppearanceTracker());
	}
}
</code></pre>
<ol start="2">
<li>To customize <code>TabBar</code> create a new class <code>CustomShellTabBarAppearanceTracker</code>. It adds rounded corners and margins:</li>
</ol>
<pre><code class="language-csharp">class CustomShellTabBarAppearanceTracker : ShellTabBarAppearanceTracker
{
	public override void UpdateLayout(UITabBarController controller)
	{
		base.UpdateLayout(controller);
		const int bottomSpace = 50;
		const int margin = 30;
		controller.TabBar.Frame = new CoreGraphics.CGRect(
			controller.TabBar.Frame.X + margin,
			controller.TabBar.Frame.Y - bottomSpace,
			controller.TabBar.Frame.Width - 2 * margin,
			controller.TabBar.Frame.Height
		);

		const int cornerRadius = 30;
		var uIBezierPath = UIBezierPath.FromRoundedRect(
			controller.TabBar.Bounds,
			UIRectCorner.AllCorners,
			new CoreGraphics.CGSize(cornerRadius, cornerRadius)
		);

		var cAShapeLayer = new CAShapeLayer
		{
			Frame = controller.TabBar.Bounds,
			Path = uIBezierPath.CGPath
		};
		controller.TabBar.Layer.Mask = cAShapeLayer;
	}
}
</code></pre>
<ol start="3">
<li>Similar to the <code>TabBar</code>, to customize <code>Toolbar</code> create a new class <code>CustomShellToolbarAppearanceTracker</code>. It adds rounded corners and margins:</li>
</ol>
<pre><code class="language-csharp">class CustomShellToolbarAppearanceTracker : IShellNavBarAppearanceTracker
{
	private readonly IShellContext shellContext;
	private readonly IShellNavBarAppearanceTracker baseTracker;

	public CustomShellToolbarAppearanceTracker(IShellContext shellContext, IShellNavBarAppearanceTracker baseTracker)
	{
		this.shellContext = shellContext;
		this.baseTracker = baseTracker;
	}

	public void Dispose()
	{
		baseTracker.Dispose();
	}

	public void ResetAppearance(UINavigationController controller)
	{
		baseTracker.ResetAppearance(controller);
	}

	public void SetAppearance(UINavigationController controller, ShellAppearance appearance)
	{
		baseTracker.SetAppearance(controller, appearance);
		if (controller.View is not null &amp;&amp; shellContext.Shell.CurrentPage is not null)
		{
			controller.View.BackgroundColor = shellContext.Shell.CurrentPage.BackgroundColor.ToPlatform();
		}
	}

	public void UpdateLayout(UINavigationController controller)
	{
		baseTracker.UpdateLayout(controller);
		var topSpace = controller.NavigationBar.Bounds.Height / 2;
		controller.NavigationBar.Frame = new CoreGraphics.CGRect(
			controller.NavigationBar.Frame.X + topSpace,
			controller.NavigationBar.Frame.Y + topSpace,
			controller.NavigationBar.Frame.Width - 2 * topSpace,
			controller.NavigationBar.Frame.Height
		);

		const int cornerRadius = 30;
		var uIBezierPath = UIBezierPath.FromRoundedRect(
			controller.NavigationBar.Bounds,
			UIRectCorner.AllCorners,
			new CoreGraphics.CGSize(cornerRadius, cornerRadius)
		);

		var cAShapeLayer = new CAShapeLayer
		{
			Frame = controller.NavigationBar.Bounds,
			Path = uIBezierPath.CGPath
		};
		controller.NavigationBar.Layer.Mask = cAShapeLayer;
	}

	public void SetHasShadow(UINavigationController controller, bool hasShadow)
	{
		baseTracker.SetHasShadow(controller, hasShadow);
	}
}
</code></pre>
<h1 id="summary">Summary</h1>
<p>The final step is registering our handlers:</p>
<pre><code class="language-csharp">public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder.UseMauiApp&lt;App&gt;();
		builder.ConfigureMauiHandlers(handlers =&gt;
		{
			handlers.AddHandler&lt;Shell, CustomShellHandler&gt;();
		});

		return builder.Build();
	}
}
</code></pre>
<p>That's all we need to customize .NET MAUI Shell. Run the application and see the result:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/41/android.png" alt=".NET MAUI Shell Android" /></p>
<center>Shell on Android</center>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/41/ios.png" alt=".NET MAUI Shell iOS" /></p>
<center>Shell on iOS</center>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/41/windows.png" alt=".NET MAUI Shell Windows" /></p>
<center>Shell on Windows</center>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiShellCustomization" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Setting a cursor for .NET MAUI VisualElement]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Setting-a-cursor-for-.NET-MAUI-VisualElement</link>
      <pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Setting-a-cursor-for-.NET-MAUI-VisualElement</guid>
      <description><![CDATA[The article demonstrates how to change cursor of any .NET MAUI VisualElement.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This blog post is devoted to setting a cursor for <code>.NET MAUI VisualElement</code>.</p>
<p>Let's start with defining a <code>CursorIcon</code> enumeration:</p>
<pre><code class="language-csharp">public enum CursorIcon
{
    Wait,
    Hand,
    Arrow,
    IBeam,
    Cross,
    SizeAll
}
</code></pre>
<p>It will be used for mapping platform-specific cursors.</p>
<h2 id="platform-specific-implementations">Platform-Specific Implementations</h2>
<h3 id="android">Android</h3>
<p>Create a new file named <code>CursorExtensions.cs</code> in the <code>Platforms\Android</code> folder and add the following code:</p>
<pre><code class="language-csharp">using Application = Android.App.Application;

public static class CursorExtensions
{
    public static void SetCustomCursor(this VisualElement visualElement, CursorIcon cursor, IMauiContext? mauiContext)
    {
        if (OperatingSystem.IsAndroidVersionAtLeast(24))
        {
            ArgumentNullException.ThrowIfNull(mauiContext);
            var view = visualElement.ToPlatform(mauiContext);
            view.PointerIcon = PointerIcon.GetSystemIcon(Application.Context, GetCursor(cursor));
        }
    }

    static PointerIconType GetCursor(CursorIcon cursor)
    {
        return cursor switch
        {
            CursorIcon.Hand =&gt; PointerIconType.Hand,
            CursorIcon.IBeam =&gt; PointerIconType.AllScroll,
            CursorIcon.Cross =&gt; PointerIconType.Crosshair,
            CursorIcon.Arrow =&gt; PointerIconType.Arrow,
            CursorIcon.SizeAll =&gt; PointerIconType.TopRightDiagonalDoubleArrow,
            CursorIcon.Wait =&gt; PointerIconType.Wait,
            _ =&gt; PointerIconType.Default,
        };
    }
}
</code></pre>
<p>Please pay attention. The <code>PointerIcon</code> API works on Android 24 and later.</p>
<h3 id="ios">iOS</h3>
<p>Create a new file named <code>CursorExtensions.cs</code> in the <code>Platforms\iOS</code> folder and add the following code:</p>
<pre><code class="language-csharp">public static class CursorExtensions
{
    public static void SetCustomCursor(this VisualElement visualElement, CursorIcon cursor, IMauiContext? mauiContext)
    {
        ArgumentNullException.ThrowIfNull(mauiContext);
        var view = visualElement.ToPlatform(mauiContext);
        view.UserInteractionEnabled = true;
        foreach (var interaction in view.Interactions.OfType&lt;UIPointerInteraction&gt;())
        {
            view.RemoveInteraction(interaction);
        }

        view.AddInteraction(new UIPointerInteraction(new PointerInteractionDelegate(cursor)));
    }

    class PointerInteractionDelegate : UIPointerInteractionDelegate
    {
        private readonly CursorIcon icon;

        public PointerInteractionDelegate(CursorIcon icon)
        {
            this.icon = icon;
        }

        public override UIPointerStyle? GetStyleForRegion(UIPointerInteraction interaction, UIPointerRegion region)
        {
            if (interaction.View == null) { return null; }
            string pathData = &quot;M14.9263942,24.822524 C15.7714904,24.822524 16.3700962,24.0948077 16.804375,22.9680048 L24.4925481,2.88509615 C24.7038462,2.34516827 24.8211538,1.86391827 24.8211538,1.46485577 C24.8211538,0.701899038 24.3516827,0.232403846 23.5887019,0.232403846 C23.1896635,0.232403846 22.7084135,0.349783654 22.1685096,0.561057692 L1.97987981,8.29608173 C0.993942308,8.67168269 0.230995192,9.2703125 0.230995192,10.1271394 C0.230995192,11.2069952 1.05262019,11.5708654 2.17942308,11.91125 L8.51769231,13.8362019 C9.26889423,14.0709615 9.67971154,14.047476 10.1961538,13.5779808 L23.0605769,1.54699519 C23.2129808,1.40615385 23.3891827,1.42963942 23.5182692,1.53526442 C23.6355769,1.65264423 23.6473558,1.82870192 23.5064904,1.98129808 L11.5107692,14.9043269 C11.0647356,15.3855529 11.0295192,15.7846394 11.252524,16.5710337 L13.1187981,22.7684615 C13.4709375,23.9539423 13.8347837,24.822524 14.9263942,24.822524 Z&quot;;
            var pathGeometry = new PathGeometryConverter().ConvertFromString(pathData) as PathGeometry;
            var path = UIBezierPath.FromPath(pathGeometry.ToCGPath().Data);
            return UIPointerStyle.Create(UIPointerShape.Create(path), UIAxis.Both);
        }
    }
}
</code></pre>
<p><code>UIPointerStyle.Create</code> can be created from different shapes. However, I haven't found predefined cursors for our <code>CursorIcon</code>. The option, for now, is to create a custom icon from the path.</p>
<h3 id="maccatalyst">MacCatalyst</h3>
<p>Create a new file named <code>CursorExtensions.cs</code> in <code>Platforms\MacCatalyst</code> folder and add the following code:</p>
<pre><code class="language-csharp">using AppKit;

public static class CursorExtensions
{
    public static void SetCustomCursor(this VisualElement visualElement, CursorIcon cursor, IMauiContext? mauiContext)
    {
        ArgumentNullException.ThrowIfNull(mauiContext);
        var view = visualElement.ToPlatform(mauiContext);
        if (view.GestureRecognizers is not null)
        {
            foreach (var recognizer in view.GestureRecognizers.OfType&lt;PointerUIHoverGestureRecognizer&gt;())
            {
                view.RemoveGestureRecognizer(recognizer);
            }
        }

        view.AddGestureRecognizer(new PointerUIHoverGestureRecognizer(r =&gt;
        {
            switch (r.State)
            {
                case UIGestureRecognizerState.Began:
                    GetNSCursor(cursor).Set();
                    break;
                case UIGestureRecognizerState.Ended:
                    NSCursor.ArrowCursor.Set();
                    break;
            }
        }));
    }

    static NSCursor GetNSCursor(CursorIcon cursor)
    {
        return cursor switch
        {
            CursorIcon.Hand =&gt; NSCursor.OpenHandCursor,
            CursorIcon.IBeam =&gt; NSCursor.IBeamCursor,
            CursorIcon.Cross =&gt; NSCursor.CrosshairCursor,
            CursorIcon.Arrow =&gt; NSCursor.ArrowCursor,
            CursorIcon.SizeAll =&gt; NSCursor.ResizeUpCursor,
            CursorIcon.Wait =&gt; NSCursor.OperationNotAllowedCursor,
            _ =&gt; NSCursor.ArrowCursor,
        };
    }

    class PointerUIHoverGestureRecognizer : UIHoverGestureRecognizer
    {
        public PointerUIHoverGestureRecognizer(Action&lt;UIHoverGestureRecognizer&gt; action) : base(action)
        {
        }
    }
}
</code></pre>
<p>Unlike <code>iOS</code>, <code>MacCatalyst</code> has an <code>NSCursor</code> class with predefined cursors. <code>UIHoverGestureRecognizer</code> helps us to set a custom cursor on the Hover event.</p>
<h3 id="windows">Windows</h3>
<p>To set the custom cursor on Windows, create a new file named <code>CursorExtensions.cs</code> in the <code>Platforms\Windows</code> folder and add the following code:</p>
<pre><code class="language-csharp">public static class CursorExtensions
{
    public static void SetCustomCursor(this VisualElement visualElement, CursorIcon cursor, IMauiContext? mauiContext)
    {
        ArgumentNullException.ThrowIfNull(mauiContext);
        UIElement view = visualElement.ToPlatform(mauiContext);
        view.PointerEntered += ViewOnPointerEntered;
        view.PointerExited += ViewOnPointerExited;
        void ViewOnPointerExited(object sender, PointerRoutedEventArgs e)
        {
            view.ChangeCursor(InputCursor.CreateFromCoreCursor(new CoreCursor(GetCursor(CursorIcon.Arrow), 1)));
        }

        void ViewOnPointerEntered(object sender, PointerRoutedEventArgs e)
        {
            view.ChangeCursor(InputCursor.CreateFromCoreCursor(new CoreCursor(GetCursor(cursor), 1)));
        }
    }

    static void ChangeCursor(this UIElement uiElement, InputCursor cursor)
    {
        Type type = typeof(UIElement);
        type.InvokeMember(&quot;ProtectedCursor&quot;, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.SetProperty | BindingFlags.Instance, null, uiElement, new object[] { cursor });
    }

    static CoreCursorType GetCursor(CursorIcon cursor)
    {
        return cursor switch
        {
            CursorIcon.Hand =&gt; CoreCursorType.Hand,
            CursorIcon.IBeam =&gt; CoreCursorType.IBeam,
            CursorIcon.Cross =&gt; CoreCursorType.Cross,
            CursorIcon.Arrow =&gt; CoreCursorType.Arrow,
            CursorIcon.SizeAll =&gt; CoreCursorType.SizeAll,
            CursorIcon.Wait =&gt; CoreCursorType.Wait,
            _ =&gt; CoreCursorType.Arrow,
        };
    }
}
</code></pre>
<p><code>UIElement</code> is a base class for all UI elements. It has a protected <code>ProtectedCursor</code> property that we can use to set a custom cursor. It is a very odd decision to make this property protected. We need to use reflection to set its value.</p>
<h2 id="using-the-custom-cursor-in-your-application">Using the Custom Cursor in Your Application</h2>
<pre><code class="language-csharp">MyVisualElement.SetCustomCursor(CursorIcon.Hand, MyVisualElement.Handler?.MauiContext);
</code></pre>
<p>With this code, we set the cursor to a &ldquo;Hand&rdquo; style when the mouse pointer is over the &ldquo;MyVisualElement&rdquo; control.</p>
<h2 id="creating-the-attached-property">Creating the Attached Property</h2>
<p>In order to set a custom cursor from <code>XAML</code>, let's create an attached property.</p>
<p>Create a new file in the root of the project named <code>CursorBehavior.cs</code> and paste the following code:</p>
<pre><code class="language-csharp">public class CursorBehavior
{
    public static readonly BindableProperty CursorProperty = BindableProperty.CreateAttached(&quot;Cursor&quot;, typeof(CursorIcon), typeof(CursorBehavior), CursorIcon.Arrow, propertyChanged: CursorChanged);

    private static void CursorChanged(BindableObject bindable, object oldvalue, object newvalue)
    {
        if (bindable is VisualElement visualElement)
        {
            visualElement.SetCustomCursor((CursorIcon)newvalue, Application.Current?.MainPage?.Handler?.MauiContext);
        }
    }

    public static CursorIcon GetCursor(BindableObject view) =&gt; (CursorIcon)view.GetValue(CursorProperty);

    public static void SetCursor(BindableObject view, CursorIcon value) =&gt; view.SetValue(CursorProperty, value);
}
</code></pre>
<p>Now that we have implemented the attached property for setting custom cursors, let's use it in our <code>MainPage.xaml</code>.</p>
<p>Open <code>MainPage.xaml</code> and add the following code inside the <code>ContentPage</code> element:</p>
<pre><code class="language-xml">  &lt;Button
      local:CursorBehavior.Cursor=&quot;Hand&quot;
      Text=&quot;Click me!&quot; /&gt;
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/40/windows.gif" alt="Windows Cursor" /></p>
<p>The final code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiCursor" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Real time live tracking using .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Real-time-live-tracking-using-.NET-MAUI</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Real-time-live-tracking-using-.NET-MAUI</guid>
      <description><![CDATA[The article demonstrates how to create a real-time live tracking application using .NET MAUI.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>In this article, we will discuss how to implement real-time live tracking using .NET MAUI for Android, iOS, and Windows platforms.</p>
<p><code>.NET MAUI</code> already has a mechanism to get location. There is a method <code>GetLocationAsync</code>:</p>
<pre><code class="language-csharp">Location location = await Geolocation.Default.GetLocationAsync(request, CancellationToken.None);
</code></pre>
<p>Let's extend this API. Starting from the interface:</p>
<pre><code class="language-csharp">public interface IGeolocator
{
	Task StartListening(IProgress&lt;Location&gt; positionChangedProgress, CancellationToken cancellationToken);
}
</code></pre>
<p>where <code>positionChangedProgress</code> contains the geolocation when position changes, <code>cancallationToken</code> is used for stopping the process.</p>
<h2 id="android">Android</h2>
<p>Geolocation requires additional permissions, so add these lines to <code>AndroidManifest.xml</code>:</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot; /&gt;
&lt;uses-feature android:name=&quot;android.hardware.location&quot; android:required=&quot;false&quot; /&gt;
&lt;uses-feature android:name=&quot;android.hardware.location.gps&quot; android:required=&quot;false&quot; /&gt;
&lt;uses-feature android:name=&quot;android.hardware.location.network&quot; android:required=&quot;false&quot; /&gt;
&lt;queries&gt;
    &lt;intent&gt;
        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;
        &lt;data android:scheme=&quot;geo&quot;/&gt;
    &lt;/intent&gt;
&lt;/queries&gt;
</code></pre>
<p>Now let's implement our <code>IGeolocator</code> interface:</p>
<pre><code class="language-csharp">public class GeolocatorImplementation : IGeolocator
{
	GeolocationContinuousListener? locator;

	public async Task StartListening(IProgress&lt;Microsoft.Maui.Devices.Sensors.Location&gt; positionChangedProgress, CancellationToken cancellationToken)
	{
		var permission = await Permissions.CheckStatusAsync&lt;Permissions.LocationAlways&gt;();
		if (permission != PermissionStatus.Granted)
		{
			permission = await Permissions.RequestAsync&lt;Permissions.LocationAlways&gt;();
			if (permission != PermissionStatus.Granted)
			{
				await Toast.Make(&quot;No permission&quot;).Show(CancellationToken.None);
				return;
			}
		}

		locator = new GeolocationContinuousListener();
		var taskCompletionSource = new TaskCompletionSource();
		cancellationToken.Register(() =&gt;
		{
			locator.Dispose();
			locator = null;
			taskCompletionSource.TrySetResult();
		});
		locator.OnLocationChangedAction = location =&gt;
			positionChangedProgress.Report(
				new Microsoft.Maui.Devices.Sensors.Location(location.Latitude, location.Longitude));
		await taskCompletionSource.Task;
	}
}

internal class GeolocationContinuousListener : Java.Lang.Object, ILocationListener
{
	public Action&lt;Location&gt;? OnLocationChangedAction { get; set; }

	LocationManager? locationManager;

	public GeolocationContinuousListener()
	{
		locationManager = (LocationManager?)Android.App.Application.Context.GetSystemService(Android.Content.Context.LocationService);
		locationManager?.RequestLocationUpdates(LocationManager.GpsProvider, 1000, 0, this);
	}

	public void OnLocationChanged(Location location)
	{
		OnLocationChangedAction?.Invoke(location);
	}

	public void OnProviderDisabled(string provider)
	{
	}

	public void OnProviderEnabled(string provider)
	{
	}

	public void OnStatusChanged(string? provider, [GeneratedEnum] Availability status, Bundle? extras)
	{
	}

	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
		locationManager?.RemoveUpdates(this);
		locationManager?.Dispose();
	}
}
</code></pre>
<p><code>GeolocationContinuousListener</code> requests location updates from <code>LocationManager</code>.</p>
<h2 id="iosmaccatalyst">iOS/MacCatalyst</h2>
<p>LocationManager requires access to a location, so add these lines to <code>Info.plist</code>:</p>
<pre><code class="language-xml">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;
&lt;string&gt;This app needs access to location when open.&lt;/string&gt;
&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;This app needs access to location when in the background.&lt;/string&gt;
&lt;key&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;/key&gt;
&lt;string&gt;This app needs access to location when open and in the background.&lt;/string&gt;
&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre>
<p>Now let's implement our <code>IGeolocator</code> interface:</p>
<pre><code class="language-csharp">public class GeolocatorImplementation : IGeolocator
{
	readonly CLLocationManager manager = new();

	public async Task StartListening(IProgress&lt;Location&gt; positionChangedProgress, CancellationToken cancellationToken)
	{
		var permission = await Permissions.CheckStatusAsync&lt;Permissions.LocationAlways&gt;();
		if (permission != PermissionStatus.Granted)
		{
			permission = await Permissions.RequestAsync&lt;Permissions.LocationAlways&gt;();
			if (permission != PermissionStatus.Granted)
			{
				await Toast.Make(&quot;No permission&quot;).Show(CancellationToken.None);
				return;
			}
		}
		var taskCompletionSource = new TaskCompletionSource();
		cancellationToken.Register(() =&gt;
		{
			manager.LocationsUpdated -= PositionChanged;
			taskCompletionSource.TrySetResult();
		});
		manager.LocationsUpdated += PositionChanged;

		void PositionChanged(object? sender, CLLocationsUpdatedEventArgs args)
		{
			if (args.Locations.Length &gt; 0)
			{
				var coordinate = args.Locations[^1].Coordinate;
				positionChangedProgress.Report(new Location(coordinate.Latitude, coordinate.Longitude));
			}
		}

		await taskCompletionSource.Task;
	}
}
</code></pre>
<p>Similar to <code>Android</code> here we also create <code>CLLocationManager</code> and subscribe to <code>LocationsUpdated</code>.</p>
<h2 id="windows">Windows</h2>
<p>The same as with <code>Android</code> and <code>iOS</code> we implement <code>IGeolocator</code> interface:</p>
<pre><code class="language-csharp">public class GeolocatorImplementation : IGeolocator
{
	readonly Windows.Devices.Geolocation.Geolocator locator = new();

	public async Task StartListening(IProgress&lt;Location&gt; positionChangedProgress, CancellationToken cancellationToken)
	{
		var taskCompletionSource = new TaskCompletionSource();
		cancellationToken.Register(() =&gt;
		{
			locator.PositionChanged -= PositionChanged;
			taskCompletionSource.TrySetResult();
		});
		locator.PositionChanged += PositionChanged;

		void PositionChanged(Windows.Devices.Geolocation.Geolocator sender, PositionChangedEventArgs args)
		{
			positionChangedProgress.Report(new Location(args.Position.Coordinate.Latitude, args.Position.Coordinate.Longitude));
		}

		await taskCompletionSource.Task;
	}
}
</code></pre>
<h2 id="sample">Sample</h2>
<p>And the most pleasant step to check that everything works:</p>
<pre><code class="language-csharp">var progress = new Progress&lt;Location&gt;(location =&gt;
{
    LocationText = $&quot;New location: {location.Latitude}, {location.Longitude}&quot;;
});
await Geolocator.Default.StartListening(progress, cancellationToken);
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/39/android.gif" alt="Android real-time location tracker" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we have learned how to implement real-time live tracking using .NET MAUI for Android, iOS, and Windows platforms. With a single code base, we can easily access device location with real-time tracking features.</p>
<p>Make sure to always handle location data responsibly and obtain the necessary permissions from your users before accessing and displaying their location data. Additionally, consider optimizing the location update interval and platform-specific configurations to improve battery life and performance.</p>
<p>The final code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiMaps" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Drag and Drop any content to a .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Drag-and-Drop-any-content-to-a-.NET-MAUI-application</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Drag-and-Drop-any-content-to-a-.NET-MAUI-application</guid>
      <description><![CDATA[The article demonstrates how to add drop functionality to easily move content from the operating system to the .NET MAUI application.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This article demonstrates how to add drop functionality to easily move content from the operating system to the <code>.NET MAUI</code> application.</p>
<h2 id="prepare-the-interface">Prepare the Interface</h2>
<p>To enable drag and drop functionality in your <code>.NET MAUI</code> application, you need to prepare the user interface. You will need to add a control that will accept the content that is being dragged and dropped. The control that you add will depend on the type of application you are building. For example, if you are building a photo editing application, you might want to add a control that accepts image files. I am extending the <code>MauiPaint</code> application and will allow <code>JSON</code> files to drop on <code>Page</code> control.</p>
<pre><code class="language-csharp">myPage.RegisterDrop(Handler.MauiContext, async stream =&gt;
{
	await OpenFile(stream);
});
</code></pre>
<h2 id="windows-implementation">Windows implementation</h2>
<p>There are two main events that you need to handle:</p>
<ul>
<li><p><code>DragOver</code>: This event is fired when content is dragged over the control. You can use this event to determine whether the file is valid and whether it should be accepted.</p>
</li>
<li><p><code>Drop</code>: This event is fired when the content is dropped onto the control. You can use this event to perform any necessary processing on the file.</p>
</li>
</ul>
<pre><code class="language-csharp">public static class DragDropHelper
{
	public static void RegisterDrop(UIElement element, Func&lt;Stream, Task&gt;? content)
	{
		element.AllowDrop = true;
		element.Drop += async (s, e) =&gt;
		{
			if (e.DataView.Contains(StandardDataFormats.StorageItems))
			{
				var items = await e.DataView.GetStorageItemsAsync();
				foreach (var item in items)
				{
					if (item is StorageFile file)
					{
						if (content is not null)
						{
							var text = await FileIO.ReadTextAsync(file);
							var bytes = Encoding.Default.GetBytes(text);
							await content.Invoke(new MemoryStream(bytes));
						}
					}
				}
			}
		};
		element.DragOver += OnDragOver;
	}

	public static void UnRegisterDrop(UIElement element)
	{
		element.AllowDrop = false;
		element.DragOver -= OnDragOver;
	}

	private static async void OnDragOver(object sender, DragEventArgs e)
	{
		if (e.DataView.Contains(StandardDataFormats.StorageItems))
		{
			var deferral = e.GetDeferral();
			var extensions = new List&lt;string&gt; { &quot;.json&quot; };
			var isAllowed = false;
			var items = await e.DataView.GetStorageItemsAsync();
			foreach (var item in items)
			{
				if (item is StorageFile file &amp;&amp; extensions.Contains(file.FileType))
				{
					isAllowed = true;
					break;
				}
			}

			e.AcceptedOperation = isAllowed ? DataPackageOperation.Copy : DataPackageOperation.None;
			deferral.Complete();
		}

		e.AcceptedOperation = DataPackageOperation.None;
	}
}
</code></pre>
<p>In this example, the event handler checks to see if the dragged data contains any storage items (files). Additionally filter items by file extension, allowing only <code>JSON</code> files. If all checks are passed, the <code>AcceptedOperation</code> property is set to <code>DataPackageOperation.Copy</code>, indicating that the file should be copied to the application's storage.</p>
<p>Once the file has been accepted, the Drop event handler retrieves the storage items from the <code>DataView</code> and checks to see if there are any <code>StorageFile</code> objects. Once the file has been retrieved, you can process it as necessary.</p>
<h2 id="maccatalyst-implementation">MacCatalyst implementation</h2>
<pre><code class="language-csharp">public static class DragDropHelper
{
	public static void RegisterDragDrop(UIView view, Func&lt;Stream, Task&gt;? content)
	{
		var dropInteraction = new UIDropInteraction(new DropInteractionDelegate()
		{
			Content = content
		});
		view.AddInteraction(dropInteraction);
	}

	public static void UnRegisterDragDrop(UIView view)
	{
		var dropInteractions = view.Interactions.OfType&lt;UIDropInteraction&gt;();
		foreach (var interaction in dropInteractions)
		{
			view.RemoveInteraction(interaction);
		}
	}
}

class DropInteractionDelegate : UIDropInteractionDelegate
{
	public Func&lt;Stream, Task&gt;? Content { get; init; }

	public override UIDropProposal SessionDidUpdate(UIDropInteraction interaction, IUIDropSession session)
	{
		return new UIDropProposal(UIDropOperation.Copy);
	}

	public override void PerformDrop(UIDropInteraction interaction, IUIDropSession session)
	{
		foreach (var item in session.Items)
		{
			item.ItemProvider.LoadItem(UniformTypeIdentifiers.UTTypes.Json.Identifier, null, async (data, error) =&gt;
			{
				if (data is NSUrl nsData &amp;&amp; !string.IsNullOrEmpty(nsData.Path))
				{
					if (Content is not null)
					{
						var bytes = await File.ReadAllBytesAsync(nsData.Path);
						await Content.Invoke(new MemoryStream(bytes));
					}
				}
			});
		}
	}
}
</code></pre>
<p>Similar to the <code>Windows</code> implementation, add interaction to the <code>UIView</code> control. The <code>UIDropInteractionDelegate</code> is responsible for drop interactions for our control. <code>SessionDidUpdate</code> indicates that the file should be copied to the application's storage. The <code>PerformDrop</code> method loads items by the identifier (<code>JSON</code> in the sample) and then reads its content.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/38/drag-drop-windows.gif" alt="Drag &amp; Drop Windows" /></p>
<h2 id="extension-methods">Extension methods</h2>
<p>To simplify the syntax let's create extension methods:</p>
<pre><code class="language-csharp">using Microsoft.Maui.Platform;

public static class DragDropExtensions
{
	public static void RegisterDrop(this IElement element, IMauiContext? mauiContext, Func&lt;Stream, Task&gt;? content)
	{
		ArgumentNullException.ThrowIfNull(mauiContext);
		var view = element.ToPlatform(mauiContext);
		DragDropHelper.RegisterDrop(view, content);
	}

	public static void UnRegisterDrop(this IElement element, IMauiContext? mauiContext)
	{
		ArgumentNullException.ThrowIfNull(mauiContext);
		var view = element.ToPlatform(mauiContext);
		DragDropHelper.UnRegisterDrop(view);
	}
}
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we have explored how to enable drag-and-drop functionality in <code>.NET MAUI</code> applications. By following these steps, you can create an intuitive and user-friendly interface for your application, allowing users to easily move files from their device's file system to your application.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiPaint" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Integrating captcha into a .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Integrating-captcha-into-a-.NET-MAUI-application</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Integrating-captcha-into-a-.NET-MAUI-application</guid>
      <description><![CDATA[The article demonstrates how to integrate captcha into .NET MAUI application.]]></description>
      <content:encoded><![CDATA[<p>Hello and welcome to the most bot-resistant article in the world!</p>
<p>Today we are talking about captcha. Captcha is a security mechanism used to prevent automated programs or bots from accessing a website or application. It presents a challenge that is difficult for bots to solve but easy for humans to complete, thus ensuring that only human users can access the application.</p>
<p>Integrating a captcha in a <code>.NET MAUI</code> application is relatively easy and can be accomplished in a few simple steps. However there are multiple ways how it can be done, so in this article, we will look at two different approaches.</p>
<h1 id="net-for-android">.NET for Android</h1>
<p>If your target platform is <strong>Android</strong>, you can use the <code>Google SafetyNet SDK</code> to integrate a captcha in your application.</p>
<h2 id="register-google-recaptcha-for-your-application">Register Google reCAPTCHA for your application</h2>
<ol>
<li>Open <code>Google reCAPTCHA</code> website: <a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a></li>
<li>Fill label and choose <code>reCAPTCHA v2</code> type, then <code>reCAPTCHA Android</code> subtype.</li>
</ol>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/37/captcha-android-setup.png" alt="Android reCAPTCHA setup" /></p>
<ol start="3">
<li>Copy the <code>Site key</code> and <code>Secret key</code> to the clipboard.</li>
</ol>
<h2 id="integrate-google-recaptcha-in-your-application">Integrate Google reCAPTCHA in your application</h2>
<p>The first step you need to do is add the <code>Google SafetyNet SDK</code> to your project.</p>
<p>Add the next code to your <code>csproj</code> file:</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
	&lt;PackageReference Include=&quot;Xamarin.GooglePlayServices.SafetyNet&quot; Version=&quot;118.0.1.3&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>The second step is to add a code to call the <code>Google reCAPTCHA</code> popup:</p>
<pre><code class="language-csharp">private const string AndroidSiteKey = &quot;YOUR-ANDROID-SITE-KEY-FROM-STEP-1&quot;;
private const string AndroidSecretKey = &quot;YOUR-ANDROID-SECRET-KEY-FROM-STEP-1&quot;;

async void OnLoginClicked(object sender, EventArgs e)
{
	var api = Android.Gms.SafetyNet.SafetyNetClass.GetClient(Platform.CurrentActivity);
	var response = await api.VerifyWithRecaptchaAsync(AndroidSiteKey);
	if (response != null &amp;&amp; !string.IsNullOrEmpty(response.TokenResult))
	{
		var captchaResponse = await ValidateCaptcha(response.TokenResult, AndroidSecretKey);
		if (captchaResponse is null || !captchaResponse.Success)
		{
			await Toast.Make($&quot;Invalid captcha: {string.Join(&quot;,&quot;, captchaResponse?.ErrorCodes ?? Enumerable.Empty&lt;object&gt;())}&quot;, ToastDuration.Long).Show();
			return;
		}

		if (Platform.CurrentActivity!.PackageName != captchaResponse.ApkPackageName)
		{
			await Toast.Make($&quot;Package Names do not match: {captchaResponse.ApkPackageName}&quot;, ToastDuration.Long).Show();
		}
		else
		{
			await Toast.Make(&quot;Success&quot;, ToastDuration.Long).Show();
		}
	}
	else
	{
		await Toast.Make(&quot;Failed&quot;, ToastDuration.Long).Show();
	}
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/37/Android.gif" alt="Android SafetyNet" /></p>
<p>With this approach, you get an implementation provided by <code>Google</code> designed specifically for native applications.</p>
<p>It works with both <code>.NET MAUI</code> and <code>.NET MAUI Blazor</code> apps but only on <strong>Android</strong>.</p>
<h1 id="net-maui-solution">.NET MAUI solution</h1>
<p>If you want to use the same solution for all platforms or want to use another captcha provider, you can use the <code>WebView</code>.</p>
<h2 id="register-a-captcha-for-your-website">Register a captcha for your website</h2>
<p>There are several captcha providers available that you can use for your <code>.NET MAUI</code> application. Some of the most popular ones include <code>Google reCAPTCHA</code> and <code>hCaptcha</code>. Each provider has its own set of features, advantages, and disadvantages, so it's important to choose one that best suits your application's needs.</p>
<ol>
<li>Open <code>Google reCAPTCHA</code> website: <a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a></li>
<li>Fill label and choose <code>reCAPTCHA v2</code> type, then <code>&quot;I'm not a robot&quot; Checkbox</code> subtype.</li>
</ol>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/37/captcha-blazor-setup.png" alt=".NET MAUI reCAPTCHA setup" /></p>
<ol start="3">
<li>Add &ldquo;<strong>0.0.0.0</strong>&rdquo; to the list of domains.</li>
<li>Copy the <code>Site key</code> and <code>Secret key</code> to the clipboard.</li>
</ol>
<h2 id="integrate-a-captcha-in-your-application">Integrate a captcha in your application</h2>
<p>If your application is <code>.NET MAUI Blazor</code>, you can add the next code to your <code>index.html</code>. If you use <code>.NET MAUI</code>, you need to upload the next code to your website (<em>most captcha providers do not allow to use of a captcha on localhost</em>).</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover&quot; /&gt;
    &lt;script src=&quot;https://www.google.com/recaptcha/api.js&quot; async defer&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;status-bar-safe-area&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;g-recaptcha&quot; data-sitekey=&quot;YOUR-WEBSITE-KEY-FROM-STEP-1&quot; data-callback=&quot;validate&quot;&gt;&lt;/div&gt;
    &lt;script src=&quot;_framework/blazor.webview.js&quot; autostart=&quot;false&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        function validate(response) {
            window.location.href = './?token=' + response;
        }
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p>The next step is to add a <code>WebView</code> to your page and load the page with a captcha.</p>
<pre><code class="language-xml">&lt;BlazorWebView HostPage=&quot;wwwroot/index.html&quot;
		UrlLoading=&quot;BlazorWebView_OnUrlLoading&quot;/&gt;
</code></pre>
<p>Here we subscribe to the <code>UrlLoading</code> event to get the captcha token.</p>
<p>The final step is to validate the captcha token.</p>
<pre><code class="language-csharp">public class CaptchaResult
{
	[JsonPropertyName(&quot;success&quot;)]
	public bool Success { get; set; }

	[JsonPropertyName(&quot;challenge_ts&quot;)]
	public DateTime ChallengeTs { get; set; }

	[JsonPropertyName(&quot;apk_package_name&quot;)]
	public string? ApkPackageName { get; set; }

	[JsonPropertyName(&quot;error-codes&quot;)]
	public List&lt;object&gt;? ErrorCodes { get; set; }
}

private const string WebSiteKey = &quot;YOUR-WEBSITE-KEY-FROM-STEP-1&quot;;
private const string WebSecretKey = &quot;YOUR-WEBSITE-SECRET-KEY-FROM-STEP-1&quot;;

private async void BlazorWebView_OnUrlLoading(object? sender, UrlLoadingEventArgs e)
{
	e.UrlLoadingStrategy = UrlLoadingStrategy.OpenInWebView;
	var query = System.Web.HttpUtility.ParseQueryString(e.Url.Query);
	var token = query.Get(&quot;token&quot;);
	if (!string.IsNullOrEmpty(token))
	{
		var captchaResponse = await ValidateCaptcha(token, WebSecretKey);
		if (captchaResponse is null || !captchaResponse.Success)
		{
			await Toast.Make($&quot;Invalid captcha: {string.Join(&quot;,&quot;, captchaResponse?.ErrorCodes ?? Enumerable.Empty&lt;object&gt;())}&quot;, ToastDuration.Long).Show();
			return;
		}

		await Toast.Make(&quot;Success&quot;, ToastDuration.Long).Show();
	}
}

static async Task&lt;CaptchaResult?&gt; ValidateCaptcha(string token, string secretKey)
{
	using var client = new HttpClient();
	var parameters = new Dictionary&lt;string, string&gt;
	{
		{ &quot;secret&quot;, secretKey },
		{ &quot;response&quot;, token }
	};
	var content = new FormUrlEncodedContent(parameters);
	var response = await client.PostAsync(&quot;https://www.google.com/recaptcha/api/siteverify&quot;, content);

	if (!response.IsSuccessStatusCode)
	{
		return null;
	}

	var responseContent = await response.Content.ReadFromJsonAsync&lt;CaptchaResult&gt;();
	return responseContent;
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/37/Windows.gif" alt="Windows" /></p>
<h1 id="conclusion">Conclusion</h1>
<p>Integrating a captcha in a <code>.NET MAUI</code> application can help enhance security by preventing bots from accessing the application. By following the steps outlined above, you can easily add a captcha to your <code>.NET MAUI</code> application and provide an extra layer of security for your users.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiCaptcha" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Dynamic configuration in .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Dynamic-configuration-in-.NET-MAUI-application</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Dynamic-configuration-in-.NET-MAUI-application</guid>
      <description><![CDATA[The article demonstrates how to integrate .NET MAUI application with ConfigCat.]]></description>
      <content:encoded><![CDATA[<p>Feature flags and dynamic configuration are essential tools for modern software development. They enable rapid delivery of new features and bug fixes while avoiding the costly write-off of mismatched expectations and accidentally &ldquo;shipping the wrong thing&rdquo;. One of the services allowing such capabilities is <code>ConfigCat</code>.</p>
<p>Integrating <code>.NET MAUI</code> with <code>ConfigCat</code> is a great way to make your .NET application more efficient and performant.</p>
<p><code>ConfigCat</code> is an online service that allows developers to quickly configure their applications with feature flags and variables. It can also be used to dynamically change configuration values based on user preferences and other conditions. Integrating with <code>ConfigCat</code> allows developers to quickly update their applications without having to deploy a new version of the app. This helps to increase the speed of development, while also reducing the risk associated with a new feature launch.</p>
<p>In order to integrate <code>.NET MAUI</code> with <code>ConfigCat</code>, developers need to install the <code>ConfigCat.Client</code> using the <code>NuGet</code>.</p>
<p>To use <code>ConfigCat</code>, developers must first register an instance of the <code>ConfigCatClient</code>:</p>
<pre><code class="language-csharp">public static MauiApp CreateMauiApp()
{
    var builder = MauiApp.CreateBuilder();
    builder.UseMauiApp&lt;App&gt;();
    builder.Services.AddSingleton(s =&gt; ConfigCatClient.Get(&quot;YOUR_KEY&quot;,
                                                    options =&gt;
                                                    {
                                                        options.PollingMode = PollingModes.AutoPoll(pollInterval: TimeSpan.FromSeconds(90));
                                                        options.Logger.LogLevel = ConfigCat.Client.LogLevel.Info;
                                                    }));
    return builder.Build();
}
</code></pre>
<p>It is recommended to have a signle instance of <code>ConfigCatClient</code>. You may setup different <code>PollingMode</code> like <code>LazyLoad</code> or <code>Manual</code> depends on your needs.</p>
<p>After the initialization, let's retrieve values from <code>ConfigCat</code>. For example, if you have a feature flag called <code>beta</code>, you can retrieve its value like this:</p>
<pre><code class="language-csharp">Image = this.configCatClient.GetValue(&quot;beta&quot;, false) ? &quot;botbeta.png&quot; : &quot;bot.png&quot;;
</code></pre>
<p>This will return a <code>Boolean</code> value indicating whether the feature flag is enabled or disabled.</p>
<p>In addition to feature flags, ConfigCat also allows developers to manage their application’s settings. This helps to keep settings synchronized between test and production environments and make it easy to update settings across the board. With <code>ConfigCat</code>, developers can also create staged rollouts, which allows them to gradually deploy feature updates to a limited number of users for testing and then gradually increase the number of users getting the release. This helps to ensure that any issues are caught before the feature is released to the public, ensuring a smoother launch.</p>
<p><code>ConfigCat</code> also allows to apply value to specific user. To do that, developer needs to specify the third parameter of the <code>GetValue</code> method:</p>
<pre><code class="language-csharp">Title = this.configCatClient.GetValue(&quot;beta_gmailusers_mainpagetitle&quot;, &quot;Main Page&quot;, new User(&quot;USER_UNIQUE_IDENTIFIER&quot;)
{
    Email = &quot;email@gmail.com&quot;
});
</code></pre>
<p>Developers can also subscribe on config changes to dynamically apply updates without restarting the application:</p>
<pre><code class="language-csharp">using ConfigCat.Client;
...
public class MainViewModel
{
	private readonly IConfigCatClient configCatClient;
    public MainViewModel(IConfigCatClient configCatClient)
    {
        this.configCatClient = configCatClient;
        configCatClient.ConfigChanged += (_, _) =&gt;
        {
            Initialize();
        };
        Initialize();
    }

    public void Initialize()
    {
        Title = this.configCatClient.GetValue(&quot;beta_gmailusers_mainpagetitle&quot;, &quot;Main Page&quot;, new User(&quot;CURRENT_USER_EMAIL&quot;)
        {
            Email = &quot;CURRENT_USER_EMAIL&quot;
        });
        Image = this.configCatClient.GetValue(&quot;beta&quot;, false) ? &quot;botbeta.png&quot; : &quot;bot.png&quot;;
    }
}
</code></pre>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiDynamicConfiguration" target="_blank">GitHub</a>.</p>
<p>Integrating <code>ConfigCat</code> with <code>.NET MAUI</code> is an easy and efficient way to ensure that your application is always optimized and up-to-date. It can help to improve development times, reduce risk associated with feature releases, and provide comprehensive metrics and reporting that can help identify any potential issues. If you’re looking for an easy way to ensure the success of your application, integrating <code>ConfigCat</code> with <code>.NET MAUI</code> is definitely the way to go.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating Markdown control with .NET MAUI Graphics]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-Markdown-control-with-.NET-MAUI-Graphics</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-Markdown-control-with-.NET-MAUI-Graphics</guid>
      <description><![CDATA[The article demonstrates how to render markdown with .NET MAUI Graphics.]]></description>
      <content:encoded><![CDATA[<p>Hello and welcome to 2023! 👋</p>
<p>This article is devoted to creating a simple Markdown control using .NET MAUI Graphics.</p>
<p>.NET MAUI Graphics is a cross-platform API for drawing 2D graphics in .NET applications.</p>
<p>The <code>Microsoft.Maui.Graphics</code> namespace provides a cross-platform 2D graphics canvas that supports drawing and painting shapes and images, compositing operations, and graphical object transforms. You can read more about it on <a href="https://docs.microsoft.com/en-us/dotnet/maui/user-interface/graphics" target="_blank">Microsoft docs</a>.</p>
<p>Let's see how to add this cool API to your application.</p>
<h2 id="markdown-control">Markdown control</h2>
<p><code>.NET MAUI</code> has a <code>GraphicsView</code> control. It is a graphics canvas for drawing 2D graphics.</p>
<p>Let's create a <code>MarkdownGraphicsView</code> control:</p>
<pre><code class="language-csharp">using Maui.BindableProperty.Generator.Core;

public partial class MarkdownGraphicsView : GraphicsView
{
	[AutoBindable(OnChanged = nameof(OnTextChanged))]
	private string? text;

	[AutoBindable(OnChanged = nameof(OnFontSizeChanged))]
	private float fontSize;

	[AutoBindable(OnChanged = nameof(OnFontColorChanged))]
	private Color fontColor = Colors.Black;

	private void OnTextChanged(string? oldValue, string? newValue)
	{
		Render();
	}
	private void OnFontSizeChanged(float oldValue, float newValue)
	{
		Render();
	}
	private void OnFontColorChanged(Color oldValue, Color newValue)
	{
		Render();
	}

	private void Render()
	{
		Drawable = new MarkdownDrawable(Text ?? string.Empty, FontColor, FontSize, Width, Height);
	}
}
</code></pre>
<blockquote>
<p>I use <code>M.BindableProperty.Generator</code> Nuget package to simplify bindable property code generation.</p>
</blockquote>
<h2 id="markdowndrawable">MarkdownDrawable</h2>
<p><code>GraphicsView</code> defines the <code>Drawable</code> property, which specifies the content that will be drawn.</p>
<p>To create a new drawable we need to implement <code>Draw</code> method of <code>IDrawable</code> interface.</p>
<pre><code class="language-csharp">using Markdig;
using Microsoft.Maui.Graphics.Text;
using Microsoft.Maui.Graphics.Text.Renderer;
using Font = Microsoft.Maui.Graphics.Font;

public class MarkdownDrawable : IDrawable
{
	private readonly string text;
	private readonly Color fontColor;
	private readonly float fontSize;
	private readonly int markdownWidth;
	private readonly int markdownHeight;

	public MarkdownDrawable(string text, Color fontColor, double fontSize, double markdownWidth, double markdownHeight)
	{
		this.text = text;
		this.fontColor = fontColor;
		this.fontSize = (float)fontSize;
		this.markdownWidth = (int)markdownWidth;
		this.markdownHeight = (int)markdownHeight;
	}

	public void Draw(ICanvas canvas, RectF dirtyRect)
	{
		canvas.Font = Font.Default;
		canvas.FontSize = fontSize;
		canvas.FontColor = fontColor;
		var attributedText = Read(text);
		canvas.DrawText(attributedText, 0, 0, markdownWidth, markdownHeight);
	}

	private static IAttributedText Read(string text)
	{
		var renderer = new AttributedTextRenderer();
		renderer.ObjectRenderers.Add(new MauiCodeInlineRenderer());
		renderer.ObjectRenderers.Add(new MauiCodeBlockRenderer());
		renderer.ObjectRenderers.Add(new MauiHeadingRenderer());
		var builder = new MarkdownPipelineBuilder().UseEmojiAndSmiley().UseEmphasisExtras();
		var pipeline = builder.Build();
		Markdig.Markdown.Convert(text, renderer, pipeline);
		return renderer.GetAttributedText();
	}
}
</code></pre>
<p>Please take a look at <code>Read</code> method. .NET MAUI already has a <code>MarkdownAttributedTextReader</code>. So, for a simple scenario you can replace the code with:</p>
<pre><code class="language-csharp">private static IAttributedText Read(string text)
{
	return MarkdownAttributedTextReader.Read(text);
}
</code></pre>
<p>But, if you want to implement a custom renderer, or use your Markdown converter (Markdig is currently used), keep it as it is.</p>
<h2 id="customrenderer">CustomRenderer</h2>
<p>The final step is implementing a custom renderer for a specific markdown block.</p>
<p>Let's implement it for <code>CodeInline</code>. The <code>CodeInline</code> is a block of text you put in single quotes (`).</p>
<pre><code class="language-csharp">using Markdig.Syntax.Inlines;
using Microsoft.Maui.Graphics.Text;
using Microsoft.Maui.Graphics.Text.Renderer;

public class MauiCodeInlineRenderer : AttributedTextObjectRenderer&lt;CodeInline&gt;
{
	protected override void Write(AttributedTextRenderer renderer, CodeInline inlineBlock)
	{
		var start = renderer.Count;
		var attributes = new TextAttributes();
		attributes.SetForegroundColor(&quot;#d63384&quot;);
		renderer.Write(inlineBlock.Content);
		var length = renderer.Count - start;
		renderer.Call(&quot;AddTextRun&quot;, start, length, attributes);
	}
}
</code></pre>
<p>We also need to call <code>Renderer.AddTextRun</code> method, but it is internal in .NET MAUI. But we still can call it using reflection:</p>
<pre><code class="language-csharp">static class AccessExtensions
{
	public static void Call(this object o, string methodName, params object[] args)
	{
		var mi = o.GetType().GetMethod (methodName, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
		mi?.Invoke (o, args);
	}
}
</code></pre>
<h2 id="result">Result</h2>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/35/android.png" alt="Android" /></p>
<center>Markdown on Android</center>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/35/ios.png" alt="Markdown on iOS" /></p>
<center>Markdown on iOS</center>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiMarkdown" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[AppIcon Badge with .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/AppIcon-Badge-with-.NET-MAUI</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/AppIcon-Badge-with-.NET-MAUI</guid>
      <description><![CDATA[The article demonstrates how to add the AppIcon badge number with .NET MAUI.]]></description>
      <content:encoded><![CDATA[<p>Winter is coming!</p>
<p>This article is a continuation of a series of potential Essentials APIs, that can be added to .NET MAUI later. It is devoted to the AppIcon badge. If your app sends notifications or you want the user to pay attention to the app, this API is what you need.</p>
<p>As usual, starting from creating the interface:</p>
<pre><code class="language-csharp">public interface INotificationCounter
{
	void SetNotificationCount(int count);
}

public static class NotificationCounter
{
	static INotificationCounter? defaultImplementation;

	public static void SetNotificationCount(int count)
	{
		Default.SetNotificationCount(count);
	}

	public static INotificationCounter Default =&gt;
		defaultImplementation ??= new NotificationCounterImplementation();

	internal static void SetDefault(INotificationCounter? implementation) =&gt;
		defaultImplementation = implementation;
}
</code></pre>
<p>We need only 1 method that sets badge count. If the count is 0 or less, the badge is removed.</p>
<h2 id="android">Android</h2>
<p>In Android, icons are displayed in the launcher, and there are a lot of different launchers. Each of them requires its own permissions and implementations. I recommend installing the next <code>NuGet</code> package:</p>
<pre><code class="language-xml">&lt;ItemGroup Condition=&quot;'$(TargetFramework)' == 'net7.0-android'&quot;&gt;
  &lt;PackageReference Include=&quot;Xamarin.Android.ShortcutBadger&quot; Version=&quot;1.2.0&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>Add the next permissions to <code>AndroidManifest.xml</code>:</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot;/&gt;

&lt;uses-permission android:name=&quot;com.sonymobile.home.permission.PROVIDER_INSERT_BADGE&quot; /&gt;
&lt;uses-permission android:name=&quot;com.majeur.launcher.permission.UPDATE_BADGE&quot; /&gt;
&lt;uses-permission android:name=&quot;com.huawei.android.launcher.permission.CHANGE_BADGE&quot; /&gt;
&lt;uses-permission android:name=&quot;com.huawei.android.launcher.permission.READ_SETTINGS&quot; /&gt;
&lt;uses-permission android:name=&quot;com.huawei.android.launcher.permission.WRITE_SETTINGS&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.READ_APP_BADGE&quot; /&gt;
&lt;uses-permission android:name=&quot;com.oppo.launcher.permission.READ_SETTINGS&quot; /&gt;
&lt;uses-permission android:name=&quot;com.oppo.launcher.permission.WRITE_SETTINGS&quot; /&gt;
&lt;uses-permission android:name=&quot;me.everything.badger.permission.BADGE_COUNT_READ&quot; /&gt;
&lt;uses-permission android:name=&quot;me.everything.badger.permission.BADGE_COUNT_WRITE&quot; /&gt;

&lt;!-- Apex --&gt;
&lt;uses-permission android:name=&quot;com.anddoes.launcher.permission.UPDATE_COUNT&quot;/&gt;

&lt;!-- Default --&gt;
&lt;uses-permission android:name=&quot;com.android.launcher.permission.READ_SETTINGS&quot;/&gt;
&lt;uses-permission android:name=&quot;com.android.launcher.permission.WRITE_SETTINGS&quot;/&gt;
&lt;uses-permission android:name=&quot;com.android.launcher.permission.INSTALL_SHORTCUT&quot; /&gt;
&lt;uses-permission android:name=&quot;com.android.launcher.permission.UNINSTALL_SHORTCUT&quot; /&gt;

&lt;!-- HTC --&gt;
&lt;uses-permission android:name=&quot;com.htc.launcher.permission.READ_SETTINGS&quot; /&gt;
&lt;uses-permission android:name=&quot;com.htc.launcher.permission.UPDATE_SHORTCUT&quot; /&gt; 

&lt;!-- Samsung --&gt;
&lt;uses-permission android:name=&quot;com.sec.android.provider.badge.permission.READ&quot; /&gt;
&lt;uses-permission android:name=&quot;com.sec.android.provider.badge.permission.WRITE&quot; /&gt;

&lt;!-- Sony --&gt;
&lt;uses-permission android:name=&quot;com.sonyericsson.home.permission.BROADCAST_BADGE&quot; /&gt;
&lt;uses-permission android:name=&quot;com.sonymobile.home.permission.PROVIDER_INSERT_BADGE&quot; /&gt;
</code></pre>
<p>And finally, implement our interface:</p>
<pre><code class="language-csharp">public class NotificationCounterImplementation : INotificationCounter
{
	public void SetNotificationCount(int count)
	{
		ME.Leolin.Shortcutbadger.ShortcutBadger.ApplyCount(Application.Context, count);
    }
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/33/android.jpg" alt="Android" /></p>
<h2 id="iosmaccatalyst">iOS/MacCatalyst</h2>
<p>Apple's implementation is much simpler:</p>
<pre><code class="language-csharp">public class NotificationCounterImplementation : INotificationCounter
{
	public void SetNotificationCount(int count)
	{
		UNUserNotificationCenter.Current.RequestAuthorization(UNAuthorizationOptions.Badge, (r, e) =&gt;
		{
		});
		UIApplication.SharedApplication.ApplicationIconBadgeNumber = count;
	}
}
</code></pre>
<p>You request <code>NotificationCenter</code> permission to update the badge. After that, you can update the Badge number.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/33/apple.png" alt="iOS/MacCatalyst" /></p>
<h2 id="windows">Windows</h2>
<p>Windows doesn't require any permissions or additional packages:</p>
<pre><code class="language-csharp">public class NotificationCounterImplementation : INotificationCounter
{
	public void SetNotificationCount(int count)
	{
		var badgeUpdater =	BadgeUpdateManager.CreateBadgeUpdaterForApplication();
		if (count &lt;= 0)
		{
			badgeUpdater.Clear();
		}
		else
		{
			var badgeXml = BadgeUpdateManager.GetTemplateContent(BadgeTemplateType.BadgeNumber);

			var badgeElement = badgeXml.SelectSingleNode(&quot;/badge&quot;) as XmlElement;
			badgeElement?.SetAttribute(&quot;value&quot;, count.ToString());

			var badge = new BadgeNotification(badgeXml);
			badgeUpdater.Update(badge);
		}
	}
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/33/windows.gif" alt="Windows" /></p>
<h2 id="tizen">Tizen</h2>
<p>And last, but not least. Tizen has its own control to work with badges - <code>BadgeControl</code>.</p>
<p>But first, you need to set permission in <code>tizen-manifest.xml</code>:</p>
<pre><code class="language-xml">&lt;privilege&gt;http://tizen.org/privilege/notification&lt;/privilege&gt;
</code></pre>
<p>Then implement our interface:</p>
<pre><code class="language-csharp">public class NotificationCounterImplementation : INotificationCounter
{
	public void SetNotificationCount(int count)
	{
		var appId = Application.Current.ApplicationInfo.ApplicationId;
		if (count is 0)
		{
			BadgeControl.Remove(appId);
			return;
		}
		
		var badge = BadgeControl.Find(appId);
		if (badge is null)
		{
			badge = new Badge(appId, count);
			BadgeControl.Add(badge);
		}
		else
		{
			badge.Count = count;
			BadgeControl.Update(badge);
		}
	}
}
</code></pre>
<p>Tizen doesn't allow adding multiple badges to the same application, so you also need to check if the badge already exists and update it.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/33/tizen.png" alt="Tizen" /></p>
<h2 id="result">Result</h2>
<p>Now we can call our API and see the result:</p>
<pre><code class="language-csharp">var count = 1;
NotificationCounter.Default.SetNotificationCount(count);
</code></pre>
<p>The final code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiBadge" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Speech recognition with .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Speech-recognition-with-.NET-MAUI</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Speech-recognition-with-.NET-MAUI</guid>
      <description><![CDATA[Using a Speech recognizer to convert speech to text.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>If you feel alone and are looking for someone for a coffee talk, maybe that someone is in front of you. Yes, it is your device. 😉 Imagine, that you ask your device a question and it replies to you. This article is devoted to a built-in speech recognition mechanism.</p>
<p><code>.NET MAUI</code> already has a mechanism to convert text to speech. There is a method <code>SpeakAsync</code>, that receives a text you want to hear:</p>
<pre><code class="language-csharp">await TextToSpeech.Default.SpeakAsync(&quot;Hello world!&quot;);
</code></pre>
<p>Let's create a similar API, but for <code>Speech-To-Text</code>.</p>
<p>Starting from the interface:</p>
<pre><code class="language-csharp">public interface ISpeechToText
{
	Task&lt;string&gt; Listen(CultureInfo culture, IProgress&lt;string&gt;? recognitionResult, CancellationToken cancellationToken);
}
</code></pre>
<p>where <code>culture</code> is our spoken language, <code>recognitionResult</code> is an intermediate response from the <code>Recognizer</code>, <code>cancallationToken</code> is used for stopping the process. The result of the method returns the final string output from the <code>Recognizer</code>.</p>
<h2 id="android">Android</h2>
<p>Speech recognizer requires access to a microphone and the Internet, so add these lines to <code>AndroidManifest.xml</code>:</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;
</code></pre>
<p>Now let's implement our <code>ISpeechToText</code> interface:</p>
<pre><code class="language-csharp">public sealed class SpeechToTextImplementation : ISpeechToText
{
	private SpeechRecognitionListener? listener;
	private SpeechRecognizer? speechRecognizer;

	public async Task&lt;string&gt; Listen(CultureInfo culture, IProgress&lt;string&gt;? recognitionResult, CancellationToken cancellationToken)
	{
		var taskResult = new TaskCompletionSource&lt;string&gt;();
		listener = new SpeechRecognitionListener
		{
			Error = ex =&gt; taskResult.TrySetException(new Exception(&quot;Failure in speech engine - &quot; + ex)),
			PartialResults = sentence =&gt;
			{
				recognitionResult?.Report(sentence);
			},
			Results = sentence =&gt; taskResult.TrySetResult(sentence)
		};
		speechRecognizer = SpeechRecognizer.CreateSpeechRecognizer(Android.App.Application.Context);
		if (speechRecognizer is null)
		{
			throw new ArgumentException(&quot;Speech recognizer is not available&quot;);
		}

		speechRecognizer.SetRecognitionListener(listener);
		speechRecognizer.StartListening(CreateSpeechIntent(culture));
		await using (cancellationToken.Register(() =&gt;
		             {
			             StopRecording();
			             taskResult.TrySetCanceled();
		             }))
		{
			return await taskResult.Task;
		}
	}

	private void StopRecording()
	{
		speechRecognizer?.StopListening();
		speechRecognizer?.Destroy();
	}

	private Intent CreateSpeechIntent(CultureInfo culture)
	{
		var intent = new Intent(RecognizerIntent.ActionRecognizeSpeech);
		intent.PutExtra(RecognizerIntent.ExtraLanguagePreference, Java.Util.Locale.Default);
		var javaLocale = Java.Util.Locale.ForLanguageTag(culture.Name);
		intent.PutExtra(RecognizerIntent.ExtraLanguage, javaLocale);
		intent.PutExtra(RecognizerIntent.ExtraLanguageModel, RecognizerIntent.LanguageModelFreeForm);
		intent.PutExtra(RecognizerIntent.ExtraCallingPackage, Android.App.Application.Context.PackageName);
		intent.PutExtra(RecognizerIntent.ExtraPartialResults, true);

		return intent;
	}
}

public class SpeechRecognitionListener : Java.Lang.Object, IRecognitionListener
{
	public Action&lt;SpeechRecognizerError&gt;? Error { get; set; }
	public Action&lt;string&gt;? PartialResults { get; set; }
	public Action&lt;string&gt;? Results { get; set; }
	public void OnBeginningOfSpeech()
	{

	}

	public void OnBufferReceived(byte[]? buffer)
	{
	}

	public void OnEndOfSpeech()
	{
	}

	public void OnError([GeneratedEnum] SpeechRecognizerError error)
	{
		Error?.Invoke(error);
	}

	public void OnEvent(int eventType, Bundle? @params)
	{
	}

	public void OnPartialResults(Bundle? partialResults)
	{
		SendResults(partialResults, PartialResults);
	}

	public void OnReadyForSpeech(Bundle? @params)
	{
	}

	public void OnResults(Bundle? results)
	{
		SendResults(results, Results);
	}

	public void OnRmsChanged(float rmsdB)
	{
	}

	void SendResults(Bundle? bundle, Action&lt;string&gt;? action)
	{
		var matches = bundle?.GetStringArrayList(SpeechRecognizer.ResultsRecognition);
		if (matches == null || matches.Count == 0)
		{
			return;
		}

		action?.Invoke(matches.First());
	}
}
</code></pre>
<p>The main 2 lines here are:</p>
<pre><code class="language-csharp">speechRecognizer.SetRecognitionListener(listener);
speechRecognizer.StartListening(CreateSpeechIntent(culture));
</code></pre>
<p>The first line set the <code>SpeechRecognitionListener</code> that has a list of methods for different states of your speech recognition.</p>
<p>The second line creates speech intent, which has a configuration for speech recognizer and then starts the listening.</p>
<h2 id="iosmaccatalyst">iOS/MacCatalyst</h2>
<p>Speech recognizer requires access to a microphone, so add these lines to <code>Info.plist</code>:</p>
<pre><code class="language-xml">&lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt;  
&lt;string&gt;Recognize&lt;/string&gt;  
&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;  
&lt;string&gt;Microphone usage&lt;/string&gt;
</code></pre>
<p>Now let's implement our <code>ISpeechToText</code> interface:</p>
<pre><code class="language-csharp">public sealed class SpeechToTextImplementation : ISpeechToText
{
	private AVAudioEngine? audioEngine;
	private SFSpeechAudioBufferRecognitionRequest? liveSpeechRequest;
	private SFSpeechRecognizer? speechRecognizer;
	private SFSpeechRecognitionTask? recognitionTask;

	public async Task&lt;string&gt; Listen(CultureInfo culture, IProgress&lt;string&gt;? recognitionResult, CancellationToken cancellationToken)
	{
		speechRecognizer = new SFSpeechRecognizer(NSLocale.FromLocaleIdentifier(culture.Name));

		if (!speechRecognizer.Available)
		{
			throw new ArgumentException(&quot;Speech recognizer is not available&quot;);
		}

		if (SFSpeechRecognizer.AuthorizationStatus != SFSpeechRecognizerAuthorizationStatus.Authorized)
		{
			throw new Exception(&quot;Permission denied&quot;);
		}

		audioEngine = new AVAudioEngine();
		liveSpeechRequest = new SFSpeechAudioBufferRecognitionRequest();

#if MACCATALYST
		var audioSession = AVAudioSession.SharedInstance();
		audioSession.SetCategory(AVAudioSessionCategory.Record, AVAudioSessionCategoryOptions.DefaultToSpeaker);

		var mode = audioSession.AvailableModes.Contains(&quot;AVAudioSessionModeMeasurement&quot;) ? &quot;AVAudioSessionModeMeasurement&quot; : audioSession.AvailableModes.First();
		audioSession.SetMode(new NSString(mode), out var audioSessionError);
		if (audioSessionError != null)
		{
			throw new Exception(audioSessionError.LocalizedDescription);
		}

		audioSession.SetActive(true, AVAudioSessionSetActiveOptions.NotifyOthersOnDeactivation, out audioSessionError);
		if (audioSessionError is not null)
		{
			throw new Exception(audioSessionError.LocalizedDescription);
		}
#endif

		var node = audioEngine.InputNode;
		var recordingFormat = node.GetBusOutputFormat(new UIntPtr(0));
		node.InstallTapOnBus(new UIntPtr(0), 1024, recordingFormat, (buffer, _) =&gt;
		{
			liveSpeechRequest.Append(buffer);
		});

		audioEngine.Prepare();
		audioEngine.StartAndReturnError(out var error);

		if (error is not null)
		{
			throw new ArgumentException(&quot;Error starting audio engine - &quot; + error.LocalizedDescription);
		}

		var currentIndex = 0;
		var taskResult = new TaskCompletionSource&lt;string&gt;();
		recognitionTask = speechRecognizer.GetRecognitionTask(liveSpeechRequest, (result, err) =&gt;
		{
			if (err != null)
			{
				StopRecording();
				taskResult.TrySetException(new Exception(err.LocalizedDescription));
			}
			else
			{
				if (result.Final)
				{
					currentIndex = 0;
					StopRecording();
					taskResult.TrySetResult(result.BestTranscription.FormattedString);
				}
				else
				{
					for (var i = currentIndex; i &lt; result.BestTranscription.Segments.Length; i++)
					{
						var s = result.BestTranscription.Segments[i].Substring;
						currentIndex++;
						recognitionResult?.Report(s);
					}
				}
			}
		});

		await using (cancellationToken.Register(() =&gt;
		             {
			             StopRecording();
			             taskResult.TrySetCanceled();
		             }))
		{
			return await taskResult.Task;
		}
	}

	void StopRecording()
	{
		audioEngine?.InputNode.RemoveTapOnBus(new UIntPtr(0));
		audioEngine?.Stop();
		liveSpeechRequest?.EndAudio();
		recognitionTask?.Cancel();
	}
}
</code></pre>
<p>Similar to <code>Android</code> here we also create <code>SpeechRecognizer</code> and configure <code>AudioEngine</code>. By analogy with <code>SpeechRecognitionListener</code> Apple has a method <code>speechRecognizer.GetRecognitionTask</code> where the second <code>Action</code> parameter contains recognition results.</p>
<h2 id="windows">Windows</h2>
<p>Speech recognizer requires access to a microphone and the Internet (In case you choose online recognition), so add these lines to the <code>Capabilities</code> in <code>Package.appxmanifest</code>:</p>
<pre><code class="language-xml">&lt;Capability Name=&quot;internetClient&quot; /&gt;
&lt;DeviceCapability Name=&quot;microphone&quot; /&gt;
</code></pre>
<p>The same as with <code>Android</code> and <code>iOS</code> we implement <code>ISpeechToText</code> interface:</p>
<pre><code class="language-csharp">public sealed class SpeechToTextImplementation : ISpeechToText
{
	private SpeechRecognitionEngine? speechRecognitionEngine;
	private SpeechRecognizer? speechRecognizer;
	private string? recognitionText;

	public async Task&lt;string&gt; ListenOnline(CultureInfo culture, IProgress&lt;string&gt;? recognitionResult, CancellationToken cancellationToken)
	{
		recognitionText = string.Empty;
		speechRecognizer = new SpeechRecognizer(new Language(culture.IetfLanguageTag));
		await speechRecognizer.CompileConstraintsAsync();

		var taskResult = new TaskCompletionSource&lt;string&gt;();
		speechRecognizer.ContinuousRecognitionSession.ResultGenerated += (s, e) =&gt;
		{
			recognitionText += e.Result.Text;
			recognitionResult?.Report(e.Result.Text);
		};
		speechRecognizer.ContinuousRecognitionSession.Completed += (s, e) =&gt;
		{
			switch (e.Status)
			{
				case SpeechRecognitionResultStatus.Success:
					taskResult.TrySetResult(recognitionText);
					break;
				case SpeechRecognitionResultStatus.UserCanceled:
					taskResult.TrySetCanceled();
					break;
				default:
					taskResult.TrySetException(new Exception(e.Status.ToString()));
					break;
			}
		};
		await speechRecognizer.ContinuousRecognitionSession.StartAsync();
		await using (cancellationToken.Register(async () =&gt;
					 {
						 await StopRecording();
						 taskResult.TrySetCanceled();
					 }))
		{
			return await taskResult.Task;
		}
	}

	private async Task StopRecording()
	{
		try
		{
			await speechRecognizer?.ContinuousRecognitionSession.StopAsync();
		}
		catch
		{
			// ignored. Recording may be already stopped
		}
	}
}
</code></pre>
<h2 id="sample">Sample</h2>
<p>And the most pleasant step to check that everything works:</p>
<pre><code class="language-csharp">try
{
	RecognitionText = await speechToText.Listen(CultureInfo.GetCultureInfo(&quot;en-us&quot;), new Progress&lt;string&gt;(partialText =&gt;
		{
			RecognitionText += partialText + &quot; &quot;;
		}), cancellationToken);
}
catch (Exception ex)
{
	await Toast.Make(ex.Message).Show(cancellationToken);
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/32/recognition-windows.gif" alt="Windows recognition" /></p>
<p>The final code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiSpeech" target="_blank">GitHub</a>.</p>
<p>Happy coding and never be alone!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating dynamic floating action button]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-dynamic-floating-action-button</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-dynamic-floating-action-button</guid>
      <description><![CDATA[Create a dynamic floating action button using an Expander control.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>It's November and that means it's time for releases! Microsoft releases .NET 7 - the fastest .NET ever! .NET MAUI Team presents a new .NET MAUI release with Maps, many desktop features, and bug fixes. And of course, the .NET MAUI Community team has 3 releases!!! 1.4.0 adds DockLayout and Expander, 2.0.0 adds Tizen support, 3.0.0 adds .NET 7 support.</p>
<p>In this article, we'll create a dynamic floating action button using a new Expander control.</p>
<p>As usual, you need to install the <code>.NET MAUI CommunityToolkit</code> NuGet package.</p>
<p>The <code>Expander</code> control provides an expandable container to host any content. The control has two main properties to store your content: <code>Header</code> and <code>Content</code>.</p>
<p>Let's create a floating action button.</p>
<p>The floating action button is usually displayed in the bottom right corner, so we put it in <code>Grid</code> and set <code>VerticalOptions</code> and <code>HorizontalOptions</code> to <code>End</code>. <code>Expander</code> can be expanded in 2 directions: <code>Up</code> and <code>Down</code>. Because our floating action button is at the bottom of the page, let's set the expander direction as <code>Up</code>. We should receive such <code>XAML</code>:</p>
<pre><code class="language-xml">&lt;Grid&gt;

	&lt;views:Expander HorizontalOptions=&quot;End&quot;
				     VerticalOptions=&quot;End&quot;
				     Margin=&quot;30&quot;
				     Direction=&quot;Up&quot;&gt;
		&lt;views:Expander.Header&gt;
			...
		&lt;/views:Expander.Header&gt;
		&lt;views:Expander.Content&gt;
			...
		&lt;/views:Expander.Content&gt;
	&lt;/views:Expander&gt;
&lt;/Grid&gt;
</code></pre>
<p>Now let's set add the button content. For that we set the expander <code>Header</code> property with the next <code>XAML</code>:</p>
<pre><code class="language-xml">&lt;ImageButton
		BackgroundColor=&quot;Gray&quot;
		CornerRadius=&quot;20&quot;
		HorizontalOptions=&quot;End&quot;
		VerticalOptions=&quot;End&quot;&gt;
	&lt;ImageButton.Source&gt;
		&lt;FontImageSource
				FontFamily=&quot;FASolid&quot;
				Glyph=&quot;&amp;#x2b;&quot; /&gt;
	&lt;/ImageButton.Source&gt;
&lt;/ImageButton&gt;
</code></pre>
<p>Each time you click on it, Expander content will toggle.</p>
<p>Now let's add the dynamic content. Add the next code to the expander <code>Content</code>:</p>
<pre><code class="language-xml">&lt;VerticalStackLayout Spacing=&quot;20&quot;&gt;
	&lt;ImageButton
			Clicked=&quot;OnFolderClicked&quot;
			HorizontalOptions=&quot;End&quot;&gt;
		&lt;ImageButton.Source&gt;
			&lt;FontImageSource
					FontFamily=&quot;FASolid&quot;
					Glyph=&quot;&amp;#xf07b;&quot; /&gt;
		&lt;/ImageButton.Source&gt;
	&lt;/ImageButton&gt;

	&lt;ImageButton
			Clicked=&quot;OnFileClicked&quot;
			HorizontalOptions=&quot;End&quot;&gt;
		&lt;ImageButton.Source&gt;
			&lt;FontImageSource
					FontFamily=&quot;FASolid&quot;
					Glyph=&quot;&amp;#xf15b;&quot; /&gt;
		&lt;/ImageButton.Source&gt;
	&lt;/ImageButton&gt;
&lt;/VerticalStackLayout&gt;
</code></pre>
<p>That's it. If you run the app, you should see the floating action button. By clicking on it, our folder and file buttons should appear above the action button.</p>
<p>You can even go further and add <code>Expander</code> in another <code>Expander</code>. The full <code>XAML</code> can look like this:</p>
<pre><code class="language-xml">&lt;Grid&gt;

	&lt;views:Expander HorizontalOptions=&quot;End&quot;
				     VerticalOptions=&quot;End&quot;
				     Margin=&quot;30&quot;
				     Direction=&quot;Up&quot;&gt;
		&lt;views:Expander.Header&gt;
			&lt;ImageButton
					BackgroundColor=&quot;Gray&quot;
					CornerRadius=&quot;20&quot;
					HorizontalOptions=&quot;End&quot;
					VerticalOptions=&quot;End&quot;&gt;
				&lt;ImageButton.Source&gt;
					&lt;FontImageSource
							FontFamily=&quot;FASolid&quot;
							Glyph=&quot;&amp;#x2b;&quot; /&gt;
				&lt;/ImageButton.Source&gt;
			&lt;/ImageButton&gt;
		&lt;/views:Expander.Header&gt;
		&lt;views:Expander.Content&gt;
			&lt;VerticalStackLayout Spacing=&quot;20&quot;&gt;
				&lt;ImageButton
						Clicked=&quot;OnFolderClicked&quot;
						HorizontalOptions=&quot;End&quot;&gt;
					&lt;ImageButton.Source&gt;
						&lt;FontImageSource
								FontFamily=&quot;FASolid&quot;
								Glyph=&quot;&amp;#xf07b;&quot; /&gt;
					&lt;/ImageButton.Source&gt;
				&lt;/ImageButton&gt;
				&lt;views:Expander Direction=&quot;Up&quot;
								Margin=&quot;0,0,0,10&quot;&gt;
					&lt;views:Expander.Header&gt;
						&lt;ImageButton
							HorizontalOptions=&quot;End&quot;
							VerticalOptions=&quot;Center&quot;&gt;
							&lt;ImageButton.Source&gt;
								&lt;FontImageSource
									FontFamily=&quot;FASolid&quot;
									Glyph=&quot;&amp;#xf15b;&quot; /&gt;
							&lt;/ImageButton.Source&gt;
						&lt;/ImageButton&gt;
					&lt;/views:Expander.Header&gt;
					&lt;views:Expander.Content&gt;
						&lt;VerticalStackLayout Margin=&quot;0,0,0,10&quot; Spacing=&quot;10&quot;&gt;
							&lt;ImageButton
									Clicked=&quot;OnWordClicked&quot;
									HorizontalOptions=&quot;End&quot;&gt;
								&lt;ImageButton.Source&gt;
									&lt;FontImageSource
											FontFamily=&quot;FASolid&quot;
											Glyph=&quot;&amp;#xf1c2;&quot; /&gt;
								&lt;/ImageButton.Source&gt;
							&lt;/ImageButton&gt;
							&lt;ImageButton
									Clicked=&quot;OnExcelClicked&quot;
									HorizontalOptions=&quot;End&quot;&gt;
								&lt;ImageButton.Source&gt;
									&lt;FontImageSource
											FontFamily=&quot;FASolid&quot;
											Glyph=&quot;&amp;#xf1c3;&quot; /&gt;
								&lt;/ImageButton.Source&gt;
							&lt;/ImageButton&gt;
						&lt;/VerticalStackLayout&gt;
					&lt;/views:Expander.Content&gt;
				&lt;/views:Expander&gt;
			&lt;/VerticalStackLayout&gt;
		&lt;/views:Expander.Content&gt;
	&lt;/views:Expander&gt;
&lt;/Grid&gt;
</code></pre>
<p>More details on how to set up and use Expander can be found on the <a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui/views/expander" target="_blank">Microsoft Docs</a>.</p>
<p>The final code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/DynamicFab" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Customize map pins in .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Customize-map-pins-in-.NET-MAUI</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Customize-map-pins-in-.NET-MAUI</guid>
      <description><![CDATA[Customize map pins in .NET MAUI.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>.NET MAUI's next major release is closer and closer. It brings a lot of bug fixes and new features. One of them is Maps control.</p>
<p>This article is devoted to the customization of standard map pins. We want to display a custom image instead of a standard pin icon.</p>
<p>Let's start!</p>
<h2 id="precondition">Precondition</h2>
<p>Start with installing NuGet package:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.Maui.Controls.Maps&quot; Version=&quot;7.0.59&quot;/&gt;
</code></pre>
<h2 id="custom-pin">Custom Pin</h2>
<p>First of all, we need to create a new control:</p>
<pre><code class="language-csharp">public class CustomPin : Pin
{
	public static readonly BindableProperty ImageSourceProperty = BindableProperty.Create(nameof(ImageSource), typeof(ImageSource), typeof(CustomPin);

	public ImageSource? ImageSource
	{
		get =&gt; (ImageSource?)GetValue(ImageSourceProperty);
		set =&gt; SetValue(ImageSourceProperty, value);
	}
}
</code></pre>
<p>This control has a bindable property <code>ImageSource</code> that allows us to choose any image source to store our pin icon.</p>
<h2 id="customize-pin-on-android">Customize pin on Android</h2>
<p>To be able to add, update, and remove map elements we need to store them in memory. To do that, let's create a <code>CustomMapHandler</code>:</p>
<pre><code class="language-csharp">public class CustomMapHandler : MapHandler
{
	public static readonly IPropertyMapper&lt;IMap, IMapHandler&gt; CustomMapper =
		new PropertyMapper&lt;IMap, IMapHandler&gt;(Mapper)
		{
			[nameof(IMap.Pins)] = MapPins,
		};

	public CustomMapHandler() : base(CustomMapper, CommandMapper)
	{
	}

	public CustomMapHandler(IPropertyMapper? mapper = null, CommandMapper? commandMapper = null) : base(
		mapper ?? CustomMapper, commandMapper ?? CommandMapper)
	{
	}

	public List&lt;Marker&gt; Markers { get; } = new();

	protected override void ConnectHandler(MapView platformView)
	{
		base.ConnectHandler(platformView);
		var mapReady = new MapCallbackHandler(this);
		PlatformView.GetMapAsync(mapReady);
	}

	private static new void MapPins(IMapHandler handler, IMap map)
	{
		if (handler is CustomMapHandler mapHandler)
		{
			foreach (var marker in mapHandler.Markers)
			{
				marker.Remove();
			}
			
			mapHandler.AddPins(map.Pins);
		}
	}

	private void AddPins(IEnumerable&lt;IMapPin&gt; mapPins)
	{
		if (Map is null || MauiContext is null)
		{
			return;
		}

		foreach (var pin in mapPins)
		{
			var pinHandler = pin.ToHandler(MauiContext);
			if (pinHandler is IMapPinHandler mapPinHandler)
			{
				var markerOption = mapPinHandler.PlatformView;
				if (pin is CustomPin cp)
				{
					cp.ImageSource.LoadImage(MauiContext, result =&gt;
					{
						if (result?.Value is BitmapDrawable bitmapDrawable)
						{
							markerOption.SetIcon(BitmapDescriptorFactory.FromBitmap(bitmapDrawable.Bitmap));
						}

						AddMarker(Map, pin, Markers, markerOption);
					});
				}
				else
				{
					AddMarker(Map, pin, Markers, markerOption);
				}
			}
		}
	}

	private static void AddMarker(GoogleMap map, IMapPin pin, List&lt;Marker&gt; markers, MarkerOptions markerOption)
	{
		var marker = map.AddMarker(markerOption);
		pin.MarkerId = marker.Id;
		markers.Add(marker);
	}
}
</code></pre>
<p>The next step is notifying the handler that our pins are updated. We should do it when the map is ready:</p>
<pre><code class="language-csharp">class MapCallbackHandler : Java.Lang.Object, IOnMapReadyCallback
{
	private readonly IMapHandler mapHandler;

	public MapCallbackHandler(IMapHandler mapHandler)
	{
		this.mapHandler = mapHandler;
	}

	public void OnMapReady(GoogleMap googleMap)
	{
		mapHandler.UpdateValue(nameof(IMap.Pins));
	}
}
</code></pre>
<h2 id="customize-pin-on-iosmaccatalyst">Customize pin on iOS/MacCatalyst</h2>
<p>iOS/MacCatalyst requires a bit more customization.</p>
<p>First, we need to create a new class <code>CustomAnnotation</code>. It stores an <code>UIImage</code> of our pin icon.</p>
<pre><code class="language-csharp">public class CustomAnnotation : MKPointAnnotation
{
	public Guid Identifier { get; init; }
	public UIImage? Image { get; init; }
	public required IMapPin Pin { get; init; }
}
</code></pre>
<p>Then create the <code>CustomMapHandler</code>:</p>
<pre><code class="language-csharp">public class CustomMapHandler : MapHandler
{
	private static UIView? lastTouchedView;
	public static readonly IPropertyMapper&lt;IMap, IMapHandler&gt; CustomMapper =
		new PropertyMapper&lt;IMap, IMapHandler&gt;(Mapper)
		{
			[nameof(IMap.Pins)] = MapPins,
		};

	public CustomMapHandler() : base(CustomMapper, CommandMapper)
	{
	}

	public CustomMapHandler(IPropertyMapper? mapper = null, CommandMapper? commandMapper = null) : base(
		mapper ?? CustomMapper, commandMapper ?? CommandMapper)
	{
	}

	public List&lt;IMKAnnotation&gt; Markers { get; } = new();

	protected override void ConnectHandler(MauiMKMapView platformView)
	{
		base.ConnectHandler(platformView);
		platformView.GetViewForAnnotation += GetViewForAnnotations;
	}

	private static void OnCalloutClicked(IMKAnnotation annotation)
	{
		var pin = GetPinForAnnotation(annotation);
		if (lastTouchedView is MKAnnotationView)
			return;
		pin?.SendInfoWindowClick();
	}

	private static MKAnnotationView GetViewForAnnotations(MKMapView mapView, IMKAnnotation annotation)
	{
		MKAnnotationView annotationView;
		if (annotation is CustomAnnotation customAnnotation)
		{
			annotationView = mapView.DequeueReusableAnnotation(customAnnotation.Identifier.ToString()) ??
							 new MKAnnotationView(annotation, customAnnotation.Identifier.ToString());
			annotationView.Image = customAnnotation.Image;
			annotationView.CanShowCallout = true;
		}
		else if (annotation is MKPointAnnotation)
		{
			annotationView = mapView.DequeueReusableAnnotation(&quot;defaultPin&quot;) ??
							 new MKMarkerAnnotationView(annotation, &quot;defaultPin&quot;);
			annotationView.CanShowCallout = true;
		}
		else
		{
			annotationView = new MKUserLocationView(annotation, null);
		}

		var result = annotationView ?? new MKAnnotationView(annotation, null);
		AttachGestureToPin(result, annotation);
		return result;
	}

	static void AttachGestureToPin(MKAnnotationView mapPin, IMKAnnotation annotation)
	{
		var recognizers = mapPin.GestureRecognizers;

		if (recognizers != null)
		{
			foreach (var r in recognizers)
			{
				mapPin.RemoveGestureRecognizer(r);
			}
		}

		var recognizer = new UITapGestureRecognizer(g =&gt; OnCalloutClicked(annotation))
		{
			ShouldReceiveTouch = (gestureRecognizer, touch) =&gt;
			{
				lastTouchedView = touch.View;
				return true;
			}
		};

		mapPin.AddGestureRecognizer(recognizer);
	}

	static IMapPin? GetPinForAnnotation(IMKAnnotation? annotation)
	{
		if (annotation is CustomAnnotation customAnnotation)
		{
			return customAnnotation.Pin;
		}

		return null;
	}

	private static new void MapPins(IMapHandler handler, IMap map)
	{
		if (handler is CustomMapHandler mapHandler)
		{
			foreach (var marker in mapHandler.Markers)
			{
				mapHandler.PlatformView.RemoveAnnotation(marker);
			}

			mapHandler.Markers.Clear();
			mapHandler.AddPins(map.Pins);
		}
	}

	private void AddPins(IEnumerable&lt;IMapPin&gt; mapPins)
	{
		if (MauiContext is null)
		{
			return;
		}

		foreach (var pin in mapPins)
		{
			var pinHandler = pin.ToHandler(MauiContext);
			if (pinHandler is IMapPinHandler mapPinHandler)
			{
				var markerOption = mapPinHandler.PlatformView;
				if (pin is CustomPin cp)
				{
					cp.ImageSource.LoadImage(MauiContext, result =&gt;
					{
						markerOption = new CustomAnnotation()
						{
							Identifier = cp.Id,
							Image = result?.Value,
							Title = pin.Label,
							Subtitle = pin.Address,
							Coordinate = new CLLocationCoordinate2D(pin.Location.Latitude, pin.Location.Longitude),
							Pin = cp
						};

						AddMarker(PlatformView, pin, Markers, markerOption);
					});
				}
				else
				{
					AddMarker(PlatformView, pin, Markers, markerOption);
				}
			}
		}
	}

	private static void AddMarker(MauiMKMapView map, IMapPin pin, List&lt;IMKAnnotation&gt; markers, IMKAnnotation annotation)
	{
		map.AddAnnotation(annotation);
		pin.MarkerId = annotation;
		markers.Add(annotation);
	}
}
</code></pre>
<p>It's responsible for loading images and adding an annotation to the map. Later, when annotation should be displayed, the <code>GetViewForAnnotations</code> gets the annotation view and displays it on map.</p>
<p>The final step is registering our handlers:</p>
<pre><code class="language-csharp">public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder.UseMauiApp&lt;App&gt;().UseMauiMaps();
		builder.ConfigureMauiHandlers(handlers =&gt;
		{
#if ANDROID || IOS || MACCATALYST
			handlers.AddHandler&lt;Microsoft.Maui.Controls.Maps.Map, CustomMapHandler&gt;();
#endif
		});

		return builder.Build();
	}
}
</code></pre>
<p>That's all we need to customize .NET MAUI Map pins. Run the application and see the result:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/30/android-pins.png" alt=".NET MAUI Custom pins" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiMaps" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Prepare .NET MAUI application with CommunityToolkit.MAUI to release]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Prepare-.NET-MAUI-application-with-CommunityToolkit.MAUI-to-release</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Prepare-.NET-MAUI-application-with-CommunityToolkit.MAUI-to-release</guid>
      <description><![CDATA[The article describes how to configure .NET MAUI CommunityToolkit to avoid crashes at runtime.]]></description>
      <content:encoded><![CDATA[<p><code>FadeAnimation</code>, <code>GravatarImageSource</code>, <code>StatusBar color</code>. All these features are available with <code>CommunityToolkit.MAUI</code> <em>1.3.0</em>. And that's not all.</p>
<p>Usually, to start working with the <code>.NET MAUI Community Toolkit</code>, you need to initialize it with <code>MauiAppBuilder</code> by calling the <code>UseMauiCommunityToolkit</code> method:</p>
<pre><code class="language-csharp">var builder = MauiApp.CreateBuilder();
builder.UseMauiApp&lt;App&gt;();
builder.UseMauiCommunityToolkit();
</code></pre>
<p>Starting from this release you can get even more control over the <code>ComminityToolkit.Maui</code> library and <code>CommunityToolkit.Maui.Options</code> can help you with that:</p>
<pre><code class="language-csharp">var builder = MauiApp.CreateBuilder();
builder.UseMauiApp&lt;App&gt;();
builder.UseMauiCommunityToolkit(options =&gt;
{
	options.SetShouldSuppressExceptionsInAnimations(true);
	options.SetShouldSuppressExceptionsInBehaviors(true);
	options.SetShouldSuppressExceptionsInConverters(true);
});
</code></pre>
<p>There are 3 new options available right now to prevent your application from crashing.</p>
<h2 id="setshouldsuppressexceptionsinconverters">SetShouldSuppressExceptionsInConverters</h2>
<p>When set to true, if a converter is implementing <code>CommunityToolkit.Maui.Converters.BaseConverter</code> throws an <code>Exception</code>, the <code>Exception</code> will be caught and a predetermined default value will be returned.</p>
<p>A default value can be set from both the <code>Convert</code> and <code>ConvertBack</code> methods using the <code>DefaultConvertReturnValue</code> and <code>DefaultConvertBackReturnValue</code> properties respectively.</p>
<pre><code class="language-XML">&lt;ContentPage.Resources&gt;
    &lt;SolidColorBrush x:Key=&quot;TrueColorBrush&quot;&gt;Green&lt;/SolidColorBrush&gt;
    &lt;SolidColorBrush x:Key=&quot;FalseColorBrush&quot;&gt;Red&lt;/SolidColorBrush&gt;
    &lt;mct:BoolToObjectConverter x:Key=&quot;BoolToColorBrushConverter&quot; 
                                TrueObject=&quot;{StaticResource TrueColorBrush}&quot; 
                                FalseObject=&quot;{StaticResource FalseColorBrush}&quot;
                                DefaultConvertReturnValue=&quot;{StaticResource FalseColorBrush}&quot;
                                DefaultConvertBackReturnValue=&quot;False&quot;/&gt;
&lt;/ContentPage.Resources&gt;
</code></pre>
<h2 id="setshouldsuppressexceptionsinanimations">SetShouldSuppressExceptionsInAnimations</h2>
<p>Similar to the <code>SetShouldSuppressExceptionsInConverters</code>, when set to true, if an <code>Animation</code> is implementing <code>CommunityToolkit.Maui.Behaviors.AnimationBehavior</code> throws an Exception, the Exception will be caught.</p>
<p>With this option, you don't need to worry about unexpected crashes of your application.</p>
<h2 id="setshouldsuppressexceptionsinbehaviors">SetShouldSuppressExceptionsInBehaviors</h2>
<p>The last but not least option is for behaviors. When set to true, if a <code>Behavior</code> is implementing <code>CommunityToolkit.Maui.Behaviors.BaseBehavior</code> throws an <code>Exception</code>, the <code>Exception</code> will be caught.</p>
<h2 id="release-mode-recommendation">Release mode recommendation</h2>
<p>All that settings are disabled by default. it happened because of back-compatibility and easier migration for Xamarin users.</p>
<p>It is definitely up to the developer, to enable or disable these options in the app, but I recommend the next code:</p>
<pre><code class="language-csharp">var builder = MauiApp.CreateBuilder();
builder.UseMauiApp&lt;App&gt;();
#if DEBUG
builder.UseMauiCommunityToolkit();
#else
builder.UseMauiCommunityToolkit(options =&gt;
{
	options.SetShouldSuppressExceptionsInAnimations(true);
	options.SetShouldSuppressExceptionsInBehaviors(true);
	options.SetShouldSuppressExceptionsInConverters(true);
});
#endif
</code></pre>
<p>In <code>Debug</code> we can enable all exceptions and notify the developer at the earliest stage if something goes wrong.</p>
<p>In all other cases, we should avoid application crashes and try to notify users in a friendlier form.</p>
<p>More details can be found on the <a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui/get-started" target="_blank">Microsoft Docs</a>.</p>
<p>Happy coding without crashes and bugs!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Migrate the deprecated OnBackPressed function in .NET MAUI Android application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Migrate-the-deprecated-OnBackPressed-function-in-.NET-MAUI-Android-application</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Migrate-the-deprecated-OnBackPressed-function-in-.NET-MAUI-Android-application</guid>
      <description><![CDATA[This article is devoted to the new API added in Android 13, that adds support to predictive back gestures.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>You must have noticed that in many Android apps, you can exit only after double-clicking on the back button. A toast message appears when you press the back button once. When you simultaneously press the back button you exit your apps.</p>
<p>This is usually implemented in <code>MainActivity</code> by overriding the <code>OnBackPressed</code> method. The code below demonstrates the possible implementation:</p>
<pre><code class="language-csharp">public override void OnBackPressed()
{
	var navigation = Microsoft.Maui.Controls.Application.Current?.MainPage?.Navigation;
	if (navigation is null || navigation.NavigationStack.Count &gt; 1 || navigation.ModalStack.Count &gt; 0)
	{
		base.OnBackPressed();
	}
	else
	{
		const int delay = 2000;
		if (backPressed + delay &gt; DateTimeOffset.UtcNow.ToUnixTimeMilliseconds())
		{
			FinishAndRemoveTask();
			Process.KillProcess(Process.MyPid());
		}
		else
		{
			Toast.MakeText(ApplicationContext, &quot;Close&quot;, ToastLength.Long)?.Show();
			backPressed = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
		}
	}
}
</code></pre>
<p>This worked great before Android 13 (SDK version 33). Starting from this release, <code>OnBackPressed</code> is deprecated.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/28/2.png" alt="Deprecated " /></p>
<p>So what is the alternative?</p>
<p>In Android 13, the new API is implemented to support predictive back gestures.</p>
<p>This feature will let a user preview the result of a Back gesture before they fully complete it - basically allowing them to decide whether to stay in the current view or complete the action and return to the Home screen, previous activity or a previously visited page in a WebView.
To support the predictive back gesture, Android 13 adds the new window-level <code>OnBackInvokedCallback</code> platform API. This API replaces the <code>KeyEvent.KEYCODE_BACK API</code> and all platform classes that use <code>OnBackPressed</code>.</p>
<p>Let's start with implementing <code>OnBackPressedCallback</code>:</p>
<pre><code class="language-csharp">private class BackPress : OnBackPressedCallback
{
	private readonly Activity activity;
	private long backPressed;

	public BackPress(Activity activity) : base(true)
	{
		this.activity = activity;
	}

	public override void HandleOnBackPressed()
	{
		var navigation = Microsoft.Maui.Controls.Application.Current?.MainPage?.Navigation;
		if (navigation is not null &amp;&amp; navigation.NavigationStack.Count &lt;= 1 &amp;&amp; navigation.ModalStack.Count &lt;= 0)
		{
			const int delay = 2000;
			if (backPressed + delay &gt; DateTimeOffset.UtcNow.ToUnixTimeMilliseconds())
			{
				activity.FinishAndRemoveTask();
				Process.KillProcess(Process.MyPid());
			}
			else
			{
				Toast.MakeText(activity, &quot;Close&quot;, ToastLength.Long)?.Show();
				backPressed = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
			}
		}
	}
}
</code></pre>
<p>You need to override the method <code>HandleOnBackPressed</code>. The content of this method is pretty much the same as in <code>OnBackPressed</code>.</p>
<p>In the final step, we need to add this callback. It can be done by overriding <code>OnCreate</code> method of <code>MainActivity</code>:</p>
<pre><code class="language-csharp">protected override void OnCreate(Bundle? savedInstanceState)
{
	base.OnCreate(savedInstanceState);
	OnBackPressedDispatcher.AddCallback(this, new BackPress(this));
}
</code></pre>
<p><code>OnBackPressedDispatcher</code> dispatches system back button pressed events to one or more <code>OnBackPressedCallback</code> instances.</p>
<p>Here is the result:
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/28/animation.gif" alt="Back pressed in Android 33" /></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Create custom animations using .NET MAUI CommunityToolkit]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Create-custom-animations-using-.NET-MAUI-CommunityToolkit</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Create-custom-animations-using-.NET-MAUI-CommunityToolkit</guid>
      <description><![CDATA[This article describes how to leverage .NET MAUI CommunityToolkit BaseAnimation and AnimationBehavior to create and apply animation.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This article describes how to create animations using .NET MAUI CommunityToolkit simply.</p>
<h2 id="setup-nuget-package">Setup NuGet package</h2>
<p>Let's start with installing the NuGet package. In the Solution Explorer panel, right-click on your project name and select <strong>Manage NuGet Packages</strong>. Search and install for <strong>CommunityToolkit.Maui</strong>. After installation enable <code>CommunityToolkit.Maui</code> in <code>MauiProgram.cs</code>:</p>
<pre><code class="language-csharp">var builder = MauiApp.CreateBuilder();
builder.UseMauiApp&lt;App&gt;();
builder.UseMauiCommunityToolkit();
</code></pre>
<h2 id="baseanimation">BaseAnimation</h2>
<p>.NET MAUI CommunityToolkit introduces <code>BaseAnimation</code> and <code>BaseAnimation&lt;IAnimatable&gt;</code> abstract classes for animation types to inherit. They already contain <code>Length</code> and <code>Easing</code> bindable properties and the abstract method <code>Animate</code>.</p>
<h2 id="create-simple-animation">Create simple animation</h2>
<p>Assume you have a <code>VisualElement</code> that looks like the sun. Like in cartoons the sun scales and rotates at 360º. Let's animate it.</p>
<pre><code class="language-csharp">public class SunAnimation : CommunityToolkit.Maui.Animations.BaseAnimation
{
	Animation Sun(VisualElement view)
	{
		var animation = new Animation();
		
		animation.WithConcurrent((f) =&gt; view.Rotation = f, 0, 360, Microsoft.Maui.Easing.Linear);
		animation.WithConcurrent((f) =&gt; view.Scale = f, 1, 1.4, Microsoft.Maui.Easing.Linear);

		return animation;
	}

	public override Task Animate(VisualElement view)
	{
		view.Animate(&quot;Sun&quot;, Sun(view), 16, Length, repeat:() =&gt; true);
		return Task.CompletedTask;
	}
}
</code></pre>
<p>Let's run our animation:</p>
<pre><code class="language-csharp">var animation = new SunAnimation();
animation.Length = 5000;
animation.Animate(Sun);

// Let's now apply this animation to the wheel, which is also a VisualElement:
animation.Animate(Wheel)
</code></pre>
<h2 id="create-an-animation-for-a-custom-element">Create an animation for a custom element</h2>
<p>Assume you have a custom element called <code>Cloud</code>. Clouds can fly in the sky and can scale. Let's animate them.</p>
<pre><code class="language-csharp">public class CloudAnimation : CommunityToolkit.Maui.Animations.BaseAnimation&lt;Cloud&gt;
{
	Animation Cloud(Cloud view)
	{
		var animation = new Animation();

		animation.WithConcurrent((f) =&gt; view.TranslationX = f, view.TranslationX - 500, view.TranslationX + 1200, Microsoft.Maui.Easing.Linear);
		animation.WithConcurrent((f) =&gt; view.TranslationY = f, view.TranslationY, view.TranslationY + 300, Microsoft.Maui.Easing.Linear);
		animation.WithConcurrent((f) =&gt; view.Scale = f, 1, 1.5, Microsoft.Maui.Easing.Linear);

		return animation;
	}

	public override Task Animate(Cloud view)
	{
		view.Animate(&quot;Cloud&quot;, Cloud(view), 16, Length, repeat: () =&gt; true);
		return Task.CompletedTask;
	}
}
</code></pre>
<p>In this example, we apply animation explicitly to the <code>Cloud</code> control. We define an animation to concurrently run 3 animations: TransitionX, TransitionY, and Scale. Then, in method <code>Animate</code>, we run this Animation for our view.</p>
<h2 id="animationbehavior">AnimationBehavior</h2>
<p>The examples above showed how to run animation from C# code. What if I want to run it from Xaml? .NET MAUI CommunityToolkit has a tool for it. It's an <code>AnimationBehavior</code>.
The <code>AnimationBehavior</code> is a behavior that shows an animation on any <code>VisualElement</code> when the <code>AnimateCommand</code> is called or when the user taps on the control.</p>
<pre><code class="language-xaml">&lt;Cloud&gt;
	&lt;Cloud.Behaviors&gt;
		&lt;toolkit:AnimationBehavior&gt;
			&lt;toolkit:AnimationBehavior.AnimationType&gt;
				&lt;animations:CloudAnimation /&gt;
			&lt;/toolkit:AnimationBehavior.AnimationType&gt;
		&lt;/toolkit:AnimationBehavior&gt;
	&lt;/Cloud.Behaviors&gt;
&lt;/Cloud&gt;
</code></pre>
<p>That's it.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiAnimation" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating a bottom sheet using .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-a-bottom-sheet-using-.NET-MAUI</link>
      <pubDate>Fri, 02 Sep 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-a-bottom-sheet-using-.NET-MAUI</guid>
      <description><![CDATA[Creating a bottom sheet using native dialogs.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>In this article, we will talk about bottom sheets. Bottom sheets are surfaces containing supplementary content and are anchored to the bottom of the screen.</p>
<blockquote>
<p><em>You may have already seen similar articles where the implementation is based on AbsoluteLayout or Grid. Those implementations work great. The purpose of this article is to propose a different implementation using native controls.</em></p>
</blockquote>
<p>So let's start with creating a new .NET MAUI application.</p>
<p>For <code>Android</code> we'll use <code>BottomSheetDialog</code>. It is a base class for Dialogs styled as a bottom sheet.</p>
<p>Create a new class <code>PageExtensions</code> in <code>Platforms\Android</code> folder with the next content:</p>
<pre><code class="language-csharp">public static partial class PageExtensions
{
	public static void ShowBottomSheet(this Page page, IView bottomSheetContent, bool dimDismiss)
	{
		var bottomSheetDialog = new BottomSheetDialog(Platform.CurrentActivity?.Window?.DecorView.FindViewById(Android.Resource.Id.Content)?.RootView?.Context);
		bottomSheetDialog.SetContentView(bottomSheetContent.ToPlatform(page.Handler?.MauiContext ?? throw new Exception(&quot;MauiContext is null&quot;)));
		bottomSheetDialog.Behavior.Hideable = dimDismiss;
		bottomSheetDialog.Behavior.FitToContents = true;
		bottomSheetDialog.Show();
	}
}
</code></pre>
<p>For <code>iOS/MacCatalyst</code> we'll use <code>UISheetPresentationController</code>. It is a presentation controller that manages the appearance and behavior of a sheet. It is available since iOS 15.
Create a new class <code>PageExtensions</code> in <code>Platforms\iOS</code> folder or <code>Platforms\MacCatalyst</code> folder respectively with the next content:</p>
<pre><code class="language-csharp">public static partial class PageExtensions
{
	public static void ShowBottomSheet(this Page page, IView bottomSheetContent, bool dimDismiss)
	{
		var mauiContext = page.Handler?.MauiContext ?? throw new Exception(&quot;MauiContext is null&quot;);
		var viewController = page.ToUIViewController(mauiContext);
		var viewControllerToPresent = bottomSheetContent.ToUIViewController(mauiContext);

		var sheet = viewControllerToPresent.SheetPresentationController;
		if (sheet is not null)
		{
			sheet.Detents = new[]
			{
				UISheetPresentationControllerDetent.CreateMediumDetent(),
				UISheetPresentationControllerDetent.CreateLargeDetent(),
			};
			sheet.LargestUndimmedDetentIdentifier = dimDismiss ? UISheetPresentationControllerDetentIdentifier.Unknown : UISheetPresentationControllerDetentIdentifier.Medium;
			sheet.PrefersScrollingExpandsWhenScrolledToEdge = false;
			sheet.PrefersEdgeAttachedInCompactHeight = true;
			sheet.WidthFollowsPreferredContentSizeWhenEdgeAttached = true;
		}

		viewController.PresentViewController(viewControllerToPresent, animated: true, null);
	}
}
</code></pre>
<p>Apple implementation provides more customization for a bottom sheet like a different size, dimming the background, user interaction, etc.</p>
<p>To display the bottom sheet alert call it on any <code>Page</code>:</p>
<pre><code class="language-csharp">this.ShowBottomSheet(GetMyBottomSheetContent(), true);
</code></pre>
<p>where <code>GetMyBottomSheetContent</code> returns any view that you want to display on the bottom sheet.</p>
<p>That's it. As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/26/result.png" alt="iOS BottomSheet" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/BottomSheet" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Extend .NET MAUI application with iOS Extensions]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Extend-.NET-MAUI-application-with-iOS-Extensions</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Extend-.NET-MAUI-application-with-iOS-Extensions</guid>
      <description><![CDATA[Extend the .NET MAUI application with iOS App Extension in 5 steps.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>Today, we will create a small .NET MAUI application and extend it with iOS Share App Extension.</p>
<p>App extensions let you extend custom functionality and content beyond your app and make it available to users while they’re interacting with other apps or the system.</p>
<p>I hope you already have a valid environment. Read <a href="./articles/The-first-project-with-.NET-MAUI">this article</a> on how to set up .NET MAUI.</p>
<p>If you prefer a video tutorial you can find it on YouTube:</p>
<p><a href="https://www.youtube.com/watch?v=nSHXQP3zVFE"><img src="https://img.youtube.com/vi/nSHXQP3zVFE/0.jpg" alt="Extend .NET MAUI application with iOS Extensions" /></a></p>
<p>So let's start!</p>
<ol>
<li>Create a new .NET MAUI project.</li>
<li>Create a new Xamarin iOS Application.</li>
<li>Create a new App Extension and select your Xamarin iOS app from step 2.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/25/create-iOS-extension.png" alt="Create iOS Extension" /></li>
<li>Open App Extension csproj file and replace the content:</li>
</ol>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFrameworks&gt;net6.0-ios&lt;/TargetFrameworks&gt;
        &lt;OutputType&gt;Library&lt;/OutputType&gt;
        &lt;ApplicationId&gt;YOUR-APPLICATION-ID-FROM-INFO.PLIST&lt;/ApplicationId&gt;
        &lt;ApplicationDisplayVersion&gt;1.0&lt;/ApplicationDisplayVersion&gt;
        &lt;ApplicationVersion&gt;1&lt;/ApplicationVersion&gt;
    &lt;/PropertyGroup&gt;

    &lt;PropertyGroup&gt;
        &lt;IsAppExtension&gt;true&lt;/IsAppExtension&gt;
        &lt;IsWatchExtension&gt;false&lt;/IsWatchExtension&gt;
    &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>
<ol start="5">
<li>Open the .NET MAUI Application csproj file and add a reference to App Extension:</li>
</ol>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;PATH-TO-EXTENSION.csproj&quot;&gt;
	&lt;IsAppExtension&gt;true&lt;/IsAppExtension&gt;
	&lt;IsWatchApp&gt;false&lt;/IsWatchApp&gt;
&lt;/ProjectReference&gt;
</code></pre>
<ol start="6">
<li>(Optional) Now Xamarin iOS Application can be deleted.</li>
</ol>
<p>That's it. As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/25/result.png" alt="iOS Extension" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/iOSExtensions" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Secure .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Secure-.NET-MAUI-application</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Secure-.NET-MAUI-application</guid>
      <description><![CDATA[The article describes how to add secure surfaces to prevent content rendered into those surfaces by applications from appearing in screenshots or from being viewed on non-secure displays.]]></description>
      <content:encoded><![CDATA[<p>If you are developing secure mobile applications like Bank apps or Health apps you probably want to safeguard their content on non-secure displays (on minimizing or on screenshot capture).</p>
<p>Likely both Android and iOS/MacCatalyst allow us to protect our apps.</p>
<p>Let's start with <code>Android</code>.</p>
<p>Android uses the mechanism of flags which can be set to Window.</p>
<p>We need a flag called <code>FLAG_SECURE</code>. <code>FLAG_SECURE</code> can be placed on a Window to indicate that the contents of this Window don’t want to be recorded.</p>
<p>From theory to practice.</p>
<p>To achieve the result we need to override 2 methods in <code>MainActivity</code>:</p>
<pre><code class="language-csharp">protected override void OnResume()
{
	Window?.ClearFlags(WindowManagerFlags.Secure);
	base.OnResume();
}

protected override void OnPause()
{
	Window?.SetFlags(WindowManagerFlags.Secure, WindowManagerFlags.Secure);
	base.OnPause();
}
</code></pre>
<p>We set the flag when our application is paused and remove the flag when it becomes active.</p>
<p>On <code>iOS/MacCatalyst</code> the idea is similar.</p>
<p>We need to add a subview to our KeyWindow. It can be any UIView. In this sample to make it similar to the Android implementation let's use UIVisualEffectView with the Blur effect.</p>
<pre><code class="language-csharp">public override void OnResignActivation(UIApplication application)
{
	var keyWindow = GetKeyWindow(application);
	if (keyWindow is null)
	{
		return;
	}

	var blurEffect = UIBlurEffect.FromStyle(UIBlurEffectStyle.Dark);
	var blurEffectView = new UIVisualEffectView(blurEffect)
	{
		Frame = keyWindow.Subviews[0].Bounds,
		AutoresizingMask = UIViewAutoresizing.FlexibleDimensions,
		Tag = 12
	};
	keyWindow.AddSubview(blurEffectView);
	base.OnResignActivation(application);
}

public override void OnActivated(UIApplication uiApplication)
{
	var keyWindow = GetKeyWindow(uiApplication);
	if (keyWindow is null)
	{
		return;
	}

	foreach (var subView in keyWindow.Subviews)
	{
		if (subView.Tag == 12)
		{
			subView.RemoveFromSuperview();
		}
	}

	base.OnActivated(uiApplication);
}

private static UIWindow? GetKeyWindow(UIApplication uiApplication)
{
	return uiApplication.ConnectedScenes.ToArray()
	                    .Select(x =&gt; x as UIWindowScene)
	                    .FirstOrDefault()?
	                    .Windows.FirstOrDefault(x =&gt; x.IsKeyWindow);
}
</code></pre>
<p>We add the overlay view on resign activation and remove it on the app activated.</p>
<p>As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk//vladislavantonyuk/articles/24/dotnet-maui-bank-secure-android.gif" alt="Android secure" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiBank" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Replicate a bank application UI using .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Replicate-a-bank-application-UI-using-.NET-MAUI</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Replicate-a-bank-application-UI-using-.NET-MAUI</guid>
      <description><![CDATA[Replicate the Ukrainian Monobank application UI using .NET MAUI.]]></description>
      <content:encoded><![CDATA[<p>It's the middle of summer, and it's time to enter some competitions. Thanks to Matt Goldman who organized the <a href="https://goforgoldman.com/2022/05/19/maui-ui-july.html">MAUI UI July</a>.</p>
<p>In this article, we will try to replicate the <a href="https://monobank.ua/r/XLXmz6"><code>Ukrainian Monobank</code></a> mobile application using .NET MAUI. <a href="https://dribbble.com/shots/4889186-Monobank-Enhancements">Dribbble design</a>.</p>
<p>Let's start by implementing that beautiful gradient background:</p>
<pre><code class="language-xaml">&lt;ContentPage.Background&gt;
	&lt;LinearGradientBrush StartPoint=&quot;0,1&quot; EndPoint=&quot;1,0&quot;&gt;
		&lt;GradientStop Color=&quot;#515ca6&quot;
						Offset=&quot;0.1&quot; /&gt;
		&lt;GradientStop Color=&quot;#93767b&quot;
						Offset=&quot;1.0&quot; /&gt;
	&lt;/LinearGradientBrush&gt;
&lt;/ContentPage.Background&gt;
</code></pre>
<p>The main page of the application consists of only one control - <code>CarouselView</code>.</p>
<pre><code class="language-xaml">&lt;CarouselView ItemsSource=&quot;{Binding Pages}&quot;
			  CurrentItem=&quot;{Binding CurrentPage}&quot;
			  ItemTemplate=&quot;{StaticResource PageSelector}&quot;
			  IsBounceEnabled=&quot;True&quot;
			  Loop=&quot;False&quot;/&gt;
</code></pre>
<p>The <code>CarouselView</code> contains 3 items-subpages: <code>Rewards</code>, <code>Main</code>, and <code>Card</code>. Because all subpages have different designs and elements we need to provide different <code>DataTemplates</code> for each item. <code>DataTemplateSelector</code> can help us return the correct <code>DataTemplate</code> depending on the <code>CurrentItem</code>.</p>
<pre><code class="language-csharp">public class CardsTemplateSelector : DataTemplateSelector
{
	public DataTemplate Rewards { get; set; }
	public DataTemplate Main { get; set; }
	public DataTemplate Card { get; set; }

	protected override DataTemplate OnSelectTemplate(object currentItem, BindableObject container)
	{
		return currentItem switch
		{
			&quot;1&quot; =&gt; Rewards,
			&quot;3&quot; =&gt; Card,
			_ =&gt; Main,
		};
	}
}
</code></pre>
<pre><code class="language-xaml">&lt;ContentPage.Resources&gt;
	&lt;local:CardsTemplateSelector x:Key=&quot;PageSelector&quot;
		                                     Rewards=&quot;{StaticResource RewardsTemplate}&quot;
		                                     Main=&quot;{StaticResource MainTemplate}&quot;
		                                     Card=&quot;{StaticResource CardTemplate}&quot; /&gt;
&lt;/ContentPage.Resources&gt;
</code></pre>
<p>Now we need to create <code>DataTemplate</code> for each page. Let's start with <code>Rewards</code>:</p>
<pre><code class="language-xaml">&lt;DataTemplate x:Key=&quot;RewardsTemplate&quot;&gt;
	&lt;CollectionView ItemsSource=&quot;{Binding Source={x:Reference Name=CardsPage},Path=BindingContext.Rewards}&quot;
					x:DataType=&quot;models:Reward&quot;
					ItemSizingStrategy=&quot;MeasureFirstItem&quot;&gt;
		&lt;CollectionView.Header&gt;
			&lt;VerticalStackLayout Spacing=&quot;25&quot;&gt;
				&lt;Image Source=&quot;dotnet_bot.png&quot;
							WidthRequest=&quot;200&quot;
							HeightRequest=&quot;200&quot;
							Margin=&quot;0,50,0,15&quot;/&gt;
				&lt;Label Text=&quot;You opened 10 rewards&quot; HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;IndicatorView ItemsSource=&quot;{Binding Source={x:Reference Name=CardsPage},Path=BindingContext.Pages}&quot;
									Position=&quot;0&quot;
									IsEnabled=&quot;False&quot;
									HorizontalOptions=&quot;Center&quot;
									Margin=&quot;0,15,0,30&quot;/&gt;
			&lt;/VerticalStackLayout&gt;


		&lt;/CollectionView.Header&gt;
		&lt;CollectionView.ItemsLayout&gt;
			&lt;GridItemsLayout Orientation=&quot;Vertical&quot;
									Span=&quot;3&quot;
									VerticalItemSpacing=&quot;20&quot;/&gt;
		&lt;/CollectionView.ItemsLayout&gt;
		&lt;CollectionView.ItemTemplate&gt;
			&lt;DataTemplate&gt;
				&lt;VerticalStackLayout Spacing=&quot;10&quot;&gt;
					&lt;Border Style=&quot;{StaticResource RewardStyle}&quot;
								Stroke=&quot;{Binding IsAchieved, Converter={StaticResource BoolToColorConverter}}&quot;&gt;
						&lt;Image Source=&quot;{Binding Image}&quot;
									WidthRequest=&quot;50&quot;
									HeightRequest=&quot;50&quot;/&gt;
					&lt;/Border&gt;
					&lt;Label Text=&quot;{Binding Text}&quot;
							HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;/VerticalStackLayout&gt;
			&lt;/DataTemplate&gt;
		&lt;/CollectionView.ItemTemplate&gt;
	&lt;/CollectionView&gt;
&lt;/DataTemplate&gt;

&lt;Style TargetType=&quot;Border&quot; x:Key=&quot;RewardStyle&quot;&gt;
	&lt;Setter Property=&quot;Stroke&quot; Value=&quot;LightGray&quot;/&gt;
	&lt;Setter Property=&quot;Background&quot; Value=&quot;Gray&quot;/&gt;
	&lt;Setter Property=&quot;StrokeThickness&quot; Value=&quot;4&quot;/&gt;
	&lt;Setter Property=&quot;WidthRequest&quot; Value=&quot;50&quot;/&gt;
	&lt;Setter Property=&quot;HeightRequest&quot; Value=&quot;50&quot;/&gt;
	&lt;Setter Property=&quot;StrokeShape&quot;&gt;
		&lt;Setter.Value&gt;
			&lt;Ellipse/&gt;
		&lt;/Setter.Value&gt;
	&lt;/Setter&gt;
&lt;/Style&gt;

&lt;Style TargetType=&quot;IndicatorView&quot;&gt;
	&lt;Setter Property=&quot;IndicatorColor&quot; Value=&quot;#ada8c0&quot;/&gt;
&lt;/Style&gt;
</code></pre>
<p>The page is pretty simple. Please pay attention to <code>CollectionView.ItemSizingStrategy</code>. In our cases, all items have the same size, so we do not need to measure each element in the collection. It improves the performance of the app.</p>
<p>Now we can move on and create <code>MainDataTemplate</code>. This page displays the card balance and transactions list ordered by and grouped by transaction DateTime.</p>
<pre><code class="language-xaml">&lt;Style TargetType=&quot;Border&quot; x:Key=&quot;MainActionsBorderStyle&quot;&gt;
	&lt;Setter Property=&quot;Stroke&quot; Value=&quot;Black&quot;/&gt;
	&lt;Setter Property=&quot;Background&quot; Value=&quot;Black&quot;/&gt;
	&lt;Setter Property=&quot;WidthRequest&quot; Value=&quot;75&quot;/&gt;
	&lt;Setter Property=&quot;HeightRequest&quot; Value=&quot;75&quot;/&gt;
	&lt;Setter Property=&quot;StrokeShape&quot;&gt;
		&lt;Setter.Value&gt;
			&lt;Ellipse/&gt;
		&lt;/Setter.Value&gt;
	&lt;/Setter&gt;
&lt;/Style&gt;

&lt;Style TargetType=&quot;Label&quot; x:Key=&quot;MainActionsLabelStyle&quot;&gt;
	&lt;Setter Property=&quot;FontSize&quot; Value=&quot;30&quot;/&gt;
	&lt;Setter Property=&quot;Padding&quot; Value=&quot;15&quot;/&gt;
	&lt;Setter Property=&quot;FontFamily&quot; Value=&quot;FASolid&quot;/&gt;
	&lt;Setter Property=&quot;HorizontalOptions&quot; Value=&quot;Center&quot;/&gt;
	&lt;Setter Property=&quot;VerticalOptions&quot; Value=&quot;Center&quot;/&gt;
&lt;/Style&gt;

&lt;DataTemplate x:Key=&quot;MainTemplate&quot;&gt;
	&lt;ScrollView&gt;
		&lt;VerticalStackLayout Spacing=&quot;25&quot;&gt;
			&lt;Label Text=&quot;More&quot; HorizontalOptions=&quot;Center&quot; Margin=&quot;0,20,0,0&quot;/&gt;
			&lt;Label Margin=&quot;30,70,30,0&quot;&gt;
				&lt;Label.FormattedText&gt;
					&lt;FormattedString&gt;
						&lt;Span Text=&quot;1 234&quot; FontSize=&quot;50&quot;/&gt;
						&lt;Span Text=&quot;.00&quot; FontSize=&quot;30&quot;/&gt;
						&lt;Span Text=&quot; $&quot; FontSize=&quot;30&quot;/&gt;
					&lt;/FormattedString&gt;
				&lt;/Label.FormattedText&gt;
			&lt;/Label&gt;
			&lt;Grid Margin=&quot;30,0,0,0&quot; ColumnDefinitions=&quot;110,70&quot; RowDefinitions=&quot;*,*&quot;&gt;
				&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;0&quot; Text=&quot;Personal money:&quot; /&gt;
				&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; HorizontalOptions=&quot;End&quot; Text=&quot;1234.00$&quot; /&gt;
				&lt;Label Grid.Row=&quot;1&quot; Grid.Column=&quot;0&quot; Text=&quot;Credit limit:&quot; /&gt;
				&lt;Label Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot; HorizontalOptions=&quot;End&quot; Text=&quot;0.00$&quot;/&gt;
			&lt;/Grid&gt;
			&lt;IndicatorView ItemsSource=&quot;{Binding Source={x:Reference Name=CardsPage},Path=BindingContext.Pages}&quot;
							Position=&quot;1&quot;
							IsEnabled=&quot;False&quot;
							HorizontalOptions=&quot;Center&quot;
							Margin=&quot;0,70,0,20&quot;/&gt;
			&lt;toolkit:UniformItemsLayout&gt;

				&lt;VerticalStackLayout&gt;
					&lt;Border Style=&quot;{StaticResource MainActionsBorderStyle}&quot;&gt;
						&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.Download}&quot;
								Style=&quot;{StaticResource MainActionsLabelStyle}&quot;/&gt;
					&lt;/Border&gt;
					&lt;Label Text=&quot;Transfer money&quot; HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;/VerticalStackLayout&gt;

				&lt;VerticalStackLayout&gt;
					&lt;Border Style=&quot;{StaticResource MainActionsBorderStyle}&quot;&gt;
						&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.PaperPlane}&quot;
								Style=&quot;{StaticResource MainActionsLabelStyle}&quot;/&gt;
					&lt;/Border&gt;
					&lt;Label Text=&quot;Transfer money&quot; HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;/VerticalStackLayout&gt;

				&lt;VerticalStackLayout&gt;
					&lt;Border Style=&quot;{StaticResource MainActionsBorderStyle}&quot;&gt;
						&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.SquarePlus}&quot;
								Style=&quot;{StaticResource MainActionsLabelStyle}&quot;/&gt;
					&lt;/Border&gt;
					&lt;Label Text=&quot;Other payments&quot; HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;/VerticalStackLayout&gt;
			&lt;/toolkit:UniformItemsLayout&gt;

			&lt;Grid RowDefinitions=&quot;20,*&quot; Margin=&quot;0,20,0,0&quot;&gt;
				&lt;Border
					Stroke=&quot;#1e1e1e&quot;
					Background=&quot;#1e1e1e&quot;
					HeightRequest=&quot;40&quot;
					VerticalOptions=&quot;Start&quot;&gt;
					&lt;Border.StrokeShape&gt;
						&lt;RoundRectangle CornerRadius=&quot;70,70,0,0&quot;/&gt;
					&lt;/Border.StrokeShape&gt;
				&lt;/Border&gt;
				&lt;CollectionView ItemsSource=&quot;{Binding Source={x:Reference Name=CardsPage},Path=BindingContext.Transactions}&quot;
							Background=&quot;#1e1e1e&quot;
							Grid.Row=&quot;2&quot;
							IsGrouped=&quot;true&quot;&gt;
					&lt;CollectionView.Header&gt;
						&lt;Grid Margin=&quot;30,0,30,10&quot;
							ColumnDefinitions=&quot;*,*,*&quot;&gt;
							&lt;Border
								HorizontalOptions=&quot;Start&quot;
								Background=&quot;#2c2c2c&quot;
								WidthRequest=&quot;40&quot;
								HeightRequest=&quot;40&quot;&gt;
								&lt;Border.StrokeShape&gt;
									&lt;Ellipse/&gt;
								&lt;/Border.StrokeShape&gt;
								&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.ChartSimple}&quot;
										FontFamily=&quot;FASolid&quot;
										Padding=&quot;7&quot;
										HorizontalOptions=&quot;Center&quot;
										VerticalOptions=&quot;Center&quot;/&gt;
							&lt;/Border&gt;
							&lt;Label Grid.Column=&quot;1&quot; HorizontalOptions=&quot;Center&quot; VerticalOptions=&quot;Center&quot;  Text=&quot;Today&quot;/&gt;
							&lt;Border
								Grid.Column=&quot;2&quot;
								HorizontalOptions=&quot;End&quot;
								Background=&quot;#2c2c2c&quot;
								WidthRequest=&quot;40&quot;
								HeightRequest=&quot;40&quot;&gt;
								&lt;Border.StrokeShape&gt;
									&lt;Ellipse/&gt;
								&lt;/Border.StrokeShape&gt;
								&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.MagnifyingGlass}&quot;
										FontFamily=&quot;FASolid&quot;
										Padding=&quot;7&quot;
										HorizontalOptions=&quot;Center&quot;
										VerticalOptions=&quot;Center&quot;/&gt;
							&lt;/Border&gt;
						&lt;/Grid&gt;
					&lt;/CollectionView.Header&gt;

					&lt;CollectionView.GroupHeaderTemplate&gt;
						&lt;DataTemplate&gt;
							&lt;Grid&gt;
								&lt;Label Text=&quot;{Binding Date, StringFormat='{0:dd MMMM yyyy}'}&quot;
										HorizontalOptions=&quot;Center&quot;/&gt;
							&lt;/Grid&gt;
						&lt;/DataTemplate&gt;
					&lt;/CollectionView.GroupHeaderTemplate&gt;

					&lt;CollectionView.ItemTemplate&gt;
						&lt;DataTemplate&gt;
							&lt;Grid ColumnDefinitions=&quot;50,*,0.2*&quot; RowDefinitions=&quot;*,*&quot; Margin=&quot;30,10&quot;&gt;
								&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;0&quot; Grid.RowSpan=&quot;2&quot;
									Text=&quot;{x:Static fonts:FontAwesomeIcons.PaperPlane}&quot;
									FontFamily=&quot;FASolid&quot;
									VerticalOptions=&quot;Center&quot;
									FontSize=&quot;30&quot;/&gt;
								&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; Text=&quot;{Binding Name}&quot;/&gt;
								&lt;Label Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot; Text=&quot;{Binding Description}&quot;/&gt;
								&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;2&quot; Grid.ColumnSpan=&quot;2&quot;
									Text=&quot;{Binding Sum}&quot;
									HorizontalOptions=&quot;End&quot;
									VerticalOptions=&quot;Center&quot;/&gt;
							&lt;/Grid&gt;
						&lt;/DataTemplate&gt;
					&lt;/CollectionView.ItemTemplate&gt;
				&lt;/CollectionView&gt;
			&lt;/Grid&gt;
		&lt;/VerticalStackLayout&gt;
	&lt;/ScrollView&gt;

&lt;/DataTemplate&gt;
</code></pre>
<p>The last page is a <code>Card</code> page:</p>
<pre><code class="language-xaml">&lt;DataTemplate x:Key=&quot;CardTemplate&quot;&gt;
	&lt;ScrollView&gt;
		&lt;VerticalStackLayout&gt;
			&lt;Border Margin=&quot;30&quot;
				Background=&quot;#1e1e1e&quot;&gt;
				&lt;Border.StrokeShape&gt;
					&lt;RoundRectangle CornerRadius=&quot;40&quot;/&gt;
				&lt;/Border.StrokeShape&gt;

				&lt;Grid ColumnDefinitions=&quot;*,*,*,*&quot; RowDefinitions=&quot;*,100,*,*,*&quot;
						Padding=&quot;30&quot;&gt;
					&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;0&quot; Grid.ColumnSpan=&quot;3&quot; Text=&quot;.NET MAUI Bank&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;18&quot;/&gt;
					&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;3&quot; Text=&quot;UAH&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;18&quot; HorizontalOptions=&quot;End&quot;/&gt;
					&lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;0&quot; HorizontalOptions=&quot;Center&quot; Text=&quot;1234&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;30&quot; /&gt;
					&lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;1&quot; HorizontalOptions=&quot;Center&quot; Text=&quot;5678&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;30&quot; /&gt;
					&lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;2&quot; HorizontalOptions=&quot;Center&quot; Text=&quot;9098&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;30&quot; /&gt;
					&lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;3&quot; HorizontalOptions=&quot;Center&quot; Text=&quot;7654&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;30&quot; /&gt;
					&lt;Label Grid.Row=&quot;3&quot; Grid.Column=&quot;2&quot; Text=&quot;08/29&quot; HorizontalOptions=&quot;Center&quot; FontAttributes=&quot;Bold&quot; FontSize=&quot;25&quot; /&gt;
					&lt;Label Grid.Row=&quot;4&quot; Grid.Column=&quot;4&quot; Text=&quot;{x:Static fonts:FontAwesomeIcons.CcMastercard}&quot; HorizontalOptions=&quot;End&quot;
						FontAttributes=&quot;Bold&quot; FontSize=&quot;50&quot;
						FontFamily=&quot;FABrands&quot;/&gt;
				&lt;/Grid&gt;
			&lt;/Border&gt;

			&lt;IndicatorView ItemsSource=&quot;{Binding Source={x:Reference Name=CardsPage},Path=BindingContext.Pages}&quot;
							Position=&quot;2&quot;
							HorizontalOptions=&quot;Center&quot;
							IsEnabled=&quot;False&quot;/&gt;

			&lt;Grid ColumnDefinitions=&quot;90,*&quot; RowDefinitions=&quot;*,*,*&quot; Margin=&quot;30,20,30,70&quot;&gt;
				&lt;Border Background=&quot;#1e1e1e&quot;
						HorizontalOptions=&quot;Start&quot;
						HeightRequest=&quot;75&quot;
						WidthRequest=&quot;75&quot;
						Grid.RowSpan=&quot;3&quot;&gt;
					&lt;Border.StrokeShape&gt;
						&lt;Ellipse /&gt;
					&lt;/Border.StrokeShape&gt;
					&lt;Label Text=&quot;{x:Static fonts:FontAwesomeIcons.Calendar}&quot; FontFamily=&quot;FASolid&quot;
						FontSize=&quot;30&quot;
						Padding=&quot;15&quot;
						VerticalOptions=&quot;Center&quot;
						HorizontalOptions=&quot;Center&quot;/&gt;
				&lt;/Border&gt;
				&lt;Label Grid.Column=&quot;1&quot; Grid.Row=&quot;0&quot;  Text=&quot;Internet limit per month&quot;/&gt;
				&lt;ProgressBar Grid.Column=&quot;1&quot; Grid.Row=&quot;1&quot;  Progress=&quot;0.5&quot; ProgressColor=&quot;Green&quot;
								HeightRequest=&quot;30&quot;/&gt;
				&lt;Label Grid.Column=&quot;1&quot; Grid.Row=&quot;2&quot;
						Text=&quot;Left 500$ of 1000$&quot;
						VerticalOptions=&quot;End&quot;/&gt;
			&lt;/Grid&gt;

			&lt;Border
					Stroke=&quot;#1e1e1e&quot;
					Background=&quot;#1e1e1e&quot;
					VerticalOptions=&quot;Start&quot;&gt;
				&lt;Border.StrokeShape&gt;
					&lt;RoundRectangle CornerRadius=&quot;30,30,0,0&quot;/&gt;
				&lt;/Border.StrokeShape&gt;
				&lt;Grid ColumnDefinitions=&quot;50,*&quot;
						RowDefinitions=&quot;*,*,*,*&quot;
						Padding=&quot;30,20&quot;&gt;
					&lt;Label Grid.Row=&quot;0&quot; Grid.Column=&quot;0&quot; Text=&quot;Settings&quot; Grid.ColumnSpan=&quot;2&quot;/&gt;
					&lt;Label Grid.Row=&quot;1&quot; Grid.Column=&quot;0&quot; Grid.RowSpan=&quot;2&quot;
							Margin=&quot;0,10,0,0&quot;
								Text=&quot;{x:Static fonts:FontAwesomeIcons.PaperPlane}&quot;
								FontFamily=&quot;FASolid&quot;
								VerticalOptions=&quot;Center&quot;/&gt;
					&lt;Label Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot; Text=&quot;Apple Pay&quot; Margin=&quot;0,10,0,0&quot;/&gt;
					&lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;1&quot; Text=&quot;Setup skins&quot;/&gt;
				&lt;/Grid&gt;
			&lt;/Border&gt;
		&lt;/VerticalStackLayout&gt;
	&lt;/ScrollView&gt;
&lt;/DataTemplate&gt;
</code></pre>
<p>As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/23/dotnet-maui-bank-app.gif" alt="Main page" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiBank" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating beautiful image effects using .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-beautiful-image-effects-using-.NET-MAUI</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-beautiful-image-effects-using-.NET-MAUI</guid>
      <description><![CDATA[The article describes how to create a blur image effect using .NET MAUI behaviors.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>In this article, we will create and apply the blur effect to the Image control using .NET MAUI behaviors.</p>
<p>The effect allows the blurring of out-of-focus parts of an image. It is usually used in portrait photos.</p>
<blockquote>
<p><em>For this article, I use a .NET MAUI combination of filename-based multi-targeting and folder-based multi-targeting. For more information, see <a href="https://docs.microsoft.com/en-us/dotnet/maui/platform-integration/configure-multi-targeting#combine-filename-and-folder-multi-targeting">Combine filename and folder multi-targeting</a>.</em></p>
</blockquote>
<p>Let's start by creating a new <code>BlurBehavior.cs</code> file:</p>
<pre><code class="language-csharp">public partial class BlurBehavior
{
	public static readonly BindableProperty RadiusProperty = BindableProperty.Create(nameof(Radius), typeof(float), typeof(BlurBehavior), 5f, propertyChanged: OnRadiusChanged);

	public float Radius
	{
		get =&gt; (float)GetValue(RadiusProperty);
		set =&gt; SetValue(RadiusProperty, value);
	}

	static void OnRadiusChanged(BindableObject bindable, object oldValue, object newValue)
	{
		var behavior = (BlurBehavior)bindable;
		if (behavior.imageView is null)
		{
			return;
		}

		behavior.SetRendererEffect(behavior.imageView, Convert.ToSingle(newValue));
	}
}
</code></pre>
<p>Now we need to implement our BlurBehavior for each platform.</p>
<h3 id="android">Android</h3>
<p>Create <code>BlurBehavior.Android.cs</code>:</p>
<pre><code class="language-csharp">public partial class BlurBehavior : PlatformBehavior&lt;Image, ImageView&gt;
{
	ImageView? imageView;
	protected override void OnAttachedTo(Image bindable, ImageView platformView)
	{
		imageView = platformView;
		SetRendererEffect(platformView, Radius);
	}

	protected override void OnDetachedFrom(Image bindable, ImageView platformView)
	{
		SetRendererEffect(platformView, 0);
	}

	void SetRendererEffect(ImageView imageView, float radius)
	{
		if (OperatingSystem.IsAndroidVersionAtLeast(31))
		{
			var renderEffect = radius &gt; 0 ? GetEffect(radius) : null;
			imageView.SetRenderEffect(renderEffect);
		}
	}

	static RenderEffect? GetEffect(float radius)
	{
		return OperatingSystem.IsAndroidVersionAtLeast(31) ?
			RenderEffect.CreateBlurEffect(radius, radius, Shader.TileMode.Decal!) :
			null;
	}
}
</code></pre>
<p>In Android 12, Google introduced the RenderEffect API. This enables developers to effortlessly apply graphic effects such as blurs, color filters, and more to Views.</p>
<h3 id="iosmaccatalyst">iOS/MacCatalyst</h3>
<p>Create <code>BlurBehavior.iOS.cs</code>:</p>
<pre><code class="language-csharp">public partial class BlurBehavior : PlatformBehavior&lt;Image, UIImageView&gt;
{
	private CGImage? originalImage;
	UIImageView? imageView;

	protected override void OnAttachedTo(Image bindable, UIImageView platformView)
	{
		imageView = platformView;

		originalImage = platformView.Image?.CGImage;
		SetRendererEffect(imageView, Radius);
	}

	protected override void OnDetachedFrom(Image bindable, UIImageView platformView)
	{
		SetImage(platformView, originalImage);
	}

	static void SetImage(UIImageView imageView, CGImage? image)
	{
		if (image is null)
		{
			return;
		}

		imageView.Image = new UIImage(image);
	}

	void SetRendererEffect(UIImageView imageView, float radius)
	{
		if (originalImage is null)
		{
			return;
		}

		var myContext = CIContext.Create();
		var inputImage = new CIImage(originalImage);
		var filter = new CIGaussianBlur
		{
			InputImage = inputImage,
			Radius = radius
		};
		var resultImage = myContext.CreateCGImage(filter.OutputImage!, inputImage.Extent);
		SetImage(imageView, resultImage);
	}
}
</code></pre>
<h3 id="windows">Windows</h3>
<p>Create <code>BlurBehavior.Windows.cs</code>:</p>
<pre><code class="language-csharp">public partial class BlurBehavior : PlatformBehavior&lt;Image, Microsoft.UI.Xaml.Controls.Image&gt;
{
	Microsoft.UI.Xaml.Controls.Image? imageView;
	protected override async void OnAttachedTo(Image bindable, Microsoft.UI.Xaml.Controls.Image platformView)
	{
		imageView = platformView;
		SetRendererEffect(platformView, Radius);
	}

	protected override void OnDetachedFrom(Image bindable, Microsoft.UI.Xaml.Controls.Image platformView)
	{
		SetRendererEffect(platformView, 0);
	}

	void SetRendererEffect(Microsoft.UI.Xaml.Controls.Image imageView, float radius)
	{
		var graphicsEffect = new GaussianBlurEffect()
		{
			Name = &quot;Blur&quot;,
			Source = new CompositionEffectSourceParameter(&quot;Source&quot;),
			BlurAmount = radius
		};

		var compositor = ElementCompositionPreview.GetElementVisual(imageView).Compositor;
		var blurEffectFactory = compositor.CreateEffectFactory(graphicsEffect);

		var brush = blurEffectFactory.CreateBrush();
		var destinationBrush = compositor.CreateBackdropBrush();
		brush.SetSourceParameter(&quot;Source&quot;, destinationBrush);

		var blurSprite = compositor.CreateSpriteVisual();
		blurSprite.Brush = brush;
		blurSprite.Size = imageView.ActualSize;
		ElementCompositionPreview.SetElementChildVisual(imageView, blurSprite);
	}
}
</code></pre>
<p>Finally, apply behavior to our image:</p>
<pre><code class="language-xml">&lt;Image Source=&quot;dotnet_bot.png&quot; HeightRequest=&quot;200&quot;&gt;
	&lt;Image.Behaviors&gt;
		&lt;blur:BlurBehavior Radius=&quot;10&quot; /&gt;
	&lt;/Image.Behaviors&gt;
&lt;/Image&gt;
</code></pre>
<p>As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/22/blur-effect.png" alt="Blur" /></p>
<p>The full code with different effects can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiImageEffects" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating a card stack layout using .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-a-card-stack-layout-using-.NET-MAUI</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-a-card-stack-layout-using-.NET-MAUI</guid>
      <description><![CDATA[The article describes how to create a custom control for stacking cards.]]></description>
      <content:encoded><![CDATA[<p>Hello and welcome back!</p>
<p>Today I am excited to share with you the guide on creating a card stack layout. CardStackLayout displays a list of cards as a stack on the screen. By swiping the top card you can see the next one. Swiping back returns the top card.</p>
<p>Some popular applications use it like this:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/21/tinder.gif" alt="Tinder" /></p>
<p>So let's start.
First, we need to create our <code>CardLayout</code> class:</p>
<pre><code class="language-csharp">public partial class CardsLayout : Layout, ILayoutManager
{
    public Size ArrangeChildren(Rect rectangle)
    {
        ...
    }

    public Size Measure(double widthConstraint, double heightConstraint)
    {
        ...
    }

    protected override ILayoutManager CreateLayoutManager() =&gt; this;
}
</code></pre>
<p><code>ILayoutManager</code> allows overriding the <code>CreateLayoutManager</code> method of a layout to provide a custom implementation of measuring and positioning views. The <code>Measure</code> method takes height and width constraints and is responsible for measuring all of the layout’s children. The <code>ArrangeChildren</code> then sets each view's size and position according to the layout's rules.</p>
<p>We want to achieve a stack effect, so we can see a top card and some part of the cards behind.</p>
<p>Start by implementing <code>Measure</code> method to get control size:</p>
<pre><code class="language-csharp">public int Spacing { get; set; } = 5;

public Size Measure(double widthConstraint, double heightConstraint)
{
	double x = Padding.Left;
	double y = Padding.Top;
	double totalWidth = 0;
	double totalHeight = 0;

	foreach (var child in Children)
	{
		x += Spacing;
		widthConstraint -= Spacing;
		var current = child.Measure(widthConstraint, heightConstraint);
		totalWidth = Math.Max(totalWidth, x + current.Width);
		totalHeight = Math.Max(totalHeight, y + current.Height);
	}

	return new Size(totalWidth + Padding.HorizontalThickness, totalHeight + Padding.VerticalThickness);
}
</code></pre>
<p>Next step is <code>ArrangeChildren</code> method implementation:</p>
<pre><code class="language-csharp">public double CardScaling { get; set; } = 0.8;

public Size ArrangeChildren(Rect rectangle)
{
	int i = Children.Count - 1;
	double x = Padding.Left;
	double y = Padding.Top;

	double totalWidth = 0;
	double totalHeight = 0;
	var maxWidth = Children[^1].DesiredSize.Width;
	var maxHeight = Children[^1].DesiredSize.Height;
	foreach (var child in Children)
	{
		var width = child.DesiredSize.Width;
		var height = child.DesiredSize.Height * Math.Pow(CardScaling, i);
		child.Arrange(new Rect(x,
							y + (maxHeight - height) / 2,
							width,
							height));
		x += Spacing;
		totalWidth = Math.Max(totalWidth, x + width);
		totalHeight = Math.Max(totalHeight, y + height);
		i--;
	}

	return new Size(totalWidth + Padding.HorizontalThickness, totalHeight + Padding.VerticalThickness);
}
</code></pre>
<p>In this method we arrange each child into rectangle of size which we defined. For each next child we decrease its height and also change its location. Here we achieved left to right cards direction of card layout.</p>
<p>After defining layout we want to switch between cards by swiping them. We can achieve it using <code>PanGestureRecognizer</code> (Unfortunately <code>SwipeGestureRecognizer</code> doesn't work right now on custom controls):</p>
<pre><code class="language-csharp">SwipeDirection swipeDirection;

public CardsLayout()
{
	var panGesture = new PanGestureRecognizer();
	panGesture.PanUpdated += PanGesture_PanUpdated;
	GestureRecognizers.Add(panGesture);
}

private void PanGesture_PanUpdated(object? sender, PanUpdatedEventArgs e)
{
	switch (e.StatusType)
	{
		case GestureStatus.Running:
			HandleTouch(e.TotalX, e.TotalY);
			break;
		case GestureStatus.Completed:
			HandleTouchEnd(swipedDirection);
			break;
	}
}
</code></pre>
<p>Now we need to implement <code>HandleTouch</code> and <code>HandleTouchEnd</code> methods:</p>
<pre><code class="language-csharp">private readonly Stack&lt;IView&gt; cards = new();

private void HandleTouch(double eTotalX, double eTotalY)
{
	swipedDirection = null;
	const int delta = 50;
	if (eTotalX &gt; delta)
	{
		swipedDirection = SwipeDirection.Right;
	}
	else if (eTotalX &lt; -delta)
	{
		swipedDirection = SwipeDirection.Left;
	}
	else if (eTotalY &gt; delta)
	{
		swipedDirection = SwipeDirection.Down;
	}
	else if (eTotalY &lt; -delta)
	{
		swipedDirection = SwipeDirection.Up;
	}
}

private void HandleTouchEnd(SwipeDirection? swiped)
{
	if (swiped == null)
	{
		return;
	}

	switch (swiped)
	{
		case SwipeDirection.Right when Children.Count &gt; 0:
			cards.Push(Children[^1]);
			Children.RemoveAt(Children.Count - 1);
			break;
		case SwipeDirection.Left when cards.Count &gt; 0:
			Children.Add(cards.Pop());
			break;
	}
}
</code></pre>
<p>Now, when you swipe from left to right the top card will disappear. Swiping from right to left will return swiped card to the top.</p>
<p>As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/21/card-layout.gif" alt=".NET MAUI CardLayout" /></p>
<p>The full code with different layouts and swipe directions can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/CardLayout" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Localize .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Localize-.NET-MAUI-application</link>
      <pubDate>Thu, 26 May 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Localize-.NET-MAUI-application</guid>
      <description><![CDATA[This article describes how to localize .NET MAUI application and switch the language without restarting the app.]]></description>
      <content:encoded><![CDATA[<p>Привіт! Bonjour! Hello!</p>
<p><code>.NET MAUI</code>, <code>CommunityToolkit.MAUI</code>, and <code>CommunityToolkit.MAUI.Markup</code> have been released so it’s time to migrate your old Xamarin application!</p>
<p>A lot of applications support different languages to provide users with the best experience using their native language. Depending on your needs, there are several approaches to localizing the .NET MAUI program.</p>
<p><code>.NET MAUI</code> like other .NET applications uses the <code>Resources</code> files to store strings, images, and other files.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/20/mauilocalization-1.png" alt=".NET MAUI App Resources" /></p>
<p>Let’s add 2 new resource files <code>AppResources.resx</code> and <code>AppResources.uk.resx</code>. The first file contains default application localized resources. In our case it’s English. The second file contains resources for the Ukrainian language.</p>
<p>First of all, we need to import the namespace of our resources.</p>
<pre><code class="language-xml">xmlns:localization=&quot;clr-namespace:MauiLocalization.Resources.Localization&quot;
</code></pre>
<p>Then we can set  MainPage Title with:</p>
<pre><code class="language-xml">Title = {x:Static localization:AppResources.MainPageTitle}
</code></pre>
<p>Also, add this line to your csproj file:</p>
<pre><code class="language-xml">&lt;GenerateSatelliteAssembliesForCore&gt;true&lt;/GenerateSatelliteAssembliesForCore&gt;
</code></pre>
<blockquote>
<p>You can read more about Satellite assemblies here: <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/create-satellite-assemblies">Create satellite assemblies for .NET apps</a>.</p>
</blockquote>
<p>Now if you start your application you will see the default title content - &ldquo;Main page&rdquo;. Switch to the Ukrainian language and restart the app. Now the title content is &ldquo;Головна сторінка&rdquo;.</p>
<p>It works great, but what if I do not want to restart the app or I want to change the language only for this application?</p>
<p>In that case, we need to add some code. We need to notify our property that the resource is changed. For that we create <code>LocalizationResourceManager</code>:</p>
<pre><code class="language-csharp">public class LocalizationResourceManager : INotifyPropertyChanged
{
	private LocalizationResourceManager()
	{
		AppResources.Culture = CultureInfo.CurrentCulture;
	}

	public static LocalizationResourceManager Instance { get; } = new();

	public object this[string resourceKey] =&gt; AppResources.ResourceManager.GetObject(resourceKey, AppResources.Culture) ?? Array.Empty&lt;byte&gt;();

	public event PropertyChangedEventHandler? PropertyChanged;

	public void SetCulture(CultureInfo culture)
	{
		AppResources.Culture = culture;
		PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(null));
	}
}
</code></pre>
<p>Now your <code>Title</code> value can be updated to this:</p>
<pre><code class="language-xml">Title = &quot;{Binding MyCodeBehindLocalizationResourceManager[MainPageTitle], Mode=OneWay}&quot;
</code></pre>
<p>where <code>MyCodeBehindLocalizationResourceManager</code> is a code-behind property with value <code>LocalizationResourceManager.Instance</code>.</p>
<p>So here the <code>Title</code> value is binding to the resource value. Each time we call the method <code>LocalizationResourceManager.SetCulture</code>, our property value is updated.</p>
<p>If you don't want to create an additional property for <code>LocalizationResourceManager</code>, we can hide it in <code>MarkupExtension</code>:</p>
<pre><code class="language-csharp">[ContentProperty(nameof(Name))]
public class TranslateExtension : IMarkupExtension&lt;BindingBase&gt;
{
	public string? Name { get; set; }

	public BindingBase ProvideValue(IServiceProvider serviceProvider)
	{
		return new Binding
		{
			Mode = BindingMode.OneWay,
			Path = $&quot;[{Name}]&quot;,
			Source = LocalizationResourceManager.Instance
		};
	}

	object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)
	{
		return ProvideValue(serviceProvider);
	}
}
</code></pre>
<p>Now, the <code>Title</code> value can be updated to:</p>
<pre><code class="language-xml">Title=&quot;{localization:Translate MainPageTitle}&quot;
</code></pre>
<p>As a result, you should receive such app:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/20/MauiLocalization.gif" alt=".NET MAUI Localization" /></p>
<p>That’s all you need to switch the language without restarting the app.</p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiLocalization" target="_blank">GitHub</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Interactive app tutorial in .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Interactive-app-tutorial-in-.NET-MAUI</link>
      <pubDate>Sat, 02 Apr 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Interactive-app-tutorial-in-.NET-MAUI</guid>
      <description><![CDATA[Add interactive app tutorial in .NET MAUI using CommunityToolkit.Maui Popup.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>While the whole world is waiting for Ukraine's victory in the <strong>war</strong> against Russia, <code>.NET MAUI GA</code> is coming closer. A lot of developers started creating new apps or migrating their old apps from <code>Xamarin.Forms</code> to <code>.NET MAUI</code>.</p>
<p>The first impression is very important. The application should have a good-looking UI and a user-friendly experience. But some applications may have complex features, that require additional tutorials for the general user.</p>
<p>In this article, I will show you how to create an interactive app tutorial in <code>.NET MAUI</code> using <code>CommunityToolkit.Maui Popup</code>.</p>
<p>First of all, create a new <code>.NET MAUI</code> application and install the <code>CommunityToolkit.Maui</code> NuGet package.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/19/mct-nuget.png" alt="MAUI CommunityToolkit NuGet package" />
<code>CommunityToolkit.Maui</code> <code>Preview 8</code> brings the first control with the new Handler architecture - <code>Popup</code>. It overlays over the current application page and allows it to show any <code>View</code> content. We will use it as a container for our tutorial.</p>
<p><code>Popup</code> requires <code>NavigationStack</code>, so we need to put our <code>MainPage</code> inside a <code>NavigationPage</code>. Update <code>App.xaml.cs</code> with the next code:</p>
<pre><code class="language-csharp">MainPage = new NavigationPage(new MauiPage());
</code></pre>
<p>Now, let's create a new Popup:</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;mct:Popup xmlns=&quot;http://schemas.microsoft.com/dotnet/2021/maui&quot;
           xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;
           xmlns:mct=&quot;http://schemas.microsoft.com/dotnet/2022/maui/toolkit&quot;
           x:Class=&quot;TutorialHelp.MyPopup&quot;
           Color=&quot;Transparent&quot;&gt;

	&lt;Grid RowDefinitions=&quot;96, *&quot;&gt;
		&lt;HorizontalStackLayout Grid.Row=&quot;0&quot; HorizontalOptions=&quot;End&quot;&gt;
			&lt;Label Text=&quot;Open help&quot; VerticalOptions=&quot;Center&quot;/&gt;
			&lt;Rectangle WidthRequest=&quot;55&quot; HeightRequest=&quot;55&quot;  Opacity=&quot;0.5&quot; /&gt;
		&lt;/HorizontalStackLayout&gt;
		&lt;VerticalStackLayout Grid.Row=&quot;1&quot;&gt;
			&lt;Rectangle WidthRequest=&quot;90&quot; HeightRequest=&quot;40&quot; Opacity=&quot;0.5&quot;  HorizontalOptions=&quot;Center&quot;/&gt;
			&lt;Label Text=&quot;By clicking this magic button you can increment the counter&quot;  HorizontalOptions=&quot;Center&quot;/&gt;
		&lt;/VerticalStackLayout&gt;
	&lt;/Grid&gt;

&lt;/mct:Popup&gt;
</code></pre>
<p>The idea is pretty simple. We make a transparent popup and put our tips over the main components.</p>
<p>When our popup is ready, we can display it on our main page. Add the next method and call it when you need it:</p>
<pre><code class="language-csharp">void ShowPopup()
{
    var simplePopup = new MyPopup();
    this.ShowPopup(simplePopup);
}
</code></pre>
<p>To show the popup at the start of the application you have to call it after Handler initialization. For example:</p>
<pre><code class="language-csharp">protected override void OnHandlerChanged()
{
	base.OnHandlerChanged();
	ShowPopup();
}
</code></pre>
<p>After all these simple steps you should see the next result:
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/19/simple-popup.png" alt="MAUI Popup" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/TutorialHelp" target="_blank">GitHub</a>.</p>
<p>Thank you for reading!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Built in authentication for specific pages in Azure App Service]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Built-in-authentication-for-specific-pages-in-Azure-App-Service</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Built-in-authentication-for-specific-pages-in-Azure-App-Service</guid>
      <description><![CDATA[This article describes how to simplify authentication and authorization for specific pages in Azure App Service by writing minimal or no code in your web app.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>In this article, I would like to describe how to add authentication and authorization for specific pages without redeploying your web app using Azure App Service.</p>
<p>Azure App Service provides built-in authentication and authorization capabilities, so you can sign in users and access data by writing minimal or no code in your web app.</p>
<p>Azure is like an iceberg, where the Portal is only 10% of the whole power.</p>
<p>By default Azure App Service built-in authentication redirects all pages to the Identity provider page, but we want to set it up only for a specific page, like &ldquo;/admin&rdquo;. I haven't found how to implement it in the portal. Let me know in the comments if you find a solution.</p>
<p>To achieve the result we will use another Microsoft service, but let's go step by step:</p>
<ol>
<li>Go to App Service, select Authentication, and click &ldquo;Add identity provider&rdquo;.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/18/14-1.png" alt="Add new provider" /></li>
<li>Choose the identity provider you like
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/18/14-2.png" alt="Available identity provider" /></li>
<li>Fill out the App registration settings and click Add. A new provider should be added.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/18/14-3.png" alt="New provider" /></li>
</ol>
<p>To check if everything works fine so far, you can navigate to any page. You should be redirected to the identity provider.</p>
<p>Now let's set it for specific pages only. To do that, navigate to the <a href="https://resources.azure.com/" target="_blank">Azure Resource Explorer</a>.</p>
<p>In the treeview select <code>subscriptions-&gt;your subscription-&gt;resourceGroups-&gt;your resource group-&gt;providers-&gt;Microsoft.Web-&gt;sites-&gt;you site-&gt;config-&gt;authsettingsV2</code>.</p>
<p>This file contains all settings related to authentication. You can set session duration, identity provider configurations, etc.</p>
<p>We are interested in <code>globalValidation</code> section. Find this section and add the new property <code>excludedPaths</code>. It's an array of strings with paths that should be excluded from the global rule. <strong><code>excludedPaths</code> is a list of &ldquo;allowed&rdquo; paths - the paths, which don't require authentication.</strong>
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/18/14-4.png" alt="GlobalValidation settings" /></p>
<p>Your <code>globalValidation</code> section may look like this:</p>
<pre><code class="language-json">&quot;globalValidation&quot;: {
      &quot;requireAuthentication&quot;: true,
      &quot;unauthenticatedClientAction&quot;: &quot;RedirectToLoginPage&quot;,
      &quot;redirectToProvider&quot;: &quot;google&quot;,
      &quot;excludedPaths&quot;: [
        &quot;/index.html&quot;,
        &quot;/js/*&quot;,
        &quot;/css/*&quot;,
      ]
    },
</code></pre>
<p>which means redirect to Google login page for all requests except &ldquo;/index.html&rdquo;, &ldquo;/js/&rdquo; - any path in js folder, &ldquo;/css/*&rdquo; - any path in js folder.</p>
<p>Now if you open &ldquo;/admin&rdquo; page, you will be redirected to the Google login page, but if you open &ldquo;index.html&rdquo;, you will see its content.</p>
<p>You can read more about GlobalValidation on Microsoft Docs: <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.management.websites.models.globalvalidation?view=azure-dotnet" target="_blank">GlobalValidation Class</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[How to show SnackBar and Toast in .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/How-to-show-SnackBar-and-Toast-in-.NET-MAUI</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/How-to-show-SnackBar-and-Toast-in-.NET-MAUI</guid>
      <description><![CDATA[Demonstrate how to configure SnackBar and Toast using .NET MAUI Community Toolkit.]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>Today I am excited to announce a new preview release of the <code>.NET MAUI CommunityToolkit</code>. It is a successor of the <code>Xamarin Community Toolkit</code> for <code>.NET MAUI</code>. So if you are porting your <code>Xamarin.Forms</code> application to <code>.NET MAUI</code>, <code>.NET MAUI CommunityToolkit</code> is a must-have package you will definitely love.</p>
<p>In this article, I will describe how to use a newly added Snackbar and Toast to kindly notify users about any action in the app.</p>
<p>First of all, you need to install <code>.NET MAUI CommunityToolkit</code> NuGet package:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;CommunityToolkit.Maui&quot; Version=&quot;1.0.0&quot; /&gt;
</code></pre>
<p>You also have to register the package in <code>MauiProgram.cs</code>:</p>
<pre><code class="language-csharp">builder.UseMauiApp&lt;App&gt;().UseMauiCommunityToolkit();
</code></pre>
<p>That's all you need to set up the toolkit. Now let's back to toast and snackbar.</p>
<h3 id="toast">Toast</h3>
<p>A toast provides simple feedback about an operation in a small alert.</p>
<p>To display <code>Toast</code> you need to create it, using the static method <code>Make</code>:</p>
<pre><code class="language-csharp">using CommunityToolkit.Maui.Alerts;
var toast = Toast.Make(message, duration, fontSize);
await toast.Show(cancellationToken);
</code></pre>
<p>where <code>message</code> is your text, and <code>duration</code> is the enum of <code>ToastDuration</code>. The default duration is <code>Short</code>. <code>FontSize</code> is optional and equals <code>14</code> by default.</p>
<p>When you run the command above, you should see the toast:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/17/maui-toast.png" alt="Toast" /></p>
<p>You can also dismiss the toast by running <code>toast.Dismiss(cancellationToken);</code>.</p>
<p>It's important to mention, that you can display only 1 toast at the same time. If you call the <code>Show</code> method a second time, the first toast will be dismissed.</p>
<h3 id="snackbar">Snackbar</h3>
<p>Snackbars inform users of a process that an app has performed or will perform. They appear temporarily, towards the bottom of the screen</p>
<p>The simplest way to create a snackbar is using the static method <code>Make</code>:</p>
<pre><code class="language-csharp">using CommunityToolkit.Maui.Alerts;
var options = new SnackbarOptions
{
    BackgroundColor = Colors.Red,
    TextColor = Colors.Green,
    ActionButtonTextColor = Colors.Yellow,
    CornerRadius = new CornerRadius(10),
    Font = Font.SystemFontOfSize(14),
    ActionButtonFont = Font.SystemFontOfSize(14),
    CharacterSpacing = 0.5
};
var snackbar = Snackbar.Make(message, action, actionButtonText, duration, visualOptions, anchorVisualElement);
await snackbar.Show(token);
</code></pre>
<p><code>Message</code> is required for the snackbar. All other parameters are optional. You can set <code>action</code>, which is executed when you click on the action button. You can customize <code>actionButtonText</code>, set <code>duration</code> using <code>TimeSpan</code>, override default <code>visualOptions</code> to make your snackbar style unique, and anchor the snackbar to the <code>VisualElement</code>.</p>
<p>There is also an extension method, which allows you to anchor the snackbar to any <code>VisualElement</code>:</p>
<pre><code class="language-csharp">await MyVisualElement.DisplaySnackbar(
    &quot;Snackbar is awesome. It is anchored to my visual element&quot;,
    RunAwesomeAction,
    &quot;Make snackbar even better&quot;,
    TimeSpan.FromSeconds(5),
    options,
    CancellationToken.None);	
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/17/maui-snackbar.png" alt="Snackbar" /></p>
<p>Snackbar also can be dismissed using <code>Dismiss(CancellationToken)</code> method.</p>
<p>It is also possible to subscribe to SnackBar events: <code>Shown</code> and <code>Dismissed</code> and check if SnackBar is shown with <code>IsShown</code> property.</p>
<pre><code class="language-csharp">Snackbar.Shown += (s, e) =&gt; { Console.WriteLine(Snackbar.IsShown); };
Snackbar.Dismissed += (s, e) =&gt; { Console.WriteLine(Snackbar.IsShown); };
</code></pre>
<h2 id="details-of-implementation-and-limitations-for-different-platforms">Details of implementation and limitations for different platforms</h2>
<h3 id="i">I</h3>
<p>Both Toast and Snackbar were reworked from scratch compared to Xamarin Community Toolkit, so there are some breaking changes.</p>
<h3 id="ii">II</h3>
<p>The API allows you to override existing methods with your own implementation or even create your own Snackbar and Toast, by implementing <code>ISnackbar</code> and <code>IToast</code> interfaces.</p>
<h3 id="iii">III</h3>
<p>&ldquo;Native&rdquo; Toast and Snackbar are available only on Android and were created by Google.</p>
<p>Other platforms use &ldquo;Container&rdquo; (UIView for iOS and MacCatalyst, ToastNotification on Windows) to display a message and action button.</p>
<h3 id="iv">IV</h3>
<p>Snackbar on Windows can't be anchored to <code>VisualElement</code> and is always displayed as the default Windows Notification.</p>
<p>Feel free to try it and leave your feedback. Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Create a gallery app using .NET MAUI Blazor]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Create-a-gallery-app-using-.NET-MAUI-Blazor</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Create-a-gallery-app-using-.NET-MAUI-Blazor</guid>
      <description><![CDATA[Create infinite scrolling gallery app using .NET MAUI Blazor. Replicate Google Photos and Instagram Gallery UI.]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>Today I will try to replicate the Google Photos Gallery design.</p>
<p>It won't be a general CollectionView with an identical cell size. Let's create an infinite scrolling mosaic gallery using .NET MAUI Blazor!</p>
<p>If you are familiar with Blazor you shouldn't have any difficulties migrating your existing website to a mobile application. That way, when you compile your app it will run as a native application, just like any other .NET MAUI app.</p>
<p>Let’s create a new .NET MAUI Blazor app:</p>
<pre><code class="language-bash">dotnet new maui-blazor
</code></pre>
<p>The structure of the application is pretty simple. I would say it's a Blazor app with <code>App.xaml</code> and <code>MainPage.xaml</code>.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/16/MauiBlazorStructure.png" alt="MAUI Blazor structure" /></p>
<p>.NET MAUI brings a new <code>BlazorWebView</code> control which is responsible to load and run your application. You need to provide a <code>HostPage</code> and <code>RootComponents</code>:</p>
<pre><code class="language-xml">&lt;b:BlazorWebView HostPage=&quot;wwwroot/index.html&quot;&gt;
    &lt;b:BlazorWebView.RootComponents&gt;
        &lt;b:RootComponent Selector=&quot;#app&quot; ComponentType=&quot;{x:Type local:Main}&quot; /&gt;
    &lt;/b:BlazorWebView.RootComponents&gt;
&lt;/b:BlazorWebView&gt;
</code></pre>
<p>You do the same in the Blazor app:</p>
<pre><code class="language-csharp">var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);
</code></pre>
<p>You also need to register <code>BlazorWebView</code> control in <code>MauiProgram.cs</code>:</p>
<pre><code class="language-csharp">var builder = MauiApp.CreateBuilder();
builder.UseMauiApp&lt;App&gt;();
builder.Services.AddMauiBlazorWebView();
return builder.Build();
</code></pre>
<p>Now, let's go back to our initial task of building an infinite scrolling gallery app.</p>
<p>For infinite scrolling, we can use <code>Sve.Blazor.InfiniteScroll</code> package. From its name, you can see that it was developed for Blazor, but it perfectly works in our .NET MAUI app as well!</p>
<p>So, install the package:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Sve.Blazor.InfiniteScroll&quot; Version=&quot;1.0.0-alpha&quot; /&gt;
</code></pre>
<p>You can add any Blazor package and simplify your mobile application development.</p>
<p>Now let's create our gallery by editing <code>Index.razor</code> page:</p>
<pre><code class="language-html">@page &quot;/&quot;

@using MauiBlazorPhotoGallery.Data
@using Sve.Blazor.InfiniteScroll.Components
@inject MediaService mediaService

@if (items == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
    &lt;InfiniteScroll ObserverTargetId=&quot;observerTarget&quot; ObservableTargetReached=&quot;(e) =&gt; GetMediaItems()&quot;&gt;
        &lt;div class=&quot;grid&quot;&gt;
            @foreach (var item in items)
            {
                &lt;div class=&quot;grid-item&quot;&gt;
                    &lt;img src=&quot;@item.Link&quot; /&gt;
                &lt;/div&gt;
            }

            @*The target element that we observe. Once this is reached the callback will be triggered.*@
            &lt;div id=&quot;observerTarget&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/InfiniteScroll&gt;
}

@code {
    private List&lt;MediaItem&gt; items = new();

    void GetMediaItems()
    {
        items.AddRange(mediaService.GetMediaItems());
    }
}
</code></pre>
<p>As you can see it's a plain Blazor page without any code specific to mobile development.</p>
<p>Now let's customize our page by adding <code>Index.razor.css</code>:</p>
<pre><code class="language-css">/* customize container */
.grid {
    display: flex;
    flex-wrap: wrap;
}

/* customize each image container */
.grid-item {
    border-radius: 10px;
    background-size: cover;
    background-position: center;
    margin: 0.3em;
    height: 10em;
    width: 10em;
    flex-grow: 1;
}

/* set different width for children to achieve mosaic effect */
    .grid-item:nth-child(2n) {
        width: 15em;
    }

    .grid-item:nth-child(2n) {
        width: 14em;
    }

    .grid-item:nth-child(4n) {
        width: 12em;
    }

    .grid-item:nth-child(5n) {
        width: 7em;
    }

    .grid-item:nth-child(6n) {
        width: 20em;
    }

/* fill container with image */
    .grid-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</code></pre>
<p>That's it! You can start the app and wait a few seconds while Blazor starts the app. By scrolling to the bottom of the page, you should see how images dynamically append to the gallery.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/16/MauiBlazorGallery.gif" alt=".NET MAUI Blazor gallery" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>.NET MAUI Blazor is a vast enhancement. It opens the door to mobile development for web developers. A front-end developer can create a beautiful UI using HTML and CSS for a web app or reuse it in a mobile application.</p>
<p>It also brings a lot of new controls which were not previously available in native apps.</p>
<p>You can find the source code on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiBlazorPhotoGallery" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[.NET MAUI Multi Window support]]></title>
      <link>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Multi-Window-support</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/.NET-MAUI-Multi-Window-support</guid>
      <description><![CDATA[Add Multi-window support to your .NET MAUI application.]]></description>
      <content:encoded><![CDATA[<p>Howdy! 👋
It is almost 2022 and .NET MAUI team non-stop delivers new features for the upcoming MAUI year!</p>
<p>.NET MAUI Preview 11 was silently released (<a href="https://gist.github.com/Redth/347292446cc1d7f3bd381a2acae70c11" target="_blank">release notes</a>) with Multi-Window support! Let's see how to add this cool feature to your application.</p>
<ol>
<li>Run <code>dotnet workload update</code> to update to the latest .NET MAUI Preview version. We need at least <strong>Preview 11</strong>.</li>
<li>To open the window we need just 2 lines of code: the first line initializes a new window with a Page inside, and the second line just opens the window:</li>
</ol>
<pre><code class="language-csharp">var newWindow = new Window(new SecondPage());
Application.Current?.OpenWindow(newWindow);
</code></pre>
<ol start="3">
<li>Closing the window is even simpler - we need just 1 line of code.</li>
</ol>
<p>To close the current window call the next command:</p>
<pre><code class="language-csharp">Application.Current?.CloseWindow(GetParentWindow());
</code></pre>
<p>To close a specific window pass the instance of that window to the method:</p>
<pre><code class="language-csharp">var myLastWindow = Application.Current?.Windows.Last();
Application.Current?.CloseWindow(myLastWindow);
</code></pre>
<h3 id="platform-configurations">Platform configurations</h3>
<h4 id="iosmaccatalyst">iOS/MacCatalyst</h4>
<ol>
<li>Create and register <code>SceneDelegate</code></li>
</ol>
<pre><code class="language-csharp">[Register(nameof(SceneDelegate))]
public class SceneDelegate : MauiUISceneDelegate
{
}
</code></pre>
<ol start="2">
<li>Open <code>Info.plist</code> and add the next content to the end of the file:</li>
</ol>
<pre><code class="language-xml">&lt;key&gt;UIApplicationSceneManifest&lt;/key&gt;
&lt;dict&gt;
	&lt;key&gt;UIApplicationSupportsMultipleScenes&lt;/key&gt;
	&lt;true/&gt;
	&lt;key&gt;UISceneConfigurations&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;UIWindowSceneSessionRoleApplication&lt;/key&gt;
		&lt;array&gt;
			&lt;dict&gt;
				&lt;key&gt;UISceneConfigurationName&lt;/key&gt;
				&lt;string&gt;__MAUI_DEFAULT_SCENE_CONFIGURATION__&lt;/string&gt;
				&lt;key&gt;UISceneDelegateClassName&lt;/key&gt;
				&lt;string&gt;SceneDelegate&lt;/string&gt;
			&lt;/dict&gt;
		&lt;/array&gt;
	&lt;/dict&gt;
&lt;/dict&gt;
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/15/multi-window-ios.gif" alt="MAUI Multi Window on iOS" /></p>
<center>Multi-Window on iOS</center>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/15/multi-window-macos.gif" alt="MAUI Multi Window on macOS" /></p>
<center>Multi-Window on macOS</center>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/MauiMultiWindow" target="_blank">GitHub</a>.</p>
<p>Happy holidays! 🎄🎁</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Adding SQLite to the .NET MAUI application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Adding-SQLite-to-the-.NET-MAUI-application</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Adding-SQLite-to-the-.NET-MAUI-application</guid>
      <description><![CDATA[Connect to SQLite from .NET MAUI application.]]></description>
      <content:encoded><![CDATA[<p>Almost every application needs to store data. Today I will show you how to connect SQLite to the .NET MAUI application.</p>
<p>First of all, we need to install NuGet packages:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;sqlite-net-pcl&quot; Version=&quot;1.8.116&quot; /&gt;
&lt;PackageReference Include=&quot;SQLitePCLRaw.core&quot; Version=&quot;2.1.0&quot; /&gt;
&lt;PackageReference Include=&quot;SQLitePCLRaw.bundle_green&quot; Version=&quot;2.1.0&quot; /&gt;
&lt;PackageReference Include=&quot;SQLitePCLRaw.provider.dynamic_cdecl&quot; Version=&quot;2.1.0&quot; /&gt;
&lt;PackageReference Include=&quot;SQLitePCLRaw.provider.sqlite3&quot; Version=&quot;2.1.0&quot; /&gt;
</code></pre>
<p>Then create repository class:</p>
<pre><code class="language-csharp">private readonly SQLiteConnection _database;

public Repository()
{
    var dbPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), &quot;entities.db&quot;);
    _database = new SQLiteConnection(dbPath);
    _database.CreateTable&lt;MyEntity&gt;();
}

public List&lt;MyEntity&gt; List()
{
    return _database.Table&lt;MyEntity&gt;().ToList();
}

public int Create(MyEntity entity)
{
    return _database.Insert(entity);
}

public int Update(MyEntity entity)
{
    return _database.Update(entity);
}

public int Delete(MyEntity entity)
{
    return _database.Delete(entity);
}
</code></pre>
<p>It's up to you how you initialize the database and which methods to implement.</p>
<p>To use the repository update the <code>MainPage</code>:</p>
<pre><code class="language-csharp">private readonly Repository repository;

public MainPage()
{
    repository = new Repository();
    InitializeComponent();
}

protected override void OnAppearing()
{
    base.OnAppearing();
    GetEntities();
}

private void GetEntities()
{
    collectionView.ItemsSource = repository.List();
}
</code></pre>
<p><em>Important part for iOS</em></p>
<p>For iOS/MacCatalyst we need to set the SQLite provider. We can do it in <code>AppDelegate</code>:</p>
<pre><code class="language-csharp">protected override MauiApp CreateMauiApp()
{
    raw.SetProvider(new SQLite3Provider_sqlite3());
    return MauiProgram.CreateMauiApp();
}
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/14/sqlite2.png" alt=".NET MAUI Sqlite" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/Sqlite/MauiSqlite" target="_blank">GitHub</a>.</p>
<p>The .NET MAUI Blazor sample can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/Sqlite/MauiSqliteBlazor" target="_blank">GitHub</a>.</p>
<p>The sample with EntityFramework Core can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/KanbanBoard" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Azure Active Directory authentication in .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Azure-Active-Directory-authentication-in-.NET-MAUI</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Azure-Active-Directory-authentication-in-.NET-MAUI</guid>
      <description><![CDATA[Create a small mobile application, which requires user authentication, using .NET MAUI (AD and AD B2C).]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>Today, we will create a small mobile application, which requires user authentication, using .NET MAUI.</p>
<p>I hope you already have a valid environment. Read <a href="./articles/The-first-project-with-.NET-MAUI">this article</a> on how to set up .NET MAUI.</p>
<p>If you don't have an Azure Active Directory, watch this video on how to set it up:</p>
<p><a href="https://www.youtube.com/watch?v=3RGX5mVRXSs"><img src="https://img.youtube.com/vi/3RGX5mVRXSs/0.jpg" alt="Azure Active Directory authentication in .NET MAUI" /></a></p>
<p>And Azure Active Directory (B2C):</p>
<p><a href="https://www.youtube.com/watch?v=sTPWF2O456U"><img src="https://img.youtube.com/vi/sTPWF2O456U/0.jpg" alt="Azure Active Directory B2C authentication in .NET MAUI" /></a></p>
<p>So let's start!</p>
<ol>
<li>Create a new .NET MAUI project.</li>
<li>Install <code>Microsoft.Identity.Client</code> package:
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/13/microsoft-identity-client-nuget.png" alt="Microsoft Identity Client Nuget" /></li>
</ol>
<blockquote>
<p>If the library doesn't work on iOS/MacCatalyst, you can still use .NET MAUI WebAuthenticator.</p>
</blockquote>
<ol start="3">
<li>Create <code>Constants</code> class:</li>
</ol>
<pre><code class="language-csharp">public static class Constants
{
    public static readonly string ClientId = &quot;Your client id guid&quot;;
    public static readonly string[] Scopes = new string[] { &quot;openid&quot;, &quot;offline_access&quot; };
    /* Uncomment the next code to add B2C
   public static readonly string TenantName = &quot;YOUR_TENANT_NAME&quot;;
   public static readonly string TenantId = $&quot;{TenantName}.onmicrosoft.com&quot;;
   public static readonly string SignInPolicy = &quot;B2C_1_client&quot;;
   public static readonly string AuthorityBase = $&quot;https://{TenantName}.b2clogin.com/tfp/{TenantId}/&quot;;
   public static readonly string AuthoritySignIn = $&quot;{AuthorityBase}{SignInPolicy}&quot;;
   */
}
</code></pre>
<ol start="4">
<li>Then modify manifest files.
For <strong>Android</strong> open <code>AndroidManifest.xml</code> and add the next activity to the application:</li>
</ol>
<pre><code class="language-xml">&lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/appicon&quot; android:roundIcon=&quot;@mipmap/appicon_round&quot;&gt;
&lt;activity android:name=&quot;microsoft.identity.client.BrowserTabActivity&quot;  android:exported=&quot;true&quot;&gt;
	&lt;intent-filter&gt;
		&lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;
		&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
		&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;
		&lt;data android:scheme=&quot;msalYOUR_CLIENT_ID_HERE&quot; android:host=&quot;auth&quot; /&gt;
	&lt;/intent-filter&gt;
&lt;/activity&gt;
&lt;/application&gt;
&lt;queries&gt;
	&lt;package android:name=&quot;com.azure.authenticator&quot; /&gt;
	&lt;package android:name=&quot;YOUR_APP_IDENTIFIER&quot; /&gt;
	&lt;package android:name=&quot;com.microsoft.windowsintune.companyportal&quot; /&gt;
	&lt;!-- Required for API Level 30 to make sure we can detect browsers
    (that don't support custom tabs) --&gt;
	&lt;intent&gt;
		&lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;
		&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;
		&lt;data android:scheme=&quot;https&quot; /&gt;
	&lt;/intent&gt;
	&lt;!-- Required for API Level 30 to make sure we can detect browsers that support custom tabs --&gt;
	&lt;!-- https://developers.google.com/web/updates/2020/07/custom-tabs-android-11#detecting_browsers_that_support_custom_tabs --&gt;
	&lt;intent&gt;
		&lt;action android:name=&quot;android.support.customtabs.action.CustomTabsService&quot; /&gt;
	&lt;/intent&gt;
&lt;/queries&gt;
</code></pre>
<p>Pay attention that <code>data android:scheme</code> starts with <code>msal</code>.</p>
<p>For <strong>iOS</strong> add the following code to the <code>Info.plist</code>:</p>
<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
	&lt;dict&gt;
		&lt;key&gt;CFBundleTypeRole&lt;/key&gt;
		&lt;string&gt;Editor&lt;/string&gt;
		&lt;key&gt;CFBundleURLName&lt;/key&gt;
		&lt;string&gt;YOUR_APP_IDENTIFIER&lt;/string&gt;
		&lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
		&lt;array&gt;
			&lt;string&gt;msalYOUR_CLIENT_ID_HERE&lt;/string&gt;
		&lt;/array&gt;
	&lt;/dict&gt;
&lt;/array&gt;
&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
	&lt;string&gt;msauthv2&lt;/string&gt;
	&lt;string&gt;msauthv3&lt;/string&gt;
&lt;/array&gt;
</code></pre>
<p>It allows the app to correctly work with <code>Microsoft Authenticator</code> if a user has MFA enabled.</p>
<ol start="5">
<li>We need to override some methods to receive a callback from the identity server.</li>
</ol>
<p>For <strong>Android</strong> open <code>Android/MainActivity.cs</code> and override <code>OnActivityResult</code> method:</p>
<pre><code class="language-csharp">protected override void OnActivityResult(int requestCode, Result resultCode, Intent? data)
{
    base.OnActivityResult(requestCode, resultCode, data);
    AuthenticationContinuationHelper.SetAuthenticationContinuationEventArgs(requestCode, resultCode, data);
}
</code></pre>
<p>You also need to set the activity attribute <code>Exported = true</code>.</p>
<p>For <strong>iOS</strong> open <code>iOS/AppDelegate.cs</code> and override <code>OpenUrl</code> method:</p>
<pre><code class="language-csharp">public override bool OpenUrl(UIApplication app, NSUrl url, NSDictionary options)
{
    AuthenticationContinuationHelper.SetAuthenticationContinuationEventArgs(url);
    return base.OpenUrl(app, url, options);
}
</code></pre>
<ol start="6">
<li>It's time to create our <code>AuthService</code>:</li>
</ol>
<pre><code class="language-csharp">public class AuthService
{
    private readonly IPublicClientApplication authenticationClient;
    public AuthService()
    {
        authenticationClient = PublicClientApplicationBuilder.Create(Constants.ClientId)
            //.WithB2CAuthority(Constants.AuthoritySignIn) // uncomment to support B2C
#if WINDOWS
            .WithRedirectUri(&quot;http://localhost&quot;)
#else
            .WithRedirectUri($&quot;msal{Constants.ClientId}://auth&quot;)
#endif
            .Build();
    }

    public async Task&lt;AuthenticationResult&gt; LoginAsync(CancellationToken cancellationToken)
    {
        AuthenticationResult result;
        try
        {
            result = await authenticationClient
                .AcquireTokenInteractive(Constants.Scopes)
                .WithPrompt(Prompt.ForceLogin)
#if ANDROID
                .WithParentActivityOrWindow(Microsoft.Maui.ApplicationModel.Platform.CurrentActivity)
#endif
#if WINDOWS
				.WithUseEmbeddedWebView(false)				
#endif
                .ExecuteAsync(cancellationToken);
            return result;
        }
        catch (MsalClientException)
        {
            return null;
        }
    }
}
</code></pre>
<ol start="7">
<li>Now we can prepare the UI to use our AuthService.
Add login button to your XAML and add Clicked event handler:</li>
</ol>
<pre><code class="language-csharp">var authService = new AuthService(); // most likely you will inject it in the constructor, but for simplicity let's initialize it here
var result = await authService.LoginAsync(CancellationToken.None);
var claims = result?.ClaimsPrincipal.Claims; // you can also get AccessToken or IdToken from result if you need it
if (claims != null)
{
	var stringBuilder = new StringBuilder();
	stringBuilder.AppendLine($&quot;Name: {claims.FirstOrDefault(x =&gt; x.Type.Equals(&quot;name&quot;))?.Value}&quot;);
	stringBuilder.AppendLine($&quot;Email: {claims.FirstOrDefault(x =&gt; x.Type.Equals(&quot;preferred_username&quot;))?.Value}&quot;);
	LoginResultLabel.Text = stringBuilder.ToString();
}
</code></pre>
<p>We are done. Start the application and check the result.
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/13/maui-auth.gif" alt="MAUI Auth" /></p>
<p>The full code can be found on <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/Auth/MauiAuth" target="_blank">GitHub</a>.</p>
<p>MauiAuth Blazor sample <a href="https://github.com/VladislavAntonyuk/MauiSamples/tree/main/Auth/MauiAuthBlazor" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Onion architecture in the development of cross platform applications. Part 4. UI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-4.-UI</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-4.-UI</guid>
      <description><![CDATA[Overview of onion architecture. Creating a cross-platform application with the onion architecture.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This is a continuation of the <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-3.-Infrastructure" target="_blank">third article</a> about onion architecture in the development of cross-platform applications.</p>
<p>We continue creating <code>PizzaStore</code>.</p>
<p>In this article, we are moving to the final stage - developing user interface for our store.</p>
<p>Because we develop a cross-platform application we'll create <code>UI</code> projects for each application - <code>Web</code> and <code>Mobile</code>.</p>
<h2 id="webapp">WebApp</h2>
<ol>
<li>Create a new <code>Blazor</code> website.</li>
<li>Reference all other projects:</li>
</ol>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Application\PizzaStore.Application\PizzaStore.Application.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Infrastructure\WebApp\PizzaStore.Infrastructure.WebApp.Business\PizzaStore.Infrastructure.WebApp.Business.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Infrastructure\WebApp\PizzaStore.Infrastructure.WebApp.Data\PizzaStore.Infrastructure.WebApp.Data.csproj&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<ol start="3">
<li>Update <code>Program.cs</code> to init all our layers:</li>
</ol>
<pre><code class="language-csharp">builder.Services.AddApplication();
builder.Services.AddInfrastructureData(&quot;server=localhost;port=3306;database=App1;user=root;password=password&quot;);
builder.Services.AddInfrastructureBusiness();
</code></pre>
<ol start="4">
<li>Let's create a table with all our records. I am using <a href="https://mudblazor.com" target="_blank"><code>MudBlazor</code></a>.</li>
</ol>
<pre><code class="language-html">@page &quot;/&quot;
@using PizzaStore.Application.UseCases.Pizza
@inherits PizzaStoreBaseComponent

&lt;Head Title=&quot;Pizza&quot; /&gt;

&lt;MudText Typo=&quot;Typo.h1&quot;&gt;Pizza&lt;/MudText&gt;

&lt;MudText Typo=&quot;Typo.body1&quot;&gt;This component demonstrates fetching data from a service.&lt;/MudText&gt;

&lt;MudButton OnClick=&quot;@CreatePizza&quot; Color=&quot;Color.Primary&quot;&gt;Create item&lt;/MudButton&gt;

&lt;MudTable @ref=&quot;table&quot; ServerData=&quot;@(new Func&lt;TableState, Task&lt;TableData&lt;PizzaDto&gt;&gt;&gt;(LoadPizzas))&quot; Virtualize=&quot;true&quot; FixedHeader=&quot;true&quot;&gt;
    &lt;ToolBarContent&gt;
        &lt;MudText Typo=&quot;Typo.h6&quot;&gt;Pizza&lt;/MudText&gt;
    &lt;/ToolBarContent&gt;
    &lt;HeaderContent&gt;
        &lt;MudTh&gt;Id&lt;/MudTh&gt;
        &lt;MudTh&gt;Name&lt;/MudTh&gt;
        &lt;MudTh&gt;&lt;/MudTh&gt;
    &lt;/HeaderContent&gt;
    &lt;RowTemplate&gt;
        &lt;MudTd DataLabel=&quot;Id&quot;&gt;@context.Id&lt;/MudTd&gt;
        &lt;MudTd DataLabel=&quot;Name&quot;&gt;@context.Name&lt;/MudTd&gt;
        &lt;MudTd DataLabel=&quot;&quot;&gt;
            &lt;MudButton Color=&quot;Color.Primary&quot; Command=&quot;updateCommand&quot; CommandParameter=&quot;@context.Id&quot;&gt;Update&lt;/MudButton&gt;
            &lt;MudButton Color=&quot;Color.Primary&quot; Command=&quot;deleteCommand&quot; CommandParameter=&quot;@context.Id&quot;&gt;Delete&lt;/MudButton&gt;
        &lt;/MudTd&gt;
    &lt;/RowTemplate&gt;
    &lt;NoRecordsContent&gt;
        &lt;MudText&gt;No matching records found&lt;/MudText&gt;
    &lt;/NoRecordsContent&gt;
    &lt;LoadingContent&gt;
        &lt;MudText&gt;Loading...&lt;/MudText&gt;
    &lt;/LoadingContent&gt;
    &lt;PagerContent&gt;
        &lt;MudTablePager /&gt;
    &lt;/PagerContent&gt;
&lt;/MudTable&gt;
</code></pre>
<ol start="5">
<li>Update code behind:</li>
</ol>
<pre><code class="language-csharp">
public partial class Index : ComponentBase
{
	private readonly ICommand deleteCommand;
	private readonly ICommand updateCommand;
	private MudTextField&lt;string&gt;? searchString;

	private MudTable&lt;PizzaDto&gt; table = null!;

	public Index()
	{
		updateCommand = new ModelCommand&lt;int&gt;(async id =&gt; await Update(id));
		deleteCommand = new ModelCommand&lt;int&gt;(async id =&gt; await Delete(id));
	}

	[Inject]
	public required IQueryDispatcher QueryDispatcher { get; set; }

	[Inject]
	public required ICommandDispatcher CommandDispatcher { get; set; }
    
    [Inject]
	public required ISnackbar Snackbar { get; set; }

	private async Task&lt;TableData&lt;PizzaDto&gt;&gt; LoadPizzas(TableState state)
	{
		var result = await QueryDispatcher.SendAsync&lt;GetPizzaByFilterResponse, GetPizzaQuery&gt;(new GetPizzaQuery
		{
			Limit = state.PageSize,
			Name = searchString?.Value,
			Offset = state.Page
		}, CancellationToken.None);
		if (result.IsSuccessful)
		{
			return new TableData&lt;PizzaDto&gt;
			{
				TotalItems = result.Value.TotalCount,
				Items = result.Value.Items
			};
		}

		return new TableData&lt;PizzaDto&gt;();
	}

	private async Task CreatePizza()
	{
		var result = await CommandDispatcher.SendAsync&lt;PizzaDto, CreatePizzaCommand&gt;(new CreatePizzaCommand
		{
			Name = DateTime.Now.ToString(&quot;O&quot;)
		}, CancellationToken.None);
		if (result.IsSuccessful)
		{
			Snackbar.Add(&quot;Created&quot;, Severity.Success);
			await table.ReloadServerData();
		}
		else
		{
			Snackbar.Add(result.Errors.FirstOrDefault(&quot;Error has occurred&quot;), Severity.Error);
		}
	}

	private async Task Delete(int id)
	{
		var result = await CommandDispatcher.SendAsync&lt;bool, DeletePizzaCommand&gt;(new DeletePizzaCommand(id), CancellationToken.None);
		if (result.IsSuccessful)
		{
			Snackbar.Add(&quot;Deleted&quot;, Severity.Success);
			await table.ReloadServerData();
		}
		else
		{
			Snackbar.Add(result.Errors.FirstOrDefault(&quot;Error has occurred&quot;), Severity.Error);
		}
	}

	private async Task Update(int id)
	{
		var result = await CommandDispatcher.SendAsync&lt;PizzaDto, UpdatePizzaCommand&gt;(new UpdatePizzaCommand(id)
		{
			Name = DateTime.Now.ToString(&quot;O&quot;)
		}, CancellationToken.None);
		if (result.IsSuccessful)
		{
			Snackbar.Add(&quot;Updated&quot;, Severity.Success);
			await table.ReloadServerData();
		}
		else
		{
			Snackbar.Add(result.Errors.FirstOrDefault(&quot;Error has occurred&quot;), Severity.Error);
		}
	}
}
</code></pre>
<h2 id="mobile">Mobile</h2>
<ol>
<li>Create a new <code>.NET MAUI</code> app.</li>
<li>Reference all other projects:</li>
</ol>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Application\PizzaStore.Application\PizzaStore.Application.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Infrastructure\Mobile\PizzaStore.Infrastructure.Mobile.Business\PizzaStore.Infrastructure.Mobile.Business.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Infrastructure\Mobile\PizzaStore.Infrastructure.Mobile.Data\PizzaStore.Infrastructure.Mobile.Data.csproj&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<ol start="3">
<li>Update <code>MauiProgram.cs</code> to init all our layers:</li>
</ol>
<pre><code class="language-csharp">public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder.UseMauiApp&lt;App&gt;();
		builder.Services.AddApplication();
		builder.Services.AddInfrastructureData(GetDatabaseConnectionString(&quot;PizzaStore&quot;));
		builder.Services.AddInfrastructureBusiness();
		var app = builder.Build();
		MigrateDb(app.Services);
		return app;
	}

	private static string GetDatabaseConnectionString(string filename)
	{
		return $&quot;Filename={Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), filename)}.db&quot;;
	}

	private static void MigrateDb(IServiceProvider serviceProvider)
	{
		using var scope = serviceProvider.CreateScope();
		var factory = scope.ServiceProvider.GetRequiredService&lt;IDbContextFactory&lt;MobileAppContext&gt;&gt;();
		using var context = factory.CreateDbContext();
		context.Database.Migrate();
	}
}
</code></pre>
<ol start="4">
<li>Update <code>MainPage.xaml</code>:</li>
</ol>
<pre><code class="language-xml">&lt;CollectionView ItemsSource=&quot;{Binding Items}&quot;
                x:Name=&quot;PizzasCollectionView&quot;
                EmptyView=&quot;No items&quot;
                Margin=&quot;10&quot;&gt;
    &lt;CollectionView.ItemsLayout&gt;
        &lt;LinearItemsLayout Orientation=&quot;Vertical&quot; ItemSpacing=&quot;10&quot; /&gt;
    &lt;/CollectionView.ItemsLayout&gt;
    &lt;CollectionView.ItemTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;Grid RowDefinitions=&quot;60, *, 30, 30&quot; ColumnDefinitions=&quot;*, 60&quot;&gt;
                &lt;Image Grid.RowSpan=&quot;4&quot; Grid.ColumnSpan=&quot;2&quot; Aspect=&quot;Center&quot; Source=&quot;{Binding Image}&quot;/&gt;
                &lt;Button  Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; Text=&quot;Like&quot;/&gt;
                &lt;Label Grid.Row=&quot;2&quot; Grid.Column=&quot;0&quot; Text=&quot;{Binding Name}&quot;/&gt;
                &lt;Label Grid.Row=&quot;3&quot; Grid.Column=&quot;0&quot; Text=&quot;{Binding Price}&quot; VerticalOptions=&quot;End&quot;/&gt;
                &lt;Button Grid.Row=&quot;2&quot; Grid.RowSpan=&quot;2&quot; Grid.Column=&quot;1&quot; Text=&quot;Buy&quot;
                        Command=&quot;{Binding Source={RelativeSource AncestorType={x:Type viewModels:MainViewModel}}, Path=BuyCommand}&quot;
                        CommandParameter=&quot;{Binding Id}&quot;/&gt;
            &lt;/Grid&gt;
        &lt;/DataTemplate&gt;
    &lt;/CollectionView.ItemTemplate&gt;
&lt;/CollectionView&gt;
</code></pre>
<ol start="5">
<li>Update <code>MainViewModel.cs</code> that is a <code>BindingContext</code> of our page:</li>
</ol>
<pre><code class="language-csharp">public partial class MainViewModel : ObservableObject
{
	private readonly IQueryDispatcher queryDispatcher;
	private readonly ICommandDispatcher commandDispatcher;

	[ObservableProperty]
	private ObservableCollection&lt;PizzaDto&gt; items = new();

	public MainViewModel(IQueryDispatcher queryDispatcher, ICommandDispatcher commandDispatcher)
	{
		this.queryDispatcher = queryDispatcher;
		this.commandDispatcher = commandDispatcher;
		GetItemsCommand.Execute(null);
	}

	[RelayCommand]
	async Task GetItems(CancellationToken cancellationToken)
	{
		var result = await queryDispatcher.SendAsync&lt;GetPizzaByFilterResponse, GetPizzaQuery&gt;(new GetPizzaQuery
		{
			Limit = 25
		}, cancellationToken);
		if (result.IsSuccessful)
		{
			items.Clear();
			foreach (var item in result.Value.Items)
			{
				items.Add(item);
			}
		}
		else
		{
			var errors = string.Join(Environment.NewLine, result.Errors);
			await Toast.Make(errors, ToastDuration.Long).Show(cancellationToken);
		}
	}

	[RelayCommand]
	async Task Buy(int itemId, CancellationToken cancellationToken)
	{
		var result = await commandDispatcher.SendAsync&lt;PizzaDto, UpdatePizzaCommand&gt;(new UpdatePizzaCommand(itemId)
		{
			Name = DateTime.Now.ToString(&quot;O&quot;)
		}, cancellationToken);
		if (result.IsSuccessful)
		{
			await GetItems(cancellationToken);
		}
		else
		{
			var errors = string.Join(Environment.NewLine, result.Errors);
			await Toast.Make(errors, ToastDuration.Long).Show(cancellationToken);
		}
	}
}
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>This is a final article in these series. Now you know how to create application with onion architecture.</p>
<p>To simplify all these steps, I created a template, that you can use to create cross-platform application with onion archirecture. It is available as a <code>NuGet</code> package: <a href="https://www.nuget.org/packages/VladislavAntonyuk.DotNetTemplates" target="_blank">.NET Templates</a>.</p>
<p>Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Onion architecture in the development of cross platform applications. Part 3. Infrastructure]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-3.-Infrastructure</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-3.-Infrastructure</guid>
      <description><![CDATA[Overview of onion architecture. Creating a cross-platform application with the onion architecture.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This is a continuation of the <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-2.-Domain-and-Application" target="_blank">second article</a> about onion architecture in the development of cross-platform applications.</p>
<p>We continue creating <code>PizzaStore</code>.</p>
<p>In this article, we are moving to the outer layer, which will implement the data interfaces.</p>
<p>Because we develop a cross-platform application we'll create <code>Infrastructure</code> projects for each application - Web and Mobile.</p>
<p>Let's start with the WebApp.</p>
<p>To do this, let's add the <code>Class Library</code> project and name it <code>PizzaStore.Infrastructure.WebApp.Data</code>.</p>
<p>This project will implement the <code>Application</code> layer interfaces. MS SQL Server will be used as storage, with which we will interact through the Entity Framework Core.</p>
<p>The benefit of the separation is you can easily replace the Database, ORM Framework, e.g. MySQL and Dapper.</p>
<p>Therefore, we will add all the NuGet <code>Microsoft.EntityFrameworkCore</code> packages to this project. We will also add the <code>PizzaStore.Application</code> project reference to the project.</p>
<p>After that, add a new <code>WebAppContext</code> class to the project:</p>
<pre><code class="language-csharp">namespace PizzaStore.Infrastructure.WebApp.Data.Repositories.Models;

using Microsoft.EntityFrameworkCore;

public class WebAppContext : DbContext
{
	public WebAppContext(DbContextOptions&lt;WebAppContext&gt; options)
		: base(options)
	{
	}

	public virtual DbSet&lt;Pizza&gt; Pizza =&gt; Set&lt;Pizza&gt;();

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity&lt;Pizza&gt;(entity =&gt;
		{
			entity.HasIndex(e =&gt; e.Name).IsUnique();
		});
	}
}
</code></pre>
<p>We also need to implement our <code>IPizzaRepository</code>:</p>
<pre><code class="language-csharp">public class PizzaRepository : IPizzaRepository
{
	private readonly WebAppContext db;

	public PizzaRepository(WebAppContext db)
	{
		this.db = db;
	}

	public Task&lt;List&lt;Pizza&gt;&gt; GetAll()
	{
		return db.Pizza.ToListAsync();
	}

	public Task&lt;Pizza?&gt; GetById(int id)
	{
		return db.Pizza.SingleOrDefaultAsync(x =&gt; x.Id == id);
	}

	public async Task&lt;Pizza&gt; Create(Pizza pizza)
	{
		await db.Pizza.AddAsync(pizza);
		await db.SaveChangesAsync();
		return pizza;
	}

	public async Task Update(Pizza pizza)
	{
		db.Entry(pizza).State = EntityState.Modified;
		await db.SaveChangesAsync();
	}

	public async Task Delete(int id)
	{
		var pizza = await db.Pizza.SingleOrDefaultAsync(x =&gt; x.Id == id);
		if (pizza != null)
		{
			db.Pizza.Remove(pizza);
			await db.SaveChangesAsync();
		}
	}
}
</code></pre>
<p>The final step is registration the db connection:</p>
<pre><code class="language-csharp">services.AddDbContext&lt;StaffingContext&gt;(opts =&gt; opts.UseSqlServer(configuration.GetConnectionString(&quot;MSSQLConnection&quot;)));
services.AddTransient&lt;IPizzaRepository, PizzaRepository&gt;();
</code></pre>
<p>For the Mobile application, the steps are the same. The difference is only in DB initialization:</p>
<pre><code class="language-csharp">services.AddDbContext&lt;StaffingContext&gt;(opts =&gt; opts.UseSqlite(configuration.GetConnectionString(&quot;SqliteConnection&quot;)));
services.AddTransient&lt;IPizzaRepository, PizzaRepository&gt;();
</code></pre>
<p>In the next article, we'll create UI level: <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-4.-UI" target="_blank">Onion architecture in the development of cross-platform applications. Part 4. UI</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Onion architecture in the development of cross platform applications. Part 2. Domain and Application]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-2.-Domain-and-Application</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-2.-Domain-and-Application</guid>
      <description><![CDATA[Overview of onion architecture. Creating a cross-platform application with the onion architecture.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>This is a continuation of the <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-1.-Overview" target="_blank">first article</a> about onion architecture in the development of cross-platform applications.</p>
<p>From the theory to the practice. For a closer look at onion architecture, let's create an application for ordering pizza.</p>
<p>Create a solution called <code>PizzaStore</code>.</p>
<p>Create a new <code>Class Library</code> project type, and specify <code>PizzaStore.Domain</code> as its name.</p>
<p>Let's add a class representing the <code>Pizza</code> to the new project, which will represent the Domain Model:</p>
<pre><code class="language-csharp">namespace PizzaStore.Domain;

public class Pizza
{
	public int Id { get; set; }
	public string Name { get; set; } = string.Empty;
	public string? Description { get; set; }
	public string? Image { get; set; }
	public decimal Price { get; set; }
}
</code></pre>
<p>Then add a new <code>Class Library</code> project, and name it <code>PizzaStore.Application</code>. Then reference project <code>PizzaStore.Domain</code> to the <code>PizzaStore.Application</code> and add a new interface as well:</p>
<pre><code class="language-csharp">using PizzaStoreApp.Domain;

namespace PizzaStore.Application.Interfaces;

public interface IPizzaRepository
{
    Task&lt;List&lt;Pizza&gt;&gt; GetAll();
    Task&lt;Pizza?&gt; GetById(int id);
    Task&lt;Pizza&gt; Create(Pizza pizza);
    Task Update(Pizza pizza);
    Task Delete(int id);
}
</code></pre>
<p>This interface constitutes the Application layer and depends on the Domain Model layer.</p>
<p>When creating an application architecture, one must understand that the actual number of levels here is rather arbitrary. Depending on the scale of the tasks, there may be more or fewer levels. However, it is important to understand the very principle that we have the domain model at the center, and everything else depends on them. Each outer level can depend on the inner one, but not vice versa.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/10/onion-architecture2.png" alt="Onion Architecture" /></p>
<p>In the next article, we'll create Infrastructure level: <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-3.-Infrastructure" target="_blank">Onion architecture in the development of cross-platform applications. Part 3. Infrastructure</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Onion architecture in the development of cross platform applications. Part 1. Overview]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-1.-Overview</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-1.-Overview</guid>
      <description><![CDATA[Overview of onion architecture. Creating a cross-platform application with the onion architecture.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>It's been a while since my previous article. For this time the website survived some downtimes and my updates 😃</p>
<p>I am creating a cross-platform application <a href="https://drawgo.azurewebsites.net" target="_blank">Draw &amp; GO</a> and would like to share some steps and approaches which I used to create it.</p>
<p>One of the most important parts of each application is <strong>architecture</strong>. Creating a new application is like planning a baby. A good genetic and strong skeleton are keys to success. But do not forget that the code should always be useful, not just cool in terms of architecture, etc.</p>
<p>Modern applications have both website and mobile/desktop applications to synchronize users' data between different platforms.</p>
<p>Our task is to extract the common code - models and interfaces, which can be used in both web and mobile applications. It's called <strong>Domain</strong> and <strong>Application</strong> respectively.</p>
<p>The code, which is specific for the platform, we'll move to the <strong>Infrastructure</strong> and <strong>UI</strong>. These are the 4 base levels of the Onion architecture.</p>
<p>Onion architecture is the division of an application into layers. Moreover, there is one independent level, which is in the center of the architecture. The second level depends on this level, the third depends on the second, and so on. That is, it turns out that around the first independent level, the second dependent is layered. Around the second, the third is layered, which can also depend on the first. Figuratively, this can be expressed in the form of an onion, which also has a core, around which all other layers are layered, up to the husk.</p>
<p>The number of levels may differ, but the center is always the Domain Model, that is, those model classes that are used in the application and whose objects are stored in the database.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/9/onion-architecture1.png" alt="Onion Architecture" /></p>
<p><strong>Advantages of Onion Architecture</strong></p>
<ol>
<li>The drawback of 3-tier and n-tier architectures is unnecessary coupling. Onion Architecture solved this problem by defining layers from the core to the Infrastructure. It applies the fundamental rule by moving all coupling towards the center. This architecture is undoubtedly biased toward object-oriented programming, and it puts objects before all others.</li>
<li>Any specific implementation will be provided to the application at runtime.</li>
<li>Onion architecture provides better testability because a unit test can be created for individual layers without being influenced by other modules in the application.</li>
</ol>
<p>In the next article, we'll create Domain and Application levels: <a href="./articles/Onion-architecture-in-the-development-of-cross-platform-applications.-Part-2.-Domain-and-Application" target="_blank">Onion architecture in the development of cross-platform applications. Part 2. Domain and Application</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[The first project with .NET MAUI]]></title>
      <link>https://vladislavantonyuk.github.io/articles/The-first-project-with-.NET-MAUI</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/The-first-project-with-.NET-MAUI</guid>
      <description><![CDATA[How to migrate Xamarin.Forms app to .NET MAUI step by step.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>Today we will migrate an existing Xamarin.Forms Application to .NET MAUI! As a victim I chose my <a href="./articles/Creating-Kanban-Board-using-Xamarin-Forms-5" target="_blank" title="KanbanBoard app">KanbanBoard app</a>.</p>
<h2 id="installation">Installation</h2>
<p>First of all, we need to verify if we have prepared the development environment. One of the tools for that is <code>MAUI Check</code>. Run the next commands in PowerShell:</p>
<pre><code>dotnet tool install -g Redth.Net.Maui.Check
maui-check
</code></pre>
<p>It will automatically attempt to fix any issues, <strong>but I highly recommend using the Visual Studio installer.</strong></p>
<h2 id="solution-configuration">Solution Configuration</h2>
<ol>
<li>Edit solution file</li>
</ol>
<ul>
<li>Remove Platform-specific projects;</li>
<li>Remove unused Solution Configuration Platforms</li>
</ul>
<p>The base solution configuration is done.</p>
<h2 id="its-project-time">It's project time</h2>
<p>.NET MAUI introduces the <code>Single project</code> concept, SDK-project style, and much more. Let's first migrate our platforms to the &ldquo;Shared&rdquo; project.</p>
<ol>
<li>Create the &ldquo;Platforms&rdquo; folder in the &ldquo;Shared&rdquo; project. Then for each platform create a folder in the &ldquo;Platforms&rdquo; project:</li>
</ol>
<ul>
<li>Android</li>
<li>iOS</li>
<li>MacCatalyst</li>
<li>Windows</li>
<li>Tizen</li>
</ul>
<p>1.1. Android</p>
<ul>
<li>Copy AndroidManifest.xml, MainActivity.cs, MainApplication.cs, all your services, Resources folder to the Android folder.</li>
</ul>
<p>1.2. iOS, macOS</p>
<ul>
<li>Copy Main.cs, Info.plist, Entitlements.plist, AppDelegate.cs, and all your services to the iOS/MacCatalyst folder.</li>
</ul>
<p>1.3. Windows</p>
<ul>
<li>Copy Package.appxmanifest, App.xaml, App.xaml.cs, app.manifest to the Windows folder.</li>
</ul>
<p>1.4. Tizen</p>
<ul>
<li>Copy Main.cs, tizen-manifest.xml to the Tizen folder.</li>
</ul>
<ol start="2">
<li><p>Delete Old platforms project folders.</p>
</li>
<li><p>Now we need to modify and change these files</p>
</li>
</ol>
<ul>
<li>From <code>AndroidManifest.xml</code> remove the package name, version code, and version name. We will set these settings later in csproj file.</li>
<li>Replace <code>MainActivity.cs</code> content with:</li>
</ul>
<pre><code class="language-csharp">namespace YourNamespace;

using Android.App;
using Android.Content.PM;

[Activity(Theme = &quot;@style/Maui.SplashTheme&quot;,
		MainLauncher = true,
		Label = &quot;YOUR_APP_TITLE&quot;)]
public class MainActivity : MauiAppCompatActivity
{
}
</code></pre>
<ul>
<li>Replace <code>MainApplication.cs</code> content with:</li>
</ul>
<pre><code class="language-csharp">namespace YourNamespace;
using Android.App;
using Android.Runtime;

[Application]
public class MainApplication : MauiApplication
{
    public MainApplication(IntPtr handle, JniHandleOwnership ownership)
        : base(handle, ownership)
    {
    }

    protected override MauiApp CreateMauiApp() =&gt; MauiProgram.CreateMauiApp();
}
</code></pre>
<ul>
<li>Replace <code>AppDelegate.cs</code> content with:</li>
</ul>
<pre><code class="language-csharp">using Foundation;

namespace YourNamespace;

[Register(nameof(AppDelegate))]
public class AppDelegate : MauiUIApplicationDelegate
{
    protected override MauiApp CreateMauiApp()
    {
        return MauiProgram.CreateMauiApp();
    }
}
</code></pre>
<ul>
<li>Replace <code>App.xaml</code> from Windows folder with:</li>
</ul>
<pre><code class="language-xml">&lt;maui:MauiWinUIApplication
    x:Class=&quot;YourNamespace.WinUI.App&quot;
    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
    xmlns:maui=&quot;using:Microsoft.Maui&quot;
    xmlns:local=&quot;YourNamespace.WinUI&quot;&gt;

&lt;/maui:MauiWinUIApplication&gt;
</code></pre>
<ul>
<li>Replace <code>App.xaml.cs</code> from Windows folder with:</li>
</ul>
<pre><code class="language-csharp">namespace YourNamespace.WinUI;

public partial class App : MauiWinUIApplication
{
	public App()
	{
		this.InitializeComponent();
	}

	protected override MauiApp CreateMauiApp() =&gt; MauiProgram.CreateMauiApp();
}
</code></pre>
<ul>
<li>Replace <code>Package.appxmanifest</code> content with the next:</li>
</ul>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Package
  xmlns=&quot;http://schemas.microsoft.com/appx/manifest/foundation/windows10&quot;
  xmlns:uap=&quot;http://schemas.microsoft.com/appx/manifest/uap/windows10&quot;
  xmlns:rescap=&quot;http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities&quot;
  IgnorableNamespaces=&quot;uap rescap&quot;&gt;

  &lt;Identity Name=&quot;maui-package-name-placeholder&quot; Publisher=&quot;CN=Your Publisher Name&quot; Version=&quot;0.0.0.0&quot; /&gt;

  &lt;Properties&gt;
    &lt;PublisherDisplayName&gt;Your Publisher Name&lt;/PublisherDisplayName&gt;
    &lt;DisplayName&gt;$placeholder$&lt;/DisplayName&gt;
    &lt;Logo&gt;$placeholder$.png&lt;/Logo&gt;
  &lt;/Properties&gt;

  &lt;Dependencies&gt;
    &lt;TargetDeviceFamily Name=&quot;Windows.Universal&quot; MinVersion=&quot;10.0.17763.0&quot; MaxVersionTested=&quot;10.0.19041.0&quot; /&gt;
    &lt;TargetDeviceFamily Name=&quot;Windows.Desktop&quot; MinVersion=&quot;10.0.17763.0&quot; MaxVersionTested=&quot;10.0.19041.0&quot; /&gt;
  &lt;/Dependencies&gt;

  &lt;Resources&gt;
    &lt;Resource Language=&quot;x-generate&quot; /&gt;
  &lt;/Resources&gt;

  &lt;Applications&gt;
    &lt;Application Id=&quot;App&quot; Executable=&quot;$targetnametoken$.exe&quot; EntryPoint=&quot;$targetentrypoint$&quot;&gt;
      &lt;uap:VisualElements
        DisplayName=&quot;$placeholder$&quot;
        Description=&quot;$placeholder$&quot;
        Square150x150Logo=&quot;$placeholder$.png&quot;
        Square44x44Logo=&quot;$placeholder$.png&quot;
        BackgroundColor=&quot;transparent&quot;&gt;
        &lt;uap:DefaultTile Square71x71Logo=&quot;$placeholder$.png&quot; Wide310x150Logo=&quot;$placeholder$.png&quot; Square310x310Logo=&quot;$placeholder$.png&quot; /&gt;
        &lt;uap:SplashScreen Image=&quot;$placeholder$.png&quot; /&gt;
      &lt;/uap:VisualElements&gt;
    &lt;/Application&gt;
  &lt;/Applications&gt;

  &lt;Capabilities&gt;
    &lt;rescap:Capability Name=&quot;runFullTrust&quot; /&gt;
  &lt;/Capabilities&gt;

&lt;/Package&gt;
</code></pre>
<ul>
<li>Replace <code>Main.cs</code> from Tizen folder with:</li>
</ul>
<pre><code class="language-csharp">namespace YourNamespace;

class Program : MauiApplication
{
	protected override MauiApp CreateMauiApp() =&gt; MauiProgram.CreateMauiApp();

	static void Main(string[] args)
	{
		var app = new Program();
		app.Run(args);
	}
}
</code></pre>
<ol start="4">
<li>Replace all <code>Xamarin.Forms</code> with <code>Microsoft.Maui</code> (somewhere you may need to add <code>Microsoft.Maui.Controls</code></li>
<li>Replace <code>App.xaml.cs</code> file content in the root folder with the next code:</li>
</ol>
<pre><code class="language-csharp">namespace YourNamespace;

public partial class App : Application
{
    public App()
    {
        InitializeComponent();
        MainPage = new MainPage();
    }
}
</code></pre>
<ol start="6">
<li>Create MauiProgram.cs with content:</li>
</ol>
<pre><code class="language-csharp">namespace YourNamespace;

public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder
			.UseMauiApp&lt;App&gt;()
			.ConfigureFonts(fonts =&gt;
			{
				fonts.AddFont(&quot;fasolid.otf&quot;, &quot;FASolid&quot;); // move you fonts from AssemblyInfo here
			});
		builder.Services.AddTransient&lt;IPath, DbPath&gt;(); // here you register all your services for DI
		return builder.Build();
	}
}
</code></pre>
<ol start="7">
<li>Replace <code>xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;</code> with <code>xmlns=&quot;http://schemas.microsoft.com/dotnet/2021/maui&quot;</code></li>
<li>Finally update csproj file with:</li>
</ol>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

	&lt;PropertyGroup&gt;
		&lt;TargetFrameworks&gt;net6.0-android;net6.0-ios;net6.0-maccatalyst&lt;/TargetFrameworks&gt;
		&lt;TargetFrameworks Condition=&quot;$([MSBuild]::IsOSPlatform('windows'))&quot;&gt;$(TargetFrameworks);net6.0-windows10.0.19041.0&lt;/TargetFrameworks&gt;
		&lt;TargetFrameworks&gt;$(TargetFrameworks);net6.0-tizen&lt;/TargetFrameworks&gt;
		&lt;OutputType&gt;Exe&lt;/OutputType&gt;
		&lt;RootNamespace&gt;YourNamespace&lt;/RootNamespace&gt;
		&lt;UseMaui&gt;true&lt;/UseMaui&gt;
		&lt;SingleProject&gt;true&lt;/SingleProject&gt;
		&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;

		&lt;!-- Display name --&gt;
		&lt;ApplicationTitle&gt;YourTitle&lt;/ApplicationTitle&gt;

		&lt;!-- App Identifier --&gt;
		&lt;ApplicationId&gt;com.vladislavantonyuk.yournamespace&lt;/ApplicationId&gt;
		&lt;ApplicationIdGuid&gt;F46BB7C8-E6A5-4D9E-AAFE-8173B0819787&lt;/ApplicationIdGuid&gt;

		&lt;!-- Versions --&gt;
		&lt;ApplicationDisplayVersion&gt;1.0&lt;/ApplicationDisplayVersion&gt;
		&lt;ApplicationVersion&gt;1&lt;/ApplicationVersion&gt;

		&lt;SupportedOSPlatformVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'&quot;&gt;14.2&lt;/SupportedOSPlatformVersion&gt;
		&lt;SupportedOSPlatformVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'&quot;&gt;14.0&lt;/SupportedOSPlatformVersion&gt;
		&lt;SupportedOSPlatformVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'&quot;&gt;21.0&lt;/SupportedOSPlatformVersion&gt;
		&lt;SupportedOSPlatformVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'&quot;&gt;10.0.17763.0&lt;/SupportedOSPlatformVersion&gt;
		&lt;TargetPlatformMinVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'&quot;&gt;10.0.17763.0&lt;/TargetPlatformMinVersion&gt;
		&lt;SupportedOSPlatformVersion Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'&quot;&gt;6.5&lt;/SupportedOSPlatformVersion&gt;
	&lt;/PropertyGroup&gt;

	&lt;ItemGroup&gt;
		&lt;!-- App Icon --&gt;
		&lt;MauiIcon Include=&quot;Resources\appicon.svg&quot; ForegroundFile=&quot;Resources\appiconfg.svg&quot; Color=&quot;#512BD4&quot; /&gt;

		&lt;!-- Splash Screen --&gt;
		&lt;MauiSplashScreen Include=&quot;Resources\appiconfg.svg&quot; Color=&quot;#512BD4&quot; BaseSize=&quot;128,128&quot; /&gt;

		&lt;!-- Images --&gt;
		&lt;MauiImage Include=&quot;Resources\Images\*&quot; /&gt;

		&lt;!-- Custom Fonts --&gt;
		&lt;MauiFont Include=&quot;Resources\Fonts\*&quot; /&gt;

		&lt;!-- Raw Assets (also remove the &quot;Resources\Raw&quot; prefix) --&gt;
		&lt;MauiAsset Include=&quot;Resources\Raw\**&quot; LogicalName=&quot;%(RecursiveDir)%(Filename)%(Extension)&quot; /&gt;
	&lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<p>Pay attention to the last ItemGroup. .NET MAUI is integrated with Resizetizer NT, so MauiImage and MauiFont will automatically prepare resources for all your applications.</p>
<h2 id="build-and-run">Build and Run</h2>
<pre><code class="language-bash"># For Android
dotnet build KanbanBoard.csproj -t:Run -f net6.0-android
# For iOS
dotnet build KanbanBoard.csproj -t:Run -f net6.0-ios
# For macOS
dotnet build KanbanBoard.csproj -t:Run -f net6.0-maccatalyst
# For Windows
dotnet build KanbanBoard.csproj -t:Run -f net6.0-windows10.0.19041.0
</code></pre>
<h2 id="issues">Issues</h2>
<h3 id="android-deployment-solved">1. Android deployment (Solved)</h3>
<p>I was not able to deploy the application to the device until specified the RuntimeIdentifiers for Android. Add this line to the <code>PropertyGroup</code> in your csproj file:</p>
<pre><code class="language-xml">&lt;RuntimeIdentifiers Condition=&quot;$(TargetFramework.Contains('-android'))&quot;&gt;android-arm;android-arm64;android-x86;android-x64&lt;/RuntimeIdentifiers&gt;
</code></pre>
<h3 id="ios-device-deployment-solved">2. iOS Device deployment (Solved)</h3>
<p>I was not able to deploy the application to the device until specified the RuntimeIdentifiers. Add this line to the csproj file:</p>
<pre><code class="language-xml">&lt;PropertyGroup Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' and $(Configuration) == 'Release'&quot;&gt;
	&lt;RuntimeIdentifier&gt;ios-arm64&lt;/RuntimeIdentifier&gt;
	&lt;CodesignEntitlement&gt;Entitlements.plist&lt;/CodesignEntitlement&gt;
	&lt;ArchiveOnBuild&gt;true&lt;/ArchiveOnBuild&gt;
&lt;/PropertyGroup&gt;

&lt;PropertyGroup Condition=&quot;$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' and $(Configuration) == 'Debug'&quot;&gt;
	&lt;RuntimeIdentifier&gt;ios-arm64&lt;/RuntimeIdentifier&gt;
	&lt;RuntimeIdentifier&gt;iossimulator-x64&lt;/RuntimeIdentifier&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<h3 id="windows-release-solved">3. Windows release (Solved)</h3>
<p>To generate the Appx file add the next code to the csproj file:</p>
<pre><code class="language-xml">&lt;PropertyGroup Condition=&quot;$(TargetFramework.Contains('-windows')) and '$(Configuration)' == 'Release'&quot;&gt;
	&lt;GenerateAppxPackageOnBuild&gt;true&lt;/GenerateAppxPackageOnBuild&gt;
	&lt;AppxPackageSigningEnabled&gt;False&lt;/AppxPackageSigningEnabled&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<p>The final result:
<img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/8/kanban-maui.png" alt="Kanban MAUI" /></p>
<p>You can find the code changes on <a href="https://github.com/VladislavAntonyuk/KanbanBoard/tree/maui">GitHub</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Drawing View in Xamarin Community Toolkit]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Drawing-View-in-Xamarin-Community-Toolkit</link>
      <pubDate>Fri, 21 May 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Drawing-View-in-Xamarin-Community-Toolkit</guid>
      <description><![CDATA[The SignaturePad successor is now available in XCT. This article describes how to add it to your project.]]></description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>The community continues to improve Xamarin.CommunityToolkit and today the new control was added. Welcome, DrawingView!</p>
<p>DrawingView is an improved version of the SignaturePad plugin. It works on all platforms and is supported by the community.</p>
<p>DrawingView allows you to draw lines, save the image and restore it by settings the list of lines.</p>
<p>Let's now add it to our project.</p>
<h3 id="using-drawingview-on-xamarin.forms">Using DrawingView on Xamarin.Forms</h3>
<ol>
<li>We need to add the Xamarin.CommunityToolkit namespace:</li>
</ol>
<pre><code class="language-xml">xmlns:views=&quot;clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit&quot;
</code></pre>
<ol start="2">
<li>Add the control:</li>
</ol>
<pre><code class="language-xml">&lt;views:DrawingView
            x:Name=&quot;DrawingViewControl&quot;
            Lines=&quot;{Binding MyLines}&quot;
            MultiLineMode=&quot;true&quot;
            ClearOnFinish=&quot;true&quot;
            DrawingLineCompletedCommand=&quot;{Binding DrawingLineCompletedCommand}&quot;
            DrawingLineCompleted=&quot;OnDrawingLineCompletedEvent&quot;
            DefaultLineColor=&quot;Red&quot;
            DefaultLineWidth=&quot;5&quot;
            BackgroundColor=&quot;DarkGray&quot;
            HorizontalOptions=&quot;FillAndExpand&quot;
            VerticalOptions=&quot;FillAndExpand&quot; /&gt;
</code></pre>
<ul>
<li>We can bind to the <code>Lines</code> property and set lines in ViewModel.</li>
<li>If <code>MultiLineMode</code> is set to <code>true</code> we can draw multiple lines, otherwise, the old lines are removed.</li>
<li>If <code>ClearOnFinish</code> is set to <code>true</code> the points will be cleaned right after we finished the drawing.</li>
<li><code>DrawingLineCompletedCommand</code> and <code>DrawingLineCompleted</code> are executed when we finish drawing the line.</li>
<li>We can set default values for all lines using <code>DefaultLineColor</code> and <code>DefaultLineWidth</code>.</li>
</ul>
<h3 id="lines">Lines</h3>
<p>DrawingView allows configuring each line individually. Let's see what we can do:</p>
<ul>
<li>Each line has a collection of <code>Points</code>.</li>
<li>For each line, we can set the drawing line color and width using <code>LineColor</code> and <code>LineWidth</code> properties respectively.</li>
<li>For making the line smooth we can set <code>EnableSmoothedPath</code> to true and we can configure the smooth level using <code>Granularity</code>.</li>
</ul>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/7/2.png" alt="DrawingView" /></p>
<h3 id="get-an-image-from-lines">Get an image from lines</h3>
<p>There are 2 different ways how you can get the image stream:
We can choose the <code>GetImageStream</code> static method from the <code>DrawingView</code>. We need to path the list of lines, the size of the image (minimum size is 1x1), and the background color.</p>
<pre><code class="language-csharp">var stream = DrawingView.GetImageStream(
                lines,
                new Size(GestureImage.Width, GestureImage.Height),
                Color.Black);
</code></pre>
<p>Or we can call this method directly from your control. In that case, we only need to specify the image size.</p>
<pre><code class="language-csharp">var stream = DrawingViewControl.GetImageStream(GestureImage.Width, GestureImage.Height);
</code></pre>
<p>Both methods return stream, so to get the image source you can call <code>ImageSource.FromStream(() =&gt; stream)</code></p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/7/3.png" alt="DrawingView iOS" /></p>
<h3 id="get-an-image-from-points">Get an image from points</h3>
<p>There are 2 different ways how you can get the image stream:
We can choose the <code>GetImageStream</code> static method from the <code>Line</code>. We need to path the list of points, the size of the image (minimum size is 1x1), line width, line color, and background color.</p>
<pre><code class="language-csharp">var stream = DrawingView.GetImageStream(
                points,
                new Size(GestureImage.Width, GestureImage.Height),
                10, Color.Red, Color.Black);
</code></pre>
<p>Or we can call the instance method directly. In that case, we only need to specify the image size and background color.</p>
<pre><code class="language-csharp">var stream = MyLine.GetImageStream(GestureImage.Width, GestureImage.Height, Color.Black);
</code></pre>
<p>Both methods return stream, so to get the image source you can call <code>ImageSource.FromStream(() =&gt; stream)</code></p>
<h2 id="notes-for-wpf-developers">Notes for WPF developers</h2>
<p>WPF implementation required calling an additional method so we decided to exclude WPF Renderer from the plugin. But you can still add it manually. You can find the latest code here: <a href="https://github.com/xamarin/XamarinCommunityToolkit/blob/develop/samples/XCT.Sample.WPF/DrawingViewRenderer.wpf.cs">GitHub</a></p>
<p>That's pretty much it. Hope you will enjoy the new DrawingView control!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Identity and Dynamic routing in Blazor]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Identity-and-Dynamic-routing-in-Blazor</link>
      <pubDate>Sat, 08 May 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Identity-and-Dynamic-routing-in-Blazor</guid>
      <description><![CDATA[The Identity of the user in DynamicRouteValueTransformer.]]></description>
      <content:encoded><![CDATA[<p>Welcome!</p>
<p>This is the debut of the Blazor category on my website and I start it by describing how to build a dynamic route based on current user identity.</p>
<h2 id="the-issue">The issue.</h2>
<p>If you create a website like a photo gallery, file system, or internet shop, you need a dynamic route (controller/action), similar to CMS.</p>
<p>Example: User enters <code>http://sample.com/root/folder1/folder2/folder3/file34</code> and then asked for the controller or action at runtime. To decide what to return with this path I need to know the user identity, because different users may have the same folder structure.</p>
<p>I am using the <code>DynamicRouteValueTransformer</code> routing endpoint feature, creating a <code>TestControllerTransformer</code> inherit <code>DynamicRouteValueTransformer</code>. But in <code>TestControllerTransformer</code> I was not able to obtain the User Identity, later on, the User Identity controller is available.</p>
<pre><code class="language-csharp">public class TestControllerTransformer : DynamicRouteValueTransformer
    {
        private ILogger&lt;TestControllerTransformer&gt; _logger;

        public TestControllerTransformer(ILogger&lt;TestControllerTransformer&gt; logger)
        {
            _logger = logger;
        }

        public override ValueTask&lt;RouteValueDictionary&gt; TransformAsync(HttpContext httpContext, RouteValueDictionary values)
        {
            if (httpContext.User.Identity.IsAuthenticated)
            {
                _logger.LogTrace(&quot;User Authenicated&quot;);
                var fileId = GetFileId(values, httpContext.User.FindFistValue(ClaimsType.NameIdentifier);

                values[&quot;controller&quot;] = &quot;Files&quot;;
                values[&quot;action&quot;] = &quot;GetFile&quot;;
            }
            else
            {
                _logger.LogTrace(&quot;User NOT Authenicated&quot;);
            }

            return new ValueTask&lt;RouteValueDictionary&gt;(values);
        }
    }
</code></pre>
<p>I was waiting for <code>httpContext.User.Identity.IsAuthenticated</code> to be true in <code>TestControllerTransformer</code> after login user, but I received false.</p>
<h2 id="solution">Solution</h2>
<p>When I investigated the issue, I saw a lot of suggestions to inject <code>IHttpContextAccessor</code>, and it actually works, but not in Blazor. Blazor apps run outside of the context of the ASP.NET Core pipeline. The <code>HttpContext</code> isn't guaranteed to be available within the <code>IHttpContextAccessor</code>, nor is it guaranteed to be holding the context that started the Blazor app. You can read more on <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-5.0#blazor-and-shared-state" target="_blank">Microsoft Docs</a>.</p>
<p>The solution for Blazor (and it works for ASP.NET Core as well) is much easier.</p>
<p>The main issue was in the configuration. You have to understand how ASP.NET Core middlewares work and the responsibility of each of them. You can read more on <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/" target="_blank">Microsoft Docs</a>.</p>
<p>So the default order looks like this:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/6/middleware-pipeline.svg" alt="Middleware pipeline" /></p>
<p>As you can see the <code>Routing middleware</code> executes before <code>Authentication middleware</code>, where actually User sets. So to fix the issue you just need to put <code>Authentication middleware</code> before <code>Routing middleware</code>:</p>
<pre><code class="language-csharp">public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
		{
			if (env.IsDevelopment())
			{
				app.UseDeveloperExceptionPage();
			}
			else
			{
				app.UseExceptionHandler(&quot;/Error&quot;);
				app.UseHsts();
			}

			app.UseHttpsRedirection();
			app.UseStaticFiles();

			app.UseAuthentication();
			app.UseRouting();
			app.UseAuthorization();

			app.UseEndpoints(endpoints =&gt;
			{
				endpoints.MapControllers();
				endpoints.MapBlazorHub();
				endpoints.MapFallbackToPage(&quot;/_Host&quot;);
			});
		}
</code></pre>
<p>The issue source: <a href="https://es.codefaq.info/la_identidad_del_usuario_en_dynamicroutevaluetransformer" target="_blank">link</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating Kanban Board using Xamarin.Forms]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-Kanban-Board-using-Xamarin.Forms</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-Kanban-Board-using-Xamarin.Forms</guid>
      <description><![CDATA[This article describes how to create Kanban Board using Xamarin Forms (.NET MAUI) only. Drag & Drop Cards, Set Column WIP, Store data in Local Db.]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>I devoted this week to creating a small utility - Kanban board. I will skip steps for creating a local database and will focus on Xamarin controls.</p>
<p>So let's create the app step by step:</p>
<ol>
<li>Create a blank Xamarin.Forms project</li>
<li>Create models in the shared project</li>
</ol>
<ul>
<li><code>Card.cs</code></li>
</ul>
<pre><code class="language-csharp">public class Card
{
	public int Id { get; set; }
	public string Name { get; set; }
	public string Description { get; set; }
	public int Order { get; set; }
	public int ColumnId { get; set; }
	public Column Column { get; set; }
}
</code></pre>
<ul>
<li><code>Column.cs</code></li>
</ul>
<pre><code class="language-csharp">public class Column
{
	public Column()
	{
		Cards = new ObservableCollection&lt;Card&gt;();
	}

	public int Id { get; set; }
	public string Name { get; set; }
	public int Wip { get; set; } = int.MaxValue;
	public ICollection&lt;Card&gt; Cards { get; set; }
	public int Order { get; set; }
}
</code></pre>
<ul>
<li><code>ColumnInfo.cs</code></li>
</ul>
<pre><code class="language-csharp">public class ColumnInfo
{
	public ColumnInfo(int index, Column column)
	{
		Index = index;
		Column = column;
	}

	public Column Column { get; }
	public int Index { get; }
	public bool IsWipReached =&gt; Column.Cards.Count &gt;= Column.Wip;
}
</code></pre>
<ol start="3">
<li>It's time to create a ViewModel. Create a new file <code>MainPageViewModel.cs</code>:</li>
</ol>
<pre><code class="language-csharp">public class MainPageViewModel : ObservableObject
	{
		private ObservableCollection&lt;ColumnInfo&gt; _columns;
		private int _position;
		private Card _dragCard;

		public MainPageViewModel()
		{
			RefreshCommand.Execute(null);
		}

		public ICommand RefreshCommand =&gt; new Command(UpdateCollection);

		public ICommand DropCommand =&gt; new Command&lt;ColumnInfo&gt;(columnInfo =&gt;
		{
			if (_dragCard is not null &amp;&amp; columnInfo.Column.Cards.Count &lt; columnInfo.Column.Wip)
			{
				// Update you card here store info in the database.
				// UPDATE Cards SET ColumnId = _dragCard.ColumnId WHERE Id = _dragCard.Id;
				
				UpdateCollection();
				Position = columnInfo.Index; // Set CarouselView position
			}
		});

		public ICommand DragStartingCommand =&gt; new Command&lt;Card&gt;(card =&gt;
		{
			_dragCard = card; // Store our card
		});

		public ICommand DropCompletedCommand =&gt; new Command(() =&gt;
		{
			_dragCard = null; // Reset the card
		});

		public ICommand AddColumn =&gt; new Command(() =&gt;
		{
			// Add new column here.
			// INSERT INTO Columns (Name, Wip) VALUES (&quot;Name&quot;, 5);
			UpdateCollection();
		});

		public ICommand AddCard =&gt; new Command&lt;int&gt;(columnId =&gt;
		{
			// Add new card here. You can also check if WIP is reached.
			// INSERT INTO Cards (Name, ColumnId) VALUES (&quot;Name&quot;, columnId);
			UpdateCollection();
		});

		public ICommand DeleteCard =&gt; new Command&lt;Card&gt;(async card =&gt;
		{
			var result = await Application.Current.MainPage.DisplayAlert(&quot;Delete card&quot;, $&quot;Do you want to delete card \&quot;{card.Name}\&quot;?&quot;, &quot;Yes&quot;, &quot;No&quot;);
			if (!result)
			{
				return;
			}

			// Delete card from the database
			// DELETE FROM Cards WHERE Id=card.Id

			UpdateCollection();
		});

		public ICommand DeleteColumn =&gt; new Command&lt;ColumnInfo&gt;(async columnInfo =&gt;
		{
			var result = await Application.Current.MainPage.DisplayAlert(&quot;Delete column&quot;, $&quot;Do you want to delete column \&quot;{columnInfo.Column.Name}\&quot; and all its cards?&quot;, &quot;Yes&quot;, &quot;No&quot;);
			if (!result)
			{
				return;
			}

			// Delete column from the database
			// DELETE FROM Columns WHERE Id=columnInfo.Column.Id

			UpdateCollection();
		});

		public ObservableCollection&lt;ColumnInfo&gt; Columns
		{
			get =&gt; _columns;
			set =&gt; SetProperty(ref _columns, value);
		}

		public int Position
		{
			get =&gt; _position;
			set =&gt; SetProperty(ref _position, value);
		}

		private void UpdateCollection()
		{
			IsBusy = true;
			using (var db = new ApplicationContext(App.DbPath))
			{
				Columns = db.Columns.Include(c =&gt; c.Cards)
				                                        .OrderBy(c =&gt; c.Order)
				                                        .ToList()
				                                        .Select(OrderCards)
				                                        .ToObservableCollection();
				Position = 0;
			}

			IsBusy = false;
		}
		
		private static ColumnInfo OrderCards(Column c, int columnNumber)
		{
			c.Cards = c.Cards.OrderBy(card =&gt; card.Order).ToList();
			return new ColumnInfo(columnNumber, c);
		}
	}
</code></pre>
<ol start="4">
<li>Finally the UI part.
<ol>
<li>Add base style and set the view model for the MainPage.</li>
</ol>
</li>
</ol>
<pre><code class="language-xml">&lt;ContentPage.Resources&gt;
	&lt;Color x:Key=&quot;CardBackgroundColor&quot;&gt;White&lt;/Color&gt;
	&lt;Color x:Key=&quot;BoardBackgroundColor&quot;&gt;DimGray&lt;/Color&gt;
	&lt;Color x:Key=&quot;BoardTitleFontColor&quot;&gt;White&lt;/Color&gt;
	&lt;Color x:Key=&quot;FontColor&quot;&gt;Black&lt;/Color&gt;
	&lt;Color x:Key=&quot;ColumnBackgroundColor&quot;&gt;DarkGray&lt;/Color&gt;
	&lt;Color x:Key=&quot;ColumnWipReachedBackgroundColor&quot;&gt;IndianRed&lt;/Color&gt;
	&lt;x:Double x:Key=&quot;BoardTitleSize&quot;&gt;20&lt;/x:Double&gt;
	&lt;x:Double x:Key=&quot;CardTitleSize&quot;&gt;14&lt;/x:Double&gt;
	&lt;x:Double x:Key=&quot;CardDescriptionSize&quot;&gt;12&lt;/x:Double&gt;
	&lt;x:Double x:Key=&quot;ColumnTitleSize&quot;&gt;18&lt;/x:Double&gt;
	&lt;OnPlatform x:Key=&quot;FontAwesomeSolid&quot; x:TypeArguments=&quot;x:String&quot;&gt;
		&lt;On Platform=&quot;Android&quot; Value=&quot;FontAwesome5Solid.otf#Regular&quot; /&gt;
		&lt;On Platform=&quot;iOS&quot; Value=&quot;FontAwesome5Free-Solid&quot; /&gt;
	&lt;/OnPlatform&gt;
&lt;/ContentPage.Resources&gt;
&lt;ContentPage.BindingContext&gt;
	&lt;kanbanboard:MainPageViewModel /&gt;
&lt;/ContentPage.BindingContext&gt;
</code></pre>
<pre><code>2. Add the `RefreshView` so we can swipe to update the content:
</code></pre>
<pre><code class="language-xml">&lt;RefreshView Command=&quot;{Binding RefreshCommand}&quot;
		        IsRefreshing=&quot;{Binding IsBusy}&quot;&gt;
...
&lt;RefreshView&gt;
</code></pre>
<pre><code>3. Now let's add the main page container with the name of the project in the header and button for adding columns in the footer:
</code></pre>
<pre><code class="language-xml">&lt;VerticalStackLayout BackgroundColor=&quot;{DynamicResource BoardBackgroundColor}&quot;&gt;
	&lt;Label
		FontSize=&quot;{StaticResource BoardTitleSize}&quot;
		HorizontalOptions=&quot;Center&quot;
		Text=&quot;Test project name&quot;
		TextColor=&quot;{DynamicResource BoardTitleFontColor}&quot; /&gt;

	&lt;!-- The Kanban board will be here --&gt;

	&lt;Button
		BackgroundColor=&quot;Transparent&quot;
		Command=&quot;{Binding AddColumn}&quot;
		Text=&quot;Add new column&quot; /&gt;
&lt;/VerticalStackLayout&gt;
</code></pre>
<pre><code>4. We will use `CarouselView` for Columns:
</code></pre>
<pre><code class="language-xml">&lt;CarouselView
	x:Name=&quot;Board&quot;
	IndicatorView=&quot;Indicator&quot;
	EmptyView=&quot;No columns to display&quot;
	ItemsSource=&quot;{Binding Columns}&quot;
	Position=&quot;{Binding Position}&quot;
	Loop=&quot;False&quot;
	PeekAreaInsets=&quot;10&quot;&gt;
		&lt;CarouselView.ItemsLayout&gt;
			&lt;LinearItemsLayout ItemSpacing=&quot;10&quot; Orientation=&quot;Horizontal&quot; /&gt;
		&lt;/CarouselView.ItemsLayout&gt;
		&lt;CarouselView.ItemTemplate&gt;
			&lt;DataTemplate&gt;
				&lt;!-- We will add a template with the next step --&gt;
			&lt;/DataTemplate&gt;
		&lt;/CarouselView.ItemTemplate&gt;
&lt;/CarouselView&gt;

&lt;IndicatorView
	x:Name=&quot;Indicator&quot;
	HorizontalOptions=&quot;Center&quot;
	IndicatorColor=&quot;White&quot;
	SelectedIndicatorColor=&quot;Black&quot; /&gt;
</code></pre>
<pre><code>5. Let's create a Column template:
</code></pre>
<pre><code class="language-xml">&lt;Frame Padding=&quot;0&quot; CornerRadius=&quot;10&quot;&gt;
	&lt;Frame.GestureRecognizers&gt;
		&lt;DropGestureRecognizer AllowDrop=&quot;True&quot;
	                       DropCommand=&quot;{Binding BindingContext.DropCommand, Source={x:Reference Board}}&quot;
	                       DropCommandParameter=&quot;{Binding .}&quot;/&gt;
	&lt;/Frame.GestureRecognizers&gt;

	&lt;Frame.Triggers&gt;
		&lt;DataTrigger
			Binding=&quot;{Binding IsWipReached}&quot;
			TargetType=&quot;Frame&quot;
			Value=&quot;True&quot;&gt;
				&lt;Setter Property=&quot;BackgroundColor&quot; Value=&quot;{DynamicResource ColumnWipReachedBackgroundColor}&quot; /&gt;
		&lt;/DataTrigger&gt;

		&lt;DataTrigger
			Binding=&quot;{Binding IsWipReached}&quot;
			TargetType=&quot;Frame&quot;
			Value=&quot;False&quot;&gt;
				&lt;Setter Property=&quot;BackgroundColor&quot; Value=&quot;{DynamicResource ColumnBackgroundColor}&quot; /&gt;
		&lt;/DataTrigger&gt;
	&lt;/Frame.Triggers&gt;

	&lt;VerticalStackLayout Margin=&quot;10&quot;&gt;
		&lt;HorizontalStackLayout Margin=&quot;10&quot;&gt;
			&lt;Label
				FontAttributes=&quot;Bold&quot;
				FontSize=&quot;{StaticResource ColumnTitleSize}&quot;
				HorizontalOptions=&quot;Start&quot;
				Text=&quot;{Binding Column.Name}&quot;
				VerticalOptions=&quot;Center&quot; /&gt;
			&lt;Label
				FontSize=&quot;{StaticResource ColumnTitleSize}&quot;
				HorizontalOptions=&quot;CenterAndExpand&quot;
				VerticalOptions=&quot;Center&quot;&gt;
					&lt;Label.FormattedText&gt;
						&lt;FormattedString&gt;
							&lt;Span Text=&quot;{Binding Column.Cards.Count}&quot; /&gt;
							&lt;Span&gt;/&lt;/Span&gt;
							&lt;Span Text=&quot;{Binding Column.Wip}&quot; /&gt;
						&lt;/FormattedString&gt;
					&lt;/Label.FormattedText&gt;
			&lt;/Label&gt;
			&lt;ImageButton
				Command=&quot;{Binding BindingContext.DeleteColumn, Source={x:Reference Board}}&quot;
				CommandParameter=&quot;{Binding .}&quot;
				HorizontalOptions=&quot;EndAndExpand&quot;
				VerticalOptions=&quot;Center&quot;&gt;
					&lt;ImageButton.Source&gt;
						&lt;FontImageSource
							FontFamily=&quot;{StaticResource FontAwesomeSolid}&quot;
							Glyph=&quot;&amp;#xf2ed;&quot;
							Size=&quot;{StaticResource ColumnTitleSize}&quot;
							Color=&quot;{DynamicResource FontColor}&quot; /&gt;
					&lt;/ImageButton.Source&gt;
			&lt;/ImageButton&gt;
		&lt;/HorizontalStackLayout&gt;
		
		&lt;CollectionView EmptyView=&quot;No cards to display&quot; ItemsSource=&quot;{Binding Column.Cards}&quot;&gt;
			&lt;CollectionView.ItemsLayout&gt;
				&lt;LinearItemsLayout ItemSpacing=&quot;5&quot; Orientation=&quot;Vertical&quot; /&gt;
			&lt;/CollectionView.ItemsLayout&gt;
			&lt;CollectionView.ItemTemplate&gt;
				&lt;DataTemplate&gt;
					&lt;!-- Card template will be here --&gt;
				&lt;/DataTemplate&gt;
			&lt;/CollectionView.ItemTemplate&gt;
		&lt;/CollectionView&gt;

		&lt;Button
			BackgroundColor=&quot;Transparent&quot;
			Command=&quot;{Binding BindingContext.AddCard, Source={x:Reference Board}}&quot;
			CommandParameter=&quot;{Binding Column.Id}&quot;
			Text=&quot;Add new card&quot; /&gt;
	&lt;/VerticalStackLayout&gt;
&lt;/Frame&gt;
</code></pre>
<pre><code>6. The Final part - Card Template:
</code></pre>
<pre><code class="language-xml">&lt;Frame
	Margin=&quot;5,0&quot;
	Padding=&quot;0&quot;
	BackgroundColor=&quot;{DynamicResource CardBackgroundColor}&quot;
	CornerRadius=&quot;10&quot;&gt;
		&lt;Frame.GestureRecognizers&gt;
			&lt;DragGestureRecognizer CanDrag=&quot;True&quot;
				   DragStartingCommand=&quot;{Binding BindingContext.DragStartingCommand, Source={x:Reference Board}}&quot;
				   DragStartingCommandParameter=&quot;{Binding .}&quot;
				   DropCompletedCommand=&quot;{Binding BindingContext.DropCompletedCommand, Source={x:Reference Board}}&quot;/&gt;
		&lt;/Frame.GestureRecognizers&gt;
		
		&lt;Grid Margin=&quot;10&quot;&gt;
			&lt;Grid.RowDefinitions&gt;
				&lt;RowDefinition Height=&quot;Auto&quot; /&gt;
				&lt;RowDefinition Height=&quot;Auto&quot; /&gt;
			&lt;/Grid.RowDefinitions&gt;
			&lt;Grid.ColumnDefinitions&gt;
				&lt;ColumnDefinition Width=&quot;*&quot; /&gt;
				&lt;ColumnDefinition Width=&quot;Auto&quot; /&gt;
			&lt;/Grid.ColumnDefinitions&gt;
			&lt;Label
				Grid.Column=&quot;0&quot;
				FontAttributes=&quot;Bold&quot;
				FontSize=&quot;{StaticResource CardTitleSize}&quot;
				Text=&quot;{Binding Name}&quot; /&gt;
			&lt;Label
				Grid.Row=&quot;1&quot;
				Grid.Column=&quot;0&quot;
				FontSize=&quot;{StaticResource CardDescriptionSize}&quot;
				Text=&quot;{Binding Description}&quot;
				VerticalOptions=&quot;End&quot; /&gt;
			&lt;ImageButton
				Grid.Row=&quot;0&quot;
				Grid.RowSpan=&quot;2&quot;
				Grid.Column=&quot;1&quot;
				Command=&quot;{Binding BindingContext.DeleteCard, Source={x:Reference Board}}&quot;
				CommandParameter=&quot;{Binding .}&quot;
				WidthRequest=&quot;{StaticResource CardTitleSize}&quot;
				HeightRequest=&quot;{StaticResource CardTitleSize}&quot;
				HorizontalOptions=&quot;EndAndExpand&quot;&gt;
					&lt;ImageButton.Source&gt;
						&lt;FontImageSource
							FontFamily=&quot;{StaticResource FontAwesomeSolid}&quot;
							Glyph=&quot;&amp;#xf2ed;&quot;
							Size=&quot;{StaticResource CardTitleSize}&quot;
							Color=&quot;{DynamicResource FontColor}&quot; /&gt;
					&lt;/ImageButton.Source&gt;
			&lt;/ImageButton&gt;
		&lt;/Grid&gt;
&lt;/Frame&gt;
</code></pre>
<p>The result looks like this:</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/5/kanban2.png" alt="Drag &amp; Drop" /></p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/5/kanban3.png" alt="WIP is reached" /></p>
<p>The full source code is available on <a href="https://github.com/VladislavAntonyuk/KanbanBoard/tree/XamarinForms" target="_blank">GitHub</a>.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[How to show SnackBar and Toast using Xamarin Community Toolkit]]></title>
      <link>https://vladislavantonyuk.github.io/articles/How-to-show-SnackBar-and-Toast-using-Xamarin-Community-Toolkit</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/How-to-show-SnackBar-and-Toast-using-Xamarin-Community-Toolkit</guid>
      <description><![CDATA[Demonstrate how to configure SnackBar and Toast using Xamarin Community Toolkit.]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>Today I am excited to announce a new category - Xamarin! Xamarin is an awesome open-source mobile app platform for .NET. While it is in a stage of evolution to .NET MAUI, I want to share a must-have package you will definitely love. And this is Xamarin Community Toolkit (XCT). This library contains a lot of features, which are used in almost all projects: behaviors, converters, effects, MVVM utilities, and awesome new controls including the CameraView, AvatarView, TabView, and much more.</p>
<p>In this article, I will describe how to use a new Snackbar and Toast to kindly notify users about any action in the app.</p>
<h3 id="toast">Toast</h3>
<p>A toast provides simple feedback about an operation in a small popup.</p>
<p>In XCT there are 2 different ways to use Toast.</p>
<ol>
<li>The simple - on your Page call the method:</li>
</ol>
<pre><code class="language-csharp">await MyPage.DisplayToastAsync(message, duration);	
</code></pre>
<p>where <code>message</code> is your text, and <code>duration</code> is the timespan of toast (an optional parameter). Default duration = 3000 milliseconds;</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/4/toast1.png" alt="Toast1" /></p>
<ol start="2">
<li>With advanced settings you can customize Message options and Toast options:</li>
</ol>
<pre><code class="language-csharp">    var messageOptions = new MessageOptions	
    {	
        Foreground = Color.Black,	
        Font = Font.SystemFontOfSize(16),
        Message = &quot;My text&quot;	
    };	
    var options = new ToastOptions	
    {	
        MessageOptions = messageOptions,	
        Duration = TimeSpan.FromMilliseconds(3000),	
        BackgroundColor = Color.Default,	
        IsRtl = false
    };	
    await this.DisplayToastAsync(options);	
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/4/toast2.png" alt="Toast2" /></p>
<h3 id="snackbar">Snackbar</h3>
<p>Snackbars inform users of a process that an app has performed or will perform. They appear temporarily, towards the bottom of the screen</p>
<p>Snackbar has an API that is similar to Toast.</p>
<ol>
<li>Simple execution with predefined settings. On your Page call the method:</li>
</ol>
<pre><code class="language-csharp">var result = await MyPage.DisplaySnackbarAsync(message, actionButtonText, action, duration);
</code></pre>
<p>where <code>message</code> is your text, <code>actionButtonText</code> is the text for the button, <code>action</code> is a <code>Func&lt;Task&gt;</code> and <code>duration</code> is optional parameter. Default duration = 3000 milliseconds;</p>
<p>The result is <code>Boolean</code>. <code>True</code> - if Snackbar is closed by the user. <code>False</code> - if Snackbar is closed by timeout.</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/4/snackbar1.png" alt="Snackbar1" /></p>
<ol start="2">
<li>With advanced settings you have a full control for all <code>MessageOptions</code>, <code>SnackBarActionOptions</code> and <code>SnackBarOptions</code>:</li>
</ol>
<pre><code class="language-csharp">    var messageOptions = new MessageOptions	
    {	
        Foreground = Color.Black,	
        Font = Font.SystemFontOfSize(16),
        Message = &quot;My text&quot;	
    };	
    var actionOptions = new List&lt;SnackBarActionOptions&gt;	
    {	
        new SnackBarActionOptions	
        {	
            ForegroundColor = Color.Black,	
            BackgroundColor = Color.White,	
            FontFamily = Font.SystemFontOfSize(14),	
            Text = &quot;Action 1&quot;,	
            Action = () =&gt; // null by default	
            {	
                Debug.WriteLine(&quot;1&quot;);	
                return Task.CompletedTask;	
            }	
        },
        new SnackBarActionOptions	
        {	
            ForegroundColor = Color.Black,	
            BackgroundColor = Color.White,	
            FontFamily = Font.SystemFontOfSize(16),
            Text = &quot;Action 2&quot;,	
            Action = () =&gt; // null by default	
            {	
                Debug.WriteLine(&quot;1&quot;);	
                return Task.CompletedTask;	
            }	
        }	
    };	
    var options = new SnackbarOptions	
    {	
        MessageOptions = messageOptions,	
        Duration = TimeSpan.FromMilliseconds(3000),
        BackgroundColor = Color.Default,	
        IsRtl = false,	
        Actions = actionOptions	
    };	
    var result = await this.DisplaySnackbarAsync(options);	
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/4/snackbar2.png" alt="Snackbar2" /></p>
<h2 id="details-of-implementation-and-limitations-for-different-platforms">Details of implementation and limitations for different platforms</h2>
<h3 id="i">I</h3>
<p>Both Toast and Snackbar work on all platforms: Android, iOS, macOS, UWP, WPF, GTK, and Tizen.</p>
<h3 id="ii">II</h3>
<p>Both Toast and Snackbar by default use native colors and automatically change them depending on the system theme.</p>
<h3 id="iii">III</h3>
<p>&ldquo;Native&rdquo; Toast and Snackbar is available only on Android and was created by Google.</p>
<p>Other platforms use &ldquo;Container&rdquo; (UIView for iOS, NSView for macOS, Grid for WPF, HBox for GTK, and Dialog for Tizen) to display a message and action buttons.</p>
<p>Because of Android limitations, it has only 1 action button, while all other platforms can display multiple action buttons.</p>
<h3 id="iv">IV</h3>
<p>Android uses snackbar for both <code>DisplayToastAsync</code> and <code>DisplaySnackbarAsync</code>. The difference is that <code>DisplayToastAsync</code> hides the action button.</p>
<h2 id="nightly-builds-and-new-api">Nightly builds and new API</h2>
<h3 id="update-1-set-the-padding">Update 1 - Set the Padding</h3>
<p>A new property <code>Thickness Padding { get; set; }</code> was added to <code>MessageOptions</code> and <code>SnackBarActionOptions</code>.</p>
<h3 id="update-2-set-the-anchor">Update 2 - Set the Anchor</h3>
<p>Now you can anchor the toast and the snackbar to any VisualElement like this:</p>
<pre><code>var result = await MyButton.DisplaySnackbarAsync(message, actionButtonText, action, duration);
</code></pre>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/4/toast3.png" alt="Anchored Toast" /></p>
<p>Feel free to try it and leave your feedback. Happy coding!</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Creating screen brightness service with .NET]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Creating-screen-brightness-service-with-.NET</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Creating-screen-brightness-service-with-.NET</guid>
      <description><![CDATA[Creating WindowsService to adjust screen brightness on laptops.]]></description>
      <content:encoded><![CDATA[<p>There was a time when Windows automatically changed brightness depending on power status. For example, when my laptop is plugged in the brightness is 100%, and when it's on battery the brightness is 70%.</p>
<p>It worked well till Windows 10 1903 update. After that, the brightness remained the same after unplugging the cable. The question was asked on Microsoft website (<a href="https://answers.microsoft.com/en-us/windows/forum/all/unable-to-set-brightness-level-for-plugged-in-and/f4dbbd4f-b325-471f-912b-7f9785161729" target="_blank">Link</a>), but it is still open.</p>
<p>Let's now fix it using the latest .NET!</p>
<p>First of all, create a WorkerService.</p>
<pre><code>dotnet new worker
</code></pre>
<p>Now we need to convert it to WindowsService.</p>
<ol>
<li><p>First add NuGet package <code>Microsoft.Extensions.Hosting.WindowsServices</code></p>
</li>
<li><p>Then in <code>Program.cs</code> call <code>UseWindowsService()</code> in <code>CreateHostBuilder</code>:</p>
</li>
</ol>
<pre><code class="language-csharp">public static IHostBuilder CreateHostBuilder(string[] args)
{
	return Host.CreateDefaultBuilder(args)
		.ConfigureServices((_, services) =&gt; { services.AddHostedService&lt;Worker&gt;(); })
		.UseWindowsService();
}
</code></pre>
<p>Our base Windows Service is ready.</p>
<p>Now let's back to our main issue.</p>
<p>This utility is split into 2 parts: the first checks the power status, and the second sets the brightness.</p>
<h4 id="part-1.check-the-power-status">Part 1. Check the Power status</h4>
<pre><code class="language-csharp">public enum BatteryFlag : byte
{
	High = 1,
	Low = 2,
	Critical = 4,
	Charging = 8,
	NoSystemBattery = 128,
	Unknown = 255
}

public enum AcLineStatus: byte
{
	Offline = 0,
	Online = 1,
	Unknown = 255
}

[StructLayout(LayoutKind.Sequential)]
public class PowerState
{
	public AcLineStatus ACLineStatus;
	public BatteryFlag BatteryFlag;

	// direct instantiation not intended, use GetPowerState.
	private PowerState()
	{
	}

	public static PowerState GetPowerState()
	{
		var state = new PowerState();
		if (GetSystemPowerStatusRef(state))
			return state;

		throw new ApplicationException(&quot;Unable to get power state&quot;);
	}

	[DllImport(&quot;Kernel32&quot;, EntryPoint = &quot;GetSystemPowerStatus&quot;)]
	private static extern bool GetSystemPowerStatusRef(PowerState sps);
}
</code></pre>
<p>Let's now see what is here.</p>
<ol>
<li><code>BatteryFlag</code> describes the current battery status. It has the value <code>NoSystemBattery</code> which we use to know if the device is a desktop or a laptop.</li>
<li><code>AcLineStatus</code> describes if a device is charging (<code>Online</code>) or not (<code>Offline</code>).</li>
<li><code>GetPowerState</code> method calls the WinApi method to get the current power state.</li>
</ol>
<h4 id="part-2.creating-the-brightness-service">Part 2. Creating the Brightness Service</h4>
<pre><code class="language-csharp">internal class BrightnessService
{
	public static byte GetBrightness()
	{
		var managementObjectSearcher = new ManagementObjectSearcher(new ManagementScope(&quot;root\\WMI&quot;),
			new SelectQuery(&quot;WmiMonitorBrightness&quot;));
		var objectCollection = managementObjectSearcher.Get();
		byte num = 0;
		using (var enumerator = objectCollection.GetEnumerator())
		{
			if (enumerator.MoveNext())
				num = (byte) enumerator.Current.GetPropertyValue(&quot;CurrentBrightness&quot;);
		}

		objectCollection.Dispose();
		managementObjectSearcher.Dispose();
		return num;
	}		

	public static void SetBrightness(byte targetBrightness)
	{
		var managementObjectSearcher = new ManagementObjectSearcher(new ManagementScope(&quot;root\\WMI&quot;),
			new SelectQuery(&quot;WmiMonitorBrightnessMethods&quot;));
		var objectCollection = managementObjectSearcher.Get();
		using (var enumerator = objectCollection.GetEnumerator())
		{
			if (enumerator.MoveNext())
				((ManagementObject) enumerator.Current).InvokeMethod(&quot;WmiSetBrightness&quot;, new object[]
				{
					uint.MaxValue,
					targetBrightness
				});
		}

		objectCollection.Dispose();
		managementObjectSearcher.Dispose();
	}
}
</code></pre>
<p>Using WMI we get and set the brightness.</p>
<p>The last part is left. We need to call our services. Open <code>Worker.cs</code> and replace <code>ExecuteAsync</code> method content with:</p>
<pre><code class="language-csharp">const byte minBrightness = 0;
const byte maxBrightness = 100;
while (!stoppingToken.IsCancellationRequested)
{
	var powerState = PowerState.GetPowerState();
	if (powerState.BatteryFlag == BatteryFlag.NoSystemBattery)
	{
		await StopAsync(stoppingToken);
	}
	else
	{
		var currentBrightness = BrightnessService.BrightnessService.GetBrightness();
		var desiredBrightness = powerState.ACLineStatus == AcLineStatus.Offline
			? minBrightness
			: maxBrightness;
		if (currentBrightness != desiredBrightness)
		{
			BrightnessService.BrightnessService.SetBrightness(desiredBrightness);
		}
	}

	await Task.Delay(1000, stoppingToken);
}
</code></pre>
<p>So we check for the power state. If our device is a desktop (<code>NoSystemBattery</code>) just stop the service. Else get the current brightness and compare it to the desired. If they are different we call the <code>BrightnessService</code>. To monitor the status and react to the power state changes we wait for 1 second and then try to set the brightness again.</p>
<h2 id="bonus">Bonus</h2>
<p>Create install/uninstall scripts.</p>
<h3 id="install-script">Install script</h3>
<pre><code>SC CREATE &quot;ScreenBrightnessService&quot; start= auto binpath= &quot;%~d0%~p0\ScreenBrightnessService.exe&quot;
SC START &quot;ScreenBrightnessService&quot;
</code></pre>
<p>Save and copy the bat file to the output directory and run as administrator. The WindowsService should appear in the list of services</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/3/screen-brightness-service.png" alt="Screen Brightness Service" /></p>
<h3 id="uninstall-script">Uninstall script</h3>
<pre><code>SC STOP &quot;ScreenBrightnessService&quot;
SC DELETE &quot;ScreenBrightnessService&quot;
</code></pre>
<p>Save and copy the bat file to the output directory and run as administrator. The WindowsService should disappear from the list of services</p>
<h2 id="p.s">P.S.</h2>
<p>After some days of usage, I found the flickering of the screen. It happens because Windows has another place where it stores the current brightness settings. Let's now fix the issue.</p>
<p>Add new method to the <code>BrightnessService</code>:</p>
<pre><code class="language-csharp">private static void SetBrightnessRegistry(byte targetBrightness)
{
	try
	{
		var key = Registry.LocalMachine.OpenSubKey(@&quot;SYSTEM\CurrentControlSet\Control\Power\User\PowerSchemes&quot;);
		var activePowerScheme = key.GetValue(&quot;ActivePowerScheme&quot;);
		key = key.OpenSubKey($@&quot;{activePowerScheme}\7516b95f-f776-4464-8c53-06167f40cc99\aded5e82-b909-4619-9949-f5d71dac0bcb&quot;, true);
		key.SetValue(&quot;ACSettingIndex&quot;, targetBrightness, RegistryValueKind.DWord);
		key.SetValue(&quot;DCSettingIndex&quot;, targetBrightness, RegistryValueKind.DWord);
	}
	catch (Exception e)
	{
		// do some logging here
		throw;
	}
}
</code></pre>
<p>Now call this method in <code>SetBrigthness</code>.
That's it.</p>
<p>You can download the solution on my GitHub: <a href="https://github.com/VladislavAntonyuk/WindowsService" target="_blank" title="WindowsService">WindowsService</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[Secrets of successful interview]]></title>
      <link>https://vladislavantonyuk.github.io/articles/Secrets-of-successful-interview</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/Secrets-of-successful-interview</guid>
      <description><![CDATA[Some base recommendations which might help you to successfully pass the interview.]]></description>
      <content:encoded><![CDATA[<p>Hi there!</p>
<p>New week - new article!</p>
<p>A few days ago I was asked how to successfully pass the interview and receive the offer from the company. I will not guarantee that you will receive the offer, but these recommendations based on my own experience might help you.</p>
<h2 id="common-questions">Common questions</h2>
<p>I suggest you prepare a list of the most common questions, which are usually asked at each interview. I suggest you this article:  <a href="https://dou.ua/lenta/articles/interview-questions-net-developer/" target="_blank" title="Interview questions .NET developer">https://dou.ua/lenta/articles/interview-questions-net-developer/</a> , which contains 150+ questions. This is probably the largest list of questions I have come across.</p>
<h2 id="my-questions-database">My questions database</h2>
<p>At the interview, in any case, there will be questions that cannot be answered. This is normal. It would be better to remember these questions and make your list for the future. So in the next interview, you should already know the answer.</p>
<h2 id="cv-preparation">CV preparation</h2>
<p>You don't need to write everything you have ever used. No need to write like Windows, Microsoft PowerPoint, Adobe Photoshop version 6, etc. It will be better if you add it during an interview if you are asked.</p>
<p>You need to write what you are really sure of.
It is better to divide by categories: programming language, databases, version control systems, etc.
You can generate a resume on LinkedIn.</p>
<p>You can add the most recent education, do not write the school or kindergarten you visited 😃</p>
<h2 id="projects">Projects</h2>
<p>If you just starting your career, and do not have real client experience, you can add your diploma graduation work. (I hope it is something bigger than &ldquo;Hello World&rdquo;)</p>
<p>When the interviewers look at the project, they understand the systems you worked on and start asking you about these topics. Otherwise, there will be a very abstract interview.</p>
<p>Projects you write from the very last to the first. Without disclosing of course information about the client.</p>
<h2 id="project-expectation">Project expectation</h2>
<p>Probably the most important thing. You should like the project. If you understand already at the interview stage that you will not be very interested in this, then it is better to say about it. Identify your priorities and expectations. What do you expect from the project? And then watch how much it rushes.</p>
<p>For example, you are applying for a front end developer
And the interviewer tells you: &ldquo;We have many tasks on the back. So how do you feel about spending 70% of your time on the backend on Java?&rdquo;</p>
<h2 id="be-ready-for-the-practical-part">Be ready for the practical part</h2>
<p>There are 2 types of practice tests.
The first is &ldquo;Sketch in 5 minutes on your knees&rdquo;.</p>
<p>For example, you have 4 points - the vertices of a rectangle. Check if point A belongs to the rectangle. Then the interviewer may ask: How would you optimize this code?  What if the number is negative? How would you test this code?</p>
<p>The second variant is larger test tasks. It is important to create scalable, optimized, readable, and testable solutions.
This task may take from several hours to several days. You then send it back to the reviewers and they send you the result.</p>
<p>Practical questions don't have to be. Pay more attention to theory. You will learn to write code over time.
Nobody will demand super solutions from you if you are a Junior.</p>
<h2 id="questions">Questions</h2>
<p>And the most important thing. Before the interview, check the basic information about the company and the project. In the end, the interviewer will tell you: Thanks for the interview. Do you have any questions?</p>
<p>And here it is very important to ask something. Show your interest. You can ask about the team. You can ask about how the processes are built, etc. Basically, everything that interests you.</p>
<h2 id="the-final-suggestion">The final suggestion</h2>
<p>Watch the Youtube video about with other suggestions from IT experts: <a href="https://www.youtube.com/watch?v=7nIgtYTlVSw" target="_blank" title="IT Kitchen">https://www.youtube.com/watch?v=7nIgtYTlVSw</a></p>
<p>Subscribe to the Instagram account: <a href="https://www.instagram.com/emmayeroshek/" target="_blank" title="Эмма Ерошек">https://www.instagram.com/emmayeroshek/</a>. She gives free advice on IT.</p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
    <item>
      <title><![CDATA[How to automatically keep your code clean]]></title>
      <link>https://vladislavantonyuk.github.io/articles/How-to-automatically-keep-your-code-clean</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 GMT</pubDate>
      <guid>https://vladislavantonyuk.github.io/articles/How-to-automatically-keep-your-code-clean</guid>
      <description><![CDATA[The article is dedicated to setting git hooks and using code inspectors.]]></description>
      <content:encoded><![CDATA[<p>This is my first article, which I dedicate to setting tools that can help to keep the code clean and prevent you from publishing unexpected files to the repository.</p>
<p>First, let me ask you 2 questions, which will help you to better understand the reason for writing the article.</p>
<ol>
<li>How many times did you publish a confidential file to the repository, so you needed to revert your changes?</li>
<li>How many people are working with you on the same code?</li>
</ol>
<p>As for the first question, we all know that people make mistakes, but we can prevent ourselves from them.</p>
<p>As for the second question, if you work in a team, you probably see your team member write code in a slightly different style than you normally do (extra spaces, additional scopes, or brackets). As for me, I prefer a consistent code style with predefined rules, which each team member follows. But even if you defined some config files, it doesn't matter that all will follow them. So we need additional steps which will check all our configurations before publishing the code.</p>
<p>So, let's start.</p>
<p>//Note: some steps are applied for a git repository only.//</p>
<p><strong>Step 1.</strong></p>
<p>First, let's create a new empty library project <code>GitConfiguration</code>.</p>
<p>Now open csproj file and replace its content with:</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

	&lt;PropertyGroup&gt;
		&lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
	&lt;/PropertyGroup&gt;

	&lt;Target Name=&quot;PreBuild&quot; BeforeTargets=&quot;PreBuildEvent&quot;&gt;
	  &lt;Exec Command=&quot;git config core.hookPath hooks&quot; /&gt;
	&lt;/Target&gt;
&lt;/Project&gt;
</code></pre>
<p>Create a new folder <code>hooks</code> in your repository root folder.
Build your solution. Now git is configured to our <code>hooks</code> folder.</p>
<p>Here we use the command <code>git config core.hookPath hooks</code> which set up git to use actions from the specific folder.</p>
<p><strong>Step 2.</strong></p>
<p>Git has hooks - actions that are executed depending on your action. We will use the <code>pre-commit</code> hook.</p>
<p>So, open the <code>hooks</code> folder and create a new file <code>pre-commit</code> with the next content:</p>
<pre><code class="language-bash">#!/bin/sh
echo &quot;error&quot;
exit 1
</code></pre>
<p>Now try to commit your changes. You should receive the error</p>
<p><img src="https://ik.imagekit.io/VladislavAntonyuk/vladislavantonyuk/articles/1/git-commit-error.png" alt="Git Commit Error" /></p>
<p>Now replace the content with <code>exit 0</code> and try to commit again. All your changes are committed.</p>
<p><strong>Step 3.</strong></p>
<p>Now let's add our code inspectors to the <code>pre-commit</code> file.</p>
<p>I will describe my 3 favorites which I used many times.</p>
<ol>
<li>dotnet format. This utility goes through all your files in solutions and formats the code according to your style rules.</li>
</ol>
<p>Add the next code to your <code>pre-commit</code> file:</p>
<pre><code class="language-bash">$solution=&quot;YourSln.sln&quot;
dotnet tool install -g dotnet-format
dotnet format $solution --check
status=$?
[ $status -eq 0 ] &amp;&amp; echo &quot;No errors found&quot; || dotnet format $solution
exit $status
</code></pre>
<p>So first we install the tool. Then we check if our solution has any errors. If any we run formatting and check the exit code of the operation.</p>
<ol start="2">
<li>Jetbrains.Resharper.CommandTools - powerful tools that can help you not only inspect the code but also clean up it and find duplicates.</li>
</ol>
<p>Add the next code to the beginning of your <code>pre-commit</code> file:</p>
<pre><code class="language-bash">dotnet tool install -g JetBrains.ReSharper.GlobalTools
jb inspectcode $solution --properties:Configuration=Release --output=&quot;result.xml&quot;
jb cleanupcode $solution
</code></pre>
<h3 id="summary">Summary</h3>
<p>So using git hooks you can control your actions with a repository.</p>
<p>Code inspectors should help you automatically analyze and format your code to follow your preferences.</p>
<p>You can find more examples on my GitHub: <a href="https://github.com/VladislavAntonyuk/XamarinAndroidFloatingWindow" target="_blank" title="Xamarin Android Floating Window">XamarinAndroidFloatingWindow</a></p>
]]></content:encoded>
      <dc:creator><![CDATA[Vladislav Antonyuk]]></dc:creator>
    </item>
  </channel>
</rss>